{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/MotionFade/CubismFadeStateObserver.ts"],"names":["animation","_decorator","ccclass","CubismFadeStateObserver","StateMachineComponent","_cubismFadeMotionList","_playingMotions","_isDefaulState","_layerIndex","_layerWeight","_isStateTransitionFinished","getPlayingMotions","isDefaultState","getLayerWeight","getStateTransitionFinished","setStateTransitionFinished","isFinished","stopAnimation","index","splice","onEnable","Array","onMotionStateEnter","animator","stateInfo","onMotionStateExit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAOSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;;;;;AAPpB;AACA;AACA;AACA;AACA;AACA;;;;;OAOM;AAAEC,QAAAA;AAAF,O,GAAcD,U;;yBAGCE,uB,WADpBD,OAAO,CAAC,yBAAD,C,gBAAR,MACqBC,uBADrB,SAEUH,SAAS,CAACI,qBAFpB,CAIA;AAAA;AAAA;AAAA,eACUC,qBADV,GAC+D,IAD/D;AAAA,eAEUC,eAFV,GAEmE,IAFnE;AAAA,eAGUC,cAHV,GAGoC,KAHpC;AAAA,eAIUC,WAJV,GAIgC,CAJhC;AAAA,eAKUC,YALV,GAKiC,CALjC;AAAA,eAMUC,0BANV,GAMgD,KANhD;AAAA;;AAOSC,QAAAA,iBAAiB,GAA0C;AAChE,iBAAO,KAAKL,eAAZ;AACD;;AACMM,QAAAA,cAAc,GAAY;AAC/B,iBAAO,KAAKL,cAAZ;AACD;;AACMM,QAAAA,cAAc,GAAW;AAC9B,iBAAO,KAAKJ,YAAZ;AACD;;AACMK,QAAAA,0BAA0B,GAAY;AAC3C,iBAAO,KAAKJ,0BAAZ;AACD;;AACMK,QAAAA,0BAA0B,CAACC,UAAD,EAAsB;AACrD,eAAKN,0BAAL,GAAkCM,UAAlC;AACD;;AACMC,QAAAA,aAAa,CAACC,KAAD,EAAgB;AAClC,cAAI,KAAKZ,eAAL,IAAwB,IAA5B,EAAkC;AAChC;AACD;;AACD,eAAKA,eAAL,GAAuB,KAAKA,eAAL,CAAqBa,MAArB,CAA4BD,KAA5B,EAAmC,CAAnC,CAAvB;AACD;;AACDE,QAAAA,QAAQ,GAAG;AACT,eAAKV,0BAAL,GAAkC,KAAlC;;AACA,cAAI,KAAKJ,eAAL,IAAwB,IAA5B,EAAkC;AAChC,iBAAKA,eAAL,GAAuB,IAAIe,KAAJ,EAAvB;AACD;AACF,SAjCH,CAkCE;;;AACOC,QAAAA,kBAAkB,CACvBC,QADuB,EAEvBC,SAFuB,EAGvB;AACA,gBAAMF,kBAAN,CAAyBC,QAAzB,EAAmCC,SAAnC,EADA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACMC,QAAAA,iBAAiB,CACtBF,QADsB,EAEtBC,SAFsB,EAGtB;AACA,gBAAMC,iBAAN,CAAwBF,QAAxB,EAAkCC,SAAlC;AACA,eAAKd,0BAAL,GAAkC,IAAlC;AACD;;AA5HH,O","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { animation, _decorator } from 'cc';\r\nimport CubismFadeMotionList from './CubismFadeMotionList';\r\nimport CubismFadePlayingMotion from './CubismFadePlayingMotion';\r\nimport type ICubismFadeState from './ICubismFadeState';\r\nimport type CubismFadeController from './CubismFadeController';\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('CubismFadeStateObserver')\r\nexport default class CubismFadeStateObserver\r\n  extends animation.StateMachineComponent\r\n  implements ICubismFadeState\r\n{\r\n  private _cubismFadeMotionList: CubismFadeMotionList | null = null;\r\n  private _playingMotions: Array<CubismFadePlayingMotion> | null = null;\r\n  private _isDefaulState: boolean = false;\r\n  private _layerIndex: number = 0;\r\n  private _layerWeight: number = 0;\r\n  private _isStateTransitionFinished: boolean = false;\r\n  public getPlayingMotions(): Array<CubismFadePlayingMotion> | null {\r\n    return this._playingMotions;\r\n  }\r\n  public isDefaultState(): boolean {\r\n    return this._isDefaulState;\r\n  }\r\n  public getLayerWeight(): number {\r\n    return this._layerWeight;\r\n  }\r\n  public getStateTransitionFinished(): boolean {\r\n    return this._isStateTransitionFinished;\r\n  }\r\n  public setStateTransitionFinished(isFinished: boolean) {\r\n    this._isStateTransitionFinished = isFinished;\r\n  }\r\n  public stopAnimation(index: number) {\r\n    if (this._playingMotions == null) {\r\n      return;\r\n    }\r\n    this._playingMotions = this._playingMotions.splice(index, 1);\r\n  }\r\n  onEnable() {\r\n    this._isStateTransitionFinished = false;\r\n    if (this._playingMotions == null) {\r\n      this._playingMotions = new Array<CubismFadePlayingMotion>();\r\n    }\r\n  }\r\n  // public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)\r\n  public onMotionStateEnter(\r\n    animator: animation.AnimationController,\r\n    stateInfo: animation.MotionStateStatus\r\n  ) {\r\n    super.onMotionStateEnter(animator, stateInfo);\r\n    // const fadeController = animator.node.getComponent(CubismFadeController);\r\n    // // Fail silently...\r\n    // if (fadeController == null) {\r\n    //   return;\r\n    // }\r\n    // this._cubismFadeMotionList = fadeController.CubismFadeMotionList;\r\n    // this._layerIndex = layerIndex;\r\n    // this._layerWeight = this._layerIndex == 0 ? 1.0 : animator.GetLayerWeight(this._layerIndex);\r\n    // const animatorClipInfo = controller.GetNextAnimatorClipInfo(layerIndex);\r\n    // this._isDefaulState = animatorClipInfo.Length == 0;\r\n    // if (this._isDefaulState) {\r\n    //   // Get the motion of Default State only for the first time.\r\n    //   animatorClipInfo = controller.GetCurrentAnimatorClipInfo(layerIndex);\r\n    // }\r\n    // // Set playing motions end time.\r\n    // if (\r\n    //   this._playingMotions != null /*To Cocos*/ &&\r\n    //   this._playingMotions.length > 0 &&\r\n    //   this._playingMotions[this._playingMotions.length - 1].Motion != null\r\n    // ) {\r\n    //   const motion = this._playingMotions[this._playingMotions.length - 1];\r\n    //   const time = game.totalTime;\r\n    //   if (motion.Motion != null) {\r\n    //     const newEndTime = time + motion.Motion.FadeOutTime;\r\n    //     motion.EndTime = newEndTime;\r\n    //     while (motion.IsLooping) {\r\n    //       if (motion.StartTime + motion.Motion.MotionLength >= time) {\r\n    //         break;\r\n    //       }\r\n    //       motion.StartTime += motion.Motion.MotionLength;\r\n    //     }\r\n    //   }\r\n    //   this._playingMotions[this._playingMotions.length - 1] = motion;\r\n    // }\r\n    // if (\r\n    //   this._playingMotions != null &&\r\n    //   this._cubismFadeMotionList != null &&\r\n    //   this._cubismFadeMotionList.MotionInstanceIds != null &&\r\n    //   this._cubismFadeMotionList.CubismFadeMotionObjects != null\r\n    // ) {\r\n    //   for (const i = 0; i < animatorClipInfo.Length; ++i) {\r\n    //     const playingMotion = new CubismFadePlayingMotion();\r\n    //     const instanceId = -1;\r\n    //     const events = animatorClipInfo[i].clip.events;\r\n    //     for (const k = 0; k < events.Length; ++k) {\r\n    //       if (events[k].func != 'InstanceId') {\r\n    //         continue;\r\n    //       }\r\n    //       instanceId = events[k].intParameter;\r\n    //       break;\r\n    //     }\r\n    //     const motionIndex = -1;\r\n    //     for (const j = 0; j < this._cubismFadeMotionList.MotionInstanceIds.length; ++j) {\r\n    //       if (this._cubismFadeMotionList.MotionInstanceIds[j] != instanceId) {\r\n    //         continue;\r\n    //       }\r\n    //       motionIndex = j;\r\n    //       break;\r\n    //     }\r\n    //     playingMotion.Motion =\r\n    //       motionIndex == -1\r\n    //         ? null\r\n    //         : this._cubismFadeMotionList?.CubismFadeMotionObjects[motionIndex];\r\n    //     playingMotion.Speed = 1.0;\r\n    //     playingMotion.StartTime = game.totalTime;\r\n    //     playingMotion.FadeInStartTime = game.totalTime;\r\n    //     if (playingMotion.Motion != null) {\r\n    //       playingMotion.EndTime =\r\n    //         playingMotion.Motion.MotionLength <= 0\r\n    //           ? -1\r\n    //           : playingMotion.StartTime + playingMotion.Motion.MotionLength;\r\n    //     }\r\n    //     playingMotion.IsLooping = animatorClipInfo[i].clip.isLooping;\r\n    //     playingMotion.Weight = 0.0;\r\n    //     this._playingMotions.push(playingMotion);\r\n    //   }\r\n    // }[TODO]\r\n  }\r\n  public onMotionStateExit(\r\n    animator: animation.AnimationController,\r\n    stateInfo: animation.MotionStateStatus // public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\r\n  ) {\r\n    super.onMotionStateExit(animator, stateInfo);\r\n    this._isStateTransitionFinished = true;\r\n  }\r\n}\r\n"]}