{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Utils.ts"],"names":["isNullOrEmpty","value","length","isImporter","Reflect","has","window","game","geometry","math","utils","fromVec3Array","source","result","Array","i","x","y","z","isEquals","equalityCompareFunc","a","b","every","e","_a","ArrayExtensions","calculateBounds","positions","readMesh","min","max","o","Vec3","lerp","AABB","MeshExtensions","isPowerOfTwo","nextPow2","nextPowerOfTwo","closestPowerOfTwo","next","half","prevDiff","nextDiff","smoothDamp","current","target","currentVelocity","smoothTime","maxSpeed","deltaTime","Number","POSITIVE_INFINITY","Math","omega","exp","change","originalTo","maxChange","clamp","temp","output","Float","add","Vec2","subtract","multiplySingle","divideSingle","clone","change_x","change_y","maxChangeSq","sqDist","mag","sqrt","temp_x","temp_y","output_x","output_y","origMinusCurrent_x","origMinusCurrent_y","outMinusOrig_x","outMinusOrig_y","output_z","change_z","sqrmag","temp_z","origMinusCurrent_z","outMinusOrig_z","MathExtensions","getComponentPath","self","uuid","comps","__comps__","applyComponentProperty","nodeUuid","compUuid","property","type","tree","Editor","Message","request","path","EditorUtils","console","info","dump"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { game, geometry, math, Mesh, Node, utils } from 'cc';\r\n\r\nexport function isNullOrEmpty(value: string | null) {\r\n  return value == null || value.length <= 0;\r\n}\r\n\r\nexport namespace ArrayExtensions {\r\n  export function fromVec3Array(source: ArrayLike<math.IVec3Like>) {\r\n    const result = new Array<number>(source.length * 3);\r\n    for (let i = 0; i < source.length; i++) {\r\n      result[i * 3 + 0] = source[i].x;\r\n      result[i * 3 + 1] = source[i].y;\r\n      result[i * 3 + 2] = source[i].z;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  export function isEquals<T>(\r\n    equalityCompareFunc: (x: T, y: T) => boolean,\r\n    a: T[],\r\n    b: T[]\r\n  ): boolean {\r\n    if (a.length != b.length) {\r\n      return false;\r\n    }\r\n    return a.every((e, i, _a) => equalityCompareFunc(e, b[i]));\r\n  }\r\n}\r\n\r\nexport namespace MeshExtensions {\r\n  export function calculateBounds(value: Mesh) {\r\n    const positions = utils.readMesh(value).positions;\r\n    const min = {\r\n      x: positions[0],\r\n      y: positions[1],\r\n      z: positions[2],\r\n    };\r\n    const max = {\r\n      x: min.x,\r\n      y: min.y,\r\n      z: min.z,\r\n    };\r\n    for (let i = 1; i < positions.length / 3; i++) {\r\n      const x = positions[i * 3 + 0];\r\n      const y = positions[i * 3 + 1];\r\n      const z = positions[i * 3 + 2];\r\n\r\n      min.x = x < min.x ? x : min.x;\r\n      min.y = y < min.y ? y : min.y;\r\n      min.z = z < min.z ? z : min.z;\r\n      max.x = x > max.x ? x : max.x;\r\n      max.y = y > max.y ? y : max.y;\r\n      max.z = z > max.z ? z : max.z;\r\n    }\r\n    const o = { x: 0, y: 0, z: 0 };\r\n    math.Vec3.lerp(o, min, max, 0.5);\r\n    return new geometry.AABB(o.x, o.y, o.z, max.x - min.x, max.y - min.y, max.z - min.z);\r\n  }\r\n}\r\n\r\nexport namespace MathExtensions {\r\n  export function isPowerOfTwo(value: number) {\r\n    return math.nextPow2(value) == value;\r\n  }\r\n  export function nextPowerOfTwo(value: number) {\r\n    return math.nextPow2(value);\r\n  }\r\n  export function closestPowerOfTwo(value: number) {\r\n    const next = math.nextPow2(value);\r\n    const half = next / 2;\r\n    const prevDiff = value - half;\r\n    const nextDiff = next - value;\r\n    if (prevDiff <= nextDiff) {\r\n      return half;\r\n    }\r\n    return next;\r\n  }\r\n\r\n  export namespace Float {\r\n    // https://github.com/Unity-Technologies/UnityCsReference/blob/0a2eeb7a72710d89cccdb6aeee8431d27ee99cd1/Runtime/Export/Math/Mathf.cs#L307\r\n    /**\r\n     *\r\n     * @param current\r\n     * @param target\r\n     * @param currentVelocity\r\n     * @param smoothTime\r\n     * @param maxSpeed\r\n     * @param deltaTime\r\n     * @returns result and currentVelocity\r\n     */\r\n    export function smoothDamp(\r\n      current: number,\r\n      target: number,\r\n      currentVelocity: number,\r\n      smoothTime: number,\r\n      maxSpeed?: number,\r\n      deltaTime?: number\r\n    ): [number, number] {\r\n      maxSpeed ??= Number.POSITIVE_INFINITY;\r\n      deltaTime ??= game.deltaTime;\r\n\r\n      // Based on Game Programming Gems 4 Chapter 1.10\r\n      smoothTime = Math.max(0.0001, smoothTime);\r\n      const omega = 2 / smoothTime;\r\n\r\n      const x = omega * deltaTime;\r\n      const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\r\n      let change = current - target;\r\n      const originalTo = target;\r\n\r\n      // Clamp maximum speed\r\n      const maxChange = maxSpeed * smoothTime;\r\n      change = math.clamp(change, -maxChange, maxChange);\r\n      target = current - change;\r\n\r\n      const temp = (currentVelocity + omega * change) * deltaTime;\r\n      currentVelocity = (currentVelocity - omega * temp) * exp;\r\n      let output = target + (change + temp) * exp;\r\n\r\n      // Prevent overshooting\r\n      if (originalTo - current > 0.0 == output > originalTo) {\r\n        output = originalTo;\r\n        currentVelocity = (output - originalTo) / deltaTime;\r\n      }\r\n      return [output, currentVelocity];\r\n    }\r\n  }\r\n\r\n  export namespace Vec2 {\r\n    export function add(a: math.Vec2, b: math.Vec2): math.Vec2 {\r\n      return new math.Vec2(a.x + b.x, a.y + b.y);\r\n    }\r\n    export function subtract(a: math.Vec2, b: math.Vec2): math.Vec2 {\r\n      return new math.Vec2(a.x - b.x, a.y - b.y);\r\n    }\r\n    export function multiplySingle(a: math.Vec2, b: number): math.Vec2 {\r\n      return new math.Vec2(a.x * b, a.y * b);\r\n    }\r\n    export function divideSingle(a: math.Vec2, b: number): math.Vec2 {\r\n      return new math.Vec2(a.x / b, a.y / b);\r\n    }\r\n\r\n    // https://github.com/Unity-Technologies/UnityCsReference/blob/0a2eeb7a72710d89cccdb6aeee8431d27ee99cd1/Runtime/Export/Math/Vector2.cs#L289\r\n    /**\r\n     *\r\n     * @param current\r\n     * @param target\r\n     * @param currentVelocity\r\n     * @param smoothTime\r\n     * @param maxSpeed\r\n     * @param deltaTime\r\n     * @returns result and currentVelocity\r\n     */\r\n    export function smoothDamp(\r\n      current: math.Vec2,\r\n      target: math.Vec2,\r\n      currentVelocity: math.Vec2,\r\n      smoothTime: number,\r\n      maxSpeed: number = Number.POSITIVE_INFINITY,\r\n      deltaTime: number = game.deltaTime\r\n    ): [math.Vec2, math.Vec2] {\r\n      currentVelocity = currentVelocity.clone();\r\n\r\n      smoothTime = Math.max(0.0001, smoothTime);\r\n      const omega = 2.0 / smoothTime;\r\n\r\n      const x = omega * deltaTime;\r\n      const exp = 1.0 / (1.0 + x + 0.48 * x * x + 0.235 * x * x * x);\r\n\r\n      let change_x = current.x - target.x;\r\n      let change_y = current.y - target.y;\r\n      const originalTo = target.clone();\r\n\r\n      // Clamp maximum speed\r\n      const maxChange = maxSpeed * smoothTime;\r\n\r\n      const maxChangeSq = maxChange * maxChange;\r\n      const sqDist = change_x * change_x + change_y * change_y;\r\n      if (sqDist > maxChangeSq) {\r\n        const mag = Math.sqrt(sqDist);\r\n        change_x = (change_x / mag) * maxChange;\r\n        change_y = (change_y / mag) * maxChange;\r\n      }\r\n\r\n      target.x = current.x - change_x;\r\n      target.y = current.y - change_y;\r\n\r\n      const temp_x = (currentVelocity.x + omega * change_x) * deltaTime;\r\n      const temp_y = (currentVelocity.y + omega * change_y) * deltaTime;\r\n\r\n      currentVelocity.x = (currentVelocity.x - omega * temp_x) * exp;\r\n      currentVelocity.y = (currentVelocity.y - omega * temp_y) * exp;\r\n\r\n      let output_x = target.x + (change_x + temp_x) * exp;\r\n      let output_y = target.y + (change_y + temp_y) * exp;\r\n\r\n      // Prevent overshooting\r\n      const origMinusCurrent_x = originalTo.x - current.x;\r\n      const origMinusCurrent_y = originalTo.y - current.y;\r\n      const outMinusOrig_x = output_x - originalTo.x;\r\n      const outMinusOrig_y = output_y - originalTo.y;\r\n\r\n      if (origMinusCurrent_x * outMinusOrig_x + origMinusCurrent_y * outMinusOrig_y > 0) {\r\n        output_x = originalTo.x;\r\n        output_y = originalTo.y;\r\n\r\n        currentVelocity.x = (output_x - originalTo.x) / deltaTime;\r\n        currentVelocity.y = (output_y - originalTo.y) / deltaTime;\r\n      }\r\n      return [new math.Vec2(output_x, output_y), currentVelocity];\r\n    }\r\n  }\r\n\r\n  export namespace Vec3 {\r\n    export function subtract(a: math.Vec3, b: math.Vec3): math.Vec3 {\r\n      return new math.Vec3(a.x - b.x, a.y - b.y, a.z - b.z);\r\n    }\r\n\r\n    // https://github.com/Unity-Technologies/UnityCsReference/blob/0a2eeb7a72710d89cccdb6aeee8431d27ee99cd1/Runtime/Export/Math/Vector3.cs#L97\r\n    export function smoothDamp(\r\n      current: math.Vec3,\r\n      target: math.Vec3,\r\n      currentVelocity: math.Vec3,\r\n      smoothTime: number,\r\n      maxSpeed: number = Number.POSITIVE_INFINITY,\r\n      deltaTime: number = game.deltaTime\r\n    ): [math.Vec3, math.Vec3] {\r\n      currentVelocity = currentVelocity.clone();\r\n      let output_x = 0;\r\n      let output_y = 0;\r\n      let output_z = 0;\r\n\r\n      smoothTime = Math.max(0.0001, smoothTime);\r\n      const omega = 2.0 / smoothTime;\r\n\r\n      const x = omega * deltaTime;\r\n      const exp = 1.0 / (1.0 + x + 0.48 * x * x + 0.235 * x * x * x);\r\n\r\n      let change_x = current.x - target.x;\r\n      let change_y = current.y - target.y;\r\n      let change_z = current.z - target.z;\r\n      let originalTo = target.clone();\r\n\r\n      // Clamp maximum speed\r\n      const maxChange = maxSpeed * smoothTime;\r\n\r\n      const maxChangeSq = maxChange * maxChange;\r\n      const sqrmag = change_x * change_x + change_y * change_y + change_z * change_z;\r\n      if (sqrmag > maxChangeSq) {\r\n        var mag = Math.sqrt(sqrmag);\r\n        change_x = (change_x / mag) * maxChange;\r\n        change_y = (change_y / mag) * maxChange;\r\n        change_z = (change_z / mag) * maxChange;\r\n      }\r\n\r\n      target.x = current.x - change_x;\r\n      target.y = current.y - change_y;\r\n      target.z = current.z - change_z;\r\n\r\n      const temp_x = (currentVelocity.x + omega * change_x) * deltaTime;\r\n      const temp_y = (currentVelocity.y + omega * change_y) * deltaTime;\r\n      const temp_z = (currentVelocity.z + omega * change_z) * deltaTime;\r\n\r\n      currentVelocity.x = (currentVelocity.x - omega * temp_x) * exp;\r\n      currentVelocity.y = (currentVelocity.y - omega * temp_y) * exp;\r\n      currentVelocity.z = (currentVelocity.z - omega * temp_z) * exp;\r\n\r\n      output_x = target.x + (change_x + temp_x) * exp;\r\n      output_y = target.y + (change_y + temp_y) * exp;\r\n      output_z = target.z + (change_z + temp_z) * exp;\r\n\r\n      // Prevent overshooting\r\n      let origMinusCurrent_x = originalTo.x - current.x;\r\n      let origMinusCurrent_y = originalTo.y - current.y;\r\n      let origMinusCurrent_z = originalTo.z - current.z;\r\n      let outMinusOrig_x = output_x - originalTo.x;\r\n      let outMinusOrig_y = output_y - originalTo.y;\r\n      let outMinusOrig_z = output_z - originalTo.z;\r\n\r\n      if (\r\n        origMinusCurrent_x * outMinusOrig_x +\r\n          origMinusCurrent_y * outMinusOrig_y +\r\n          origMinusCurrent_z * outMinusOrig_z >\r\n        0\r\n      ) {\r\n        output_x = originalTo.x;\r\n        output_y = originalTo.y;\r\n        output_z = originalTo.z;\r\n\r\n        currentVelocity.x = (output_x - originalTo.x) / deltaTime;\r\n        currentVelocity.y = (output_y - originalTo.y) / deltaTime;\r\n        currentVelocity.z = (output_z - originalTo.z) / deltaTime;\r\n      }\r\n\r\n      return [new math.Vec3(output_x, output_y, output_z), currentVelocity];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Importerプロセスで実行されているかを返します。\r\n * 注: global 変数 (window) に AssetDB プロパティ があるかどうかで判定しています。\r\n * この判定を行うためのAPIが CocosCreator v3.6.2 では現状存在しないための方法となっています。\r\n *\r\n * @returns Importerプロセスであるならtrue, そうでないならfalseを返します。\r\n */\r\nexport function isImporter() {\r\n  return Reflect.has(window, 'AssetDB');\r\n}\r\n\r\nexport namespace EditorUtils {\r\n  //import type IQueryNodeResult from './Dump/Query/IQueryNodeResult';\r\n  export type IQueryNodeResult = any;\r\n  export function getComponentPath(self: IQueryNodeResult, uuid: string): string | null {\r\n    const comps = self.__comps__;\r\n    for (let i = 0; i < comps.length; i++) {\r\n      if (comps[i].value.uuid.value == uuid) {\r\n        return '__comps__.' + i;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  export async function applyComponentProperty(\r\n    nodeUuid: string,\r\n    compUuid: string,\r\n    property: string,\r\n    value: number,\r\n    type: 'Integer' | 'Float' | 'Enum'\r\n  ): Promise<void> {\r\n    const tree = await Editor.Message.request('scene', 'query-node', nodeUuid);\r\n    const path = EditorUtils.getComponentPath(tree, compUuid);\r\n    if (path == null) {\r\n      return;\r\n    }\r\n    console.info(`set-property: ${path}.${property}`);\r\n    await Editor.Message.request('scene', 'set-property', {\r\n      uuid: nodeUuid,\r\n      path: `${path}.${property}`,\r\n      dump: { value: value, type: type },\r\n    });\r\n  }\r\n}\r\n"]}