{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismPose3Json.ts"],"names":["CubismPose3Json","JsonParseUtils","asArray","asNumber","asString","constructor","type","fadeInTime","groups","loadFrom","pose3Json","json","parse","loadFromJson","loadFromJsonAsset","pose3JsonAsset","Type","parseGroups","Groups","undefined","FadeInTime","ret","src","obj","Array","length","i","group","arrayedInstantiateFromJson","SerializablePoseGroup","instantiateFromJson","args","id","link","copyWith","equals","other","strictEquals","Id","Link"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { JsonAsset, _decorator } from 'cc';\r\nimport type IStructLike from '../../IStructLike';\r\nimport JsonParseUtils from './JsonParseUtils';\r\nconst { asArray, asNumber, asString } = JsonParseUtils;\r\n\r\n/**\r\n * Handles pose from pose3.json.\r\n *\r\n * **Sealed class.**\r\n */\r\nclass CubismPose3Json {\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Loads a pose3.json.\r\n   * @param pose3Json pose3.json to deserialize.\r\n   * @returns Deserialized pose3.json on success; null otherwise.\r\n   */\r\n  public static loadFrom(pose3Json: string): CubismPose3Json | null {\r\n    const json = JsonParseUtils.parse(pose3Json);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n    return CubismPose3Json.loadFromJson(json);\r\n  }\r\n\r\n  /**\r\n   * Loads a pose3.json asset.\r\n   * @param pose3JsonAsset pose3.json asset to deserialize.\r\n   * @returns Deserialized pose3.json asset on success; null otherwise.\r\n   */\r\n  public static loadFromJsonAsset(pose3JsonAsset: JsonAsset): CubismPose3Json | null {\r\n    return pose3JsonAsset.json == null ? null : CubismPose3Json.loadFromJson(pose3JsonAsset.json);\r\n  }\r\n\r\n  public static loadFromJson(json: any): CubismPose3Json | null {\r\n    if (json == null) {\r\n      return null;\r\n    }\r\n    const type = asString(json.Type);\r\n    const groups = CubismPose3Json.parseGroups(json.Groups);\r\n    if (type === undefined || groups == undefined) {\r\n      return null;\r\n    }\r\n    const fadeInTime = asNumber(json.FadeInTime) ?? 0.5;\r\n\r\n    let ret = new CubismPose3Json();\r\n    ret.type = type;\r\n    ret.groups = groups;\r\n    ret.fadeInTime = fadeInTime;\r\n    return ret;\r\n  }\r\n\r\n  private static parseGroups(src: any): CubismPose3Json.SerializablePoseGroup[][] | undefined {\r\n    const obj = asArray(src);\r\n    if (obj == null) {\r\n      return undefined;\r\n    }\r\n    let groups = Array<CubismPose3Json.SerializablePoseGroup[]>(obj.length);\r\n    for (let i = 0; i < groups.length; i++) {\r\n      const group = JsonParseUtils.arrayedInstantiateFromJson(\r\n        obj[i],\r\n        CubismPose3Json.SerializablePoseGroup.instantiateFromJson\r\n      );\r\n      if (group == null) {\r\n        return undefined;\r\n      }\r\n      groups[i] = group;\r\n    }\r\n    return groups;\r\n  }\r\n  //#region Json Data\r\n\r\n  /** The type of cubism pose. */\r\n  public type: string = '';\r\n\r\n  /** [Optional] Time of the Fade-in for easing in seconds.. */\r\n  public fadeInTime: number = 0;\r\n\r\n  /** Array of Groups. */\r\n  public groups: CubismPose3Json.SerializablePoseGroup[][] | null = null;\r\n\r\n  //#endregion\r\n}\r\n\r\n//#region Json Helpers\r\nnamespace CubismPose3Json {\r\n  /** (struct) */\r\n  export class SerializablePoseGroup implements IStructLike<SerializablePoseGroup> {\r\n    /** The part id of group. */\r\n    public id: string = '';\r\n\r\n    /** The link part ids. */\r\n    public link: string[] = new Array(0);\r\n\r\n    public constructor(args: { id?: string; link?: string[] } = {}) {\r\n      this.id = args.id ?? '';\r\n      this.link = args.link ?? new Array(0);\r\n    }\r\n\r\n    public copyWith(args: { id?: string; link?: string[] } = {}): SerializablePoseGroup {\r\n      return new SerializablePoseGroup({ id: args.id ?? this.id, link: args.link ?? this.link });\r\n    }\r\n\r\n    public equals(other: SerializablePoseGroup): boolean {\r\n      return this === other ? true : this.id == other.id && this.link == other.link;\r\n    }\r\n\r\n    public strictEquals(other: SerializablePoseGroup): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public static instantiateFromJson(json: any): SerializablePoseGroup | undefined {\r\n      const id = asString(json.Id);\r\n      if (id === undefined) {\r\n        return undefined;\r\n      }\r\n      const link = JsonParseUtils.arrayedInstantiateFromJson(json.Link, asString);\r\n      return new SerializablePoseGroup({ id: id, link: link });\r\n    }\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\nexport default CubismPose3Json;\r\n"]}