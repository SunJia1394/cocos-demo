{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskMaskedJunction.ts"],"names":["CubismMaskMaskedJunction","math","CubismMaskProperties","CubismMaskRendererExtensionMethods","CubismMaskTile","CubismMaskTransform","sharedMaskProperties","_sharedMaskProperties","value","masks","_masks","maskeds","_maskeds","maskTexture","_maskTexture","maskTile","_maskTile","maskTransform","_maskTransform","constructor","Array","setMasks","setMaskeds","setMaskTexture","setMaskTile","addToCommandBuffer","buffer","recalculateMaskTransform","console","error","i","length","setMaskTransform","update","assert","maskProperties","texture","tile","transform","onMaskPropertiesDidChange","bounds","getBounds","extents","scale","x","y","center","offset","Vec2"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { math } from 'cc';\r\nimport CubismMaskProperties from './CubismMaskProperties';\r\nimport CubismMaskRendererExtensionMethods from './CubismMaskRendererExtensionMethods';\r\nimport CubismMaskTile from './CubismMaskTile';\r\nimport CubismMaskTransform from './CubismMaskTransform';\r\nimport type CubismMaskTexture from './CubismMaskTexture';\r\nimport type CubismRenderer from '../CubismRenderer';\r\nimport type CubismMaskRenderer from './CubismMaskRenderer';\r\nimport type CubismMaskCommandBuffer from './CubismMaskCommandBuffer';\r\n\r\nexport default class CubismMaskMaskedJunction {\r\n  private static _sharedMaskProperties: CubismMaskProperties;\r\n\r\n  /** Shared buffer for CubismMaskPropertiess. */\r\n  private static get sharedMaskProperties() {\r\n    return this._sharedMaskProperties;\r\n  }\r\n  private static set sharedMaskProperties(value) {\r\n    this._sharedMaskProperties = value;\r\n  }\r\n\r\n  private _masks: CubismMaskRenderer[] = new Array<CubismMaskRenderer>(0);\r\n\r\n  /** Masks. */\r\n  private get masks() {\r\n    return this._masks;\r\n  }\r\n  private set masks(value) {\r\n    this._masks = value;\r\n  }\r\n\r\n  private _maskeds: CubismRenderer[] = new Array<CubismRenderer>(0);\r\n\r\n  /** Masked drawables. */\r\n  private get maskeds() {\r\n    return this._maskeds;\r\n  }\r\n  private set maskeds(value) {\r\n    this._maskeds = value;\r\n  }\r\n\r\n  private _maskTexture: CubismMaskTexture | null = null;\r\n\r\n  /** Mask texture to be referenced by Maskeds. */\r\n  private get maskTexture() {\r\n    return this._maskTexture;\r\n  }\r\n  private set maskTexture(value) {\r\n    this._maskTexture = value;\r\n  }\r\n\r\n  private _maskTile: CubismMaskTile = new CubismMaskTile();\r\n\r\n  /** Mask tile to write to and read from. */\r\n  private get maskTile() {\r\n    return this._maskTile;\r\n  }\r\n  private set maskTile(value) {\r\n    this._maskTile = value;\r\n  }\r\n\r\n  private _maskTransform: CubismMaskTransform | null = null;\r\n\r\n  /** Mask transform */\r\n  private get maskTransform() {\r\n    return this._maskTransform;\r\n  }\r\n  private set maskTransform(value) {\r\n    this._maskTransform = value;\r\n  }\r\n\r\n  //#region Ctors\r\n\r\n  /** Makes sure statics are initialized. */\r\n  public constructor() {\r\n    if (CubismMaskMaskedJunction.sharedMaskProperties != null) {\r\n      return;\r\n    }\r\n    CubismMaskMaskedJunction.sharedMaskProperties = new CubismMaskProperties();\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Interface For CubismMaskController\r\n\r\n  /**\r\n   * Sets the masks.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMasks(value: Array<CubismMaskRenderer>): CubismMaskMaskedJunction {\r\n    this.masks = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the masked drawables.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMaskeds(value: Array<CubismRenderer>): CubismMaskMaskedJunction {\r\n    this.maskeds = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the mask texture to read from.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMaskTexture(value: CubismMaskTexture): CubismMaskMaskedJunction {\r\n    this.maskTexture = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the mask tile to write to and read from.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMaskTile(value: CubismMaskTile): CubismMaskMaskedJunction {\r\n    this.maskTile = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Appends junction draw commands to a buffer.\r\n   * @param buffer Buffer to append commands to.\r\n   */\r\n  public addToCommandBuffer(buffer: CubismMaskCommandBuffer): void {\r\n    // console.info('CubismMaskMaskedJunction.addToCommandBuffer()');\r\n    // Make sure mask transform is initialized.\r\n    this.recalculateMaskTransform();\r\n    // Initialize and enqueue masks.\r\n    const maskTile = this.maskTile;\r\n    const maskTransform = this.maskTransform;\r\n    if (maskTile == null) {\r\n      console.error('CubismMaskMaskedJunction.addToCommandBuffer(): maskTile is null.');\r\n      return;\r\n    }\r\n    if (maskTransform == null) {\r\n      console.error('CubismMaskMaskedJunction.addToCommandBuffer(): maskTransform is null.');\r\n      return;\r\n    }\r\n    for (let i = 0; i < this.masks.length; i++) {\r\n      this.masks[i]\r\n        .setMaskTile(maskTile)\r\n        .setMaskTransform(maskTransform)\r\n        .addToCommandBuffer(buffer);\r\n    }\r\n  }\r\n\r\n  /** Updates the junction and all related data. */\r\n  public update(): void {\r\n    // Update mask transform.\r\n    this.recalculateMaskTransform();\r\n    // Apply transform to masks.\r\n    console.assert(this.maskTransform);\r\n    if (this.maskTransform == null) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < this.masks.length; i++) {\r\n      this.masks[i].setMaskTransform(this.maskTransform);\r\n    }\r\n    // Apply transform and other properties to maskeds.\r\n    const maskProperties = CubismMaskMaskedJunction.sharedMaskProperties;\r\n    maskProperties.texture = this.maskTexture;\r\n    maskProperties.tile = this.maskTile;\r\n    maskProperties.transform = this.maskTransform;\r\n\r\n    for (var i = 0; i < this.maskeds.length; i++) {\r\n      this.maskeds[i].onMaskPropertiesDidChange(maskProperties);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  /** Updates MaskTransform and Maskeds. */\r\n  private recalculateMaskTransform(): void {\r\n    // Compute bounds and scale.\r\n    const bounds = CubismMaskRendererExtensionMethods.getBounds(this.masks);\r\n    const extents = bounds.extents();\r\n    const scale = extents.x > extents.y ? extents.x * 2 : extents.y * 2;\r\n    // Compute mask transform.\r\n    const center = bounds.center();\r\n    this.maskTransform = new CubismMaskTransform({\r\n      offset: new math.Vec2(center.x, center.y),\r\n      scale: 1 / scale,\r\n    });\r\n  }\r\n}\r\n"]}