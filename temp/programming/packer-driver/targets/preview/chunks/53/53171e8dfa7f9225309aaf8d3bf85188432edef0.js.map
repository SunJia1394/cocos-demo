{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismDynamicDrawableData.ts"],"names":["CubismDynamicDrawableData","math","Utils","constructor","vertexPositions","_flags","_opacity","_drawOrder","_renderOrder","_vertexPositions","Array","_multiplyColor","Color","WHITE","_screenColor","BLACK","createData","unmanagedModel","unmanagedDrawables","drawables","buffer","count","vertexCounts","i","length","arr","j","Vec3","ZERO","clone","flags","value","opacity","drawOrder","renderOrder","multiplyColor","screenColor","isVisible","hasIsVisibleBit","isVisibilityDirty","hasVisibilityDidChangeBit","isOpacityDirty","hasOpacityDidChangeBit","isDrawOrderDirty","hasDrawOrderDidChangeBit","isRenderOrderDirty","hasRenderOrderDidChangeBit","areVertexPositionsDirty","hasVertexPositionsDidChangeBit","isBlendColorDirty","hasBlendColorDidChangeBit","isAnyDirty"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { math } from 'cc';\r\nimport { Utils } from '../CubismCore';\r\nimport type { Model } from '../CubismCore';\r\nimport type CubismDrawable from './CubismDrawable';\r\n\r\n/**\r\n * Dynamic {@link CubismDrawable} data.\r\n *\r\n * **Sealed class.**\r\n */\r\nexport default class CubismDynamicDrawableData {\r\n  private constructor(vertexPositions: Readonly<math.Vec3>[]) {\r\n    this.vertexPositions = vertexPositions;\r\n  }\r\n\r\n  // #region Factory Methods\r\n\r\n  /**\r\n   * Creates buffer for dynamic {@link CubismDrawable} data.\r\n   * @param unmanagedModel Unmanaged model to create buffer for.\r\n   * @returns Buffer.\r\n   */\r\n  public static createData(unmanagedModel: Model): Array<CubismDynamicDrawableData> {\r\n    const unmanagedDrawables = unmanagedModel.drawables;\r\n    const buffer = new Array<CubismDynamicDrawableData>(unmanagedDrawables.count);\r\n\r\n    // Initialize buffers.\r\n    const vertexCounts = unmanagedDrawables.vertexCounts;\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      const arr = new Array<Readonly<math.Vec3>>(vertexCounts[i]);\r\n      for (let j = 0; j < arr.length; j++) {\r\n        arr[j] = math.Vec3.ZERO.clone();\r\n      }\r\n      buffer[i] = new CubismDynamicDrawableData(arr);\r\n    }\r\n    return buffer;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  private _flags: number = 0;\r\n  /** Dirty flags. */\r\n  public get flags(): number {\r\n    return this._flags;\r\n  }\r\n  public set flags(value: number) {\r\n    this._flags = value;\r\n  }\r\n\r\n  private _opacity: number = 0;\r\n  /** Current opacity. */\r\n  public get opacity(): number {\r\n    return this._opacity;\r\n  }\r\n  public set opacity(value: number) {\r\n    this._opacity = value;\r\n  }\r\n\r\n  private _drawOrder: number = 0;\r\n  /** Current draw order. */\r\n  public get drawOrder(): number {\r\n    return this._drawOrder;\r\n  }\r\n  public set drawOrder(value: number) {\r\n    this._drawOrder = value;\r\n  }\r\n\r\n  private _renderOrder: number = 0;\r\n  /** Current render order. */\r\n  public get renderOrder(): number {\r\n    return this._renderOrder;\r\n  }\r\n  public set renderOrder(value: number) {\r\n    this._renderOrder = value;\r\n  }\r\n\r\n  private _vertexPositions: Array<Readonly<math.Vec3>> = new Array(0);\r\n  /** Current vertex position. */\r\n  public get vertexPositions(): Array<Readonly<math.Vec3>> {\r\n    return this._vertexPositions;\r\n  }\r\n  public set vertexPositions(value: Array<Readonly<math.Vec3>>) {\r\n    this._vertexPositions = value;\r\n  }\r\n\r\n  private _multiplyColor: Readonly<math.Color> = math.Color.WHITE;\r\n  /** Current multiply color. */\r\n  public get multiplyColor(): Readonly<math.Color> {\r\n    return this._multiplyColor;\r\n  }\r\n  public set multiplyColor(value: Readonly<math.Color>) {\r\n    this._multiplyColor = value;\r\n  }\r\n\r\n  private _screenColor: Readonly<math.Color> = math.Color.BLACK;\r\n  /** Current screen color. */\r\n  public get screenColor(): Readonly<math.Color> {\r\n    return this._screenColor;\r\n  }\r\n  public set screenColor(value: Readonly<math.Color>) {\r\n    this._screenColor = value;\r\n  }\r\n\r\n  /** True if currently visible. */\r\n  public get isVisible(): boolean {\r\n    return Utils.hasIsVisibleBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link isVisible} did change. */\r\n  public get isVisibilityDirty(): boolean {\r\n    return Utils.hasVisibilityDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link opacity} did change. */\r\n  public get isOpacityDirty(): boolean {\r\n    return Utils.hasOpacityDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link drawOrder} did change. */\r\n  public get isDrawOrderDirty(): boolean {\r\n    return Utils.hasDrawOrderDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link renderOrder} did change. */\r\n  public get isRenderOrderDirty(): boolean {\r\n    return Utils.hasRenderOrderDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link vertexPositions} did change. */\r\n  public get areVertexPositionsDirty(): boolean {\r\n    return Utils.hasVertexPositionsDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if {@link multiplyColor} and {@link screenColor} did change. */\r\n  public get isBlendColorDirty(): boolean {\r\n    return Utils.hasBlendColorDidChangeBit(this.flags);\r\n  }\r\n\r\n  /** True if any data did change. */\r\n  public get isAnyDirty(): boolean {\r\n    return this.flags != 0;\r\n  }\r\n}\r\n"]}