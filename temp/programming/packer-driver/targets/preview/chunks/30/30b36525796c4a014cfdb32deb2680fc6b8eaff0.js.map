{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismModel.ts"],"names":["ModelUpdateFunctions","DynamicDrawableDataEvent","_decorator","Component","Node","director","game","Director","CubismDrawable","CubismParameter","CubismPart","ArrayExtensionMethods","CubismCanvasInformation","CubismParameterStore","CubismTaskableModel","CubismMoc","EDITOR","ccclass","property","executeInEditMode","functions","Array","add","func","push","remove","filter","value","invoke","i","length","CubismModel","type","serializable","visible","_onDynamicDrawableData","_taskableModel","_parameterStore","wasAttachedModelUpdateFunction","_wasJustEnabled","_lastTick","bindedOnModelUpdateFunc","onModelUpdate","bind","onDynamicDrawableData","instantiateFrom","moc","node","modelComp","addComponent","reset","resetMocReference","model","_moc","taskableModel","parameters","_parameters","revive","parts","_parts","drawables","_drawables","canvasInformation","_canvasInformation","isRevived","canRevive","modelUpdateFunctions","_modelUpdateFunctions","wasJustEnabled","lastTick","console","error","createTaskableModel","getComponentsInChildren","reviveParameters","unmanagedModel","reviveParts","forEach","e","Reflect","set","reviveDrawables","instantiate","getComponent","name","assert","createParameters","createParts","createDrawables","addChild","forceUpdateNow","onModelsUpdate","registerCallbackFunction","off","EVENT_AFTER_DRAW","on","update","deltaTime","didExecute","tryReadParameters","restoreParameters","dynamicDrawableData","frameCount","getTotalFrames","warn","tryWriteParametersAndParts","updateNow","onEnable","onDisable","onDestroy","onValidate","sender","data"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component, Node, director, game, Director } from 'cc';\r\nimport CubismDrawable from './CubismDrawable';\r\nimport CubismParameter from './CubismParameter';\r\nimport CubismPart from './CubismPart';\r\nimport ArrayExtensionMethods from './ArrayExtensionMethods';\r\nimport CubismCanvasInformation from './CubismCanvasInformation';\r\nimport CubismParameterStore from '../Framework/CubismParameterStore';\r\nimport CubismTaskableModel from './CubismTaskableModel';\r\nimport CubismMoc from './CubismMoc';\r\nimport type CubismDynamicDrawableData from './CubismDynamicDrawableData';\r\nimport { EDITOR } from 'cc/env';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\ntype Action = () => void;\r\n\r\ninterface IModelUpdateFunctions {\r\n  add(func: Action): void;\r\n  remove(func: Action): void;\r\n}\r\n\r\ninterface IDynamicDrawableDataEvent {\r\n  add(func: DynamicDrawableDataHandler): void;\r\n  remove(func: DynamicDrawableDataHandler): void;\r\n}\r\n\r\nclass ModelUpdateFunctions implements IModelUpdateFunctions {\r\n  private functions = Array<Action>(0);\r\n\r\n  public add(func: Action): void {\r\n    this.functions.push(func);\r\n  }\r\n\r\n  public remove(func: Action): void {\r\n    this.functions = this.functions.filter((value) => value != func);\r\n  }\r\n\r\n  public invoke(): void {\r\n    for (let i = 0; i < this.functions.length; i++) {\r\n      this.functions[i]();\r\n    }\r\n  }\r\n}\r\n\r\n// TODO: CubismDontMoveOnReimport\r\n/**\r\n * Runtime Cubism model.\r\n *\r\n * **Sealed class.**\r\n */\r\n@ccclass('CubismModel')\r\n@executeInEditMode\r\nexport default class CubismModel extends Component {\r\n  // #region Events\r\n\r\n  protected _onDynamicDrawableData: DynamicDrawableDataEvent = new DynamicDrawableDataEvent();\r\n\r\n  /** Event triggered if new CubismDynamicDrawableData is available for instance. */\r\n  public get onDynamicDrawableData(): IDynamicDrawableDataEvent {\r\n    return this._onDynamicDrawableData;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Factory Methods\r\n\r\n  /**\r\n   * Instantiates a CubismMoc.\r\n   * @param moc3 Cubism moc to instantiate.\r\n   * @returns Instance.\r\n   */\r\n  public static instantiateFrom(moc: CubismMoc): CubismModel | null {\r\n    // Create model.\r\n    const node = new Node('Model');\r\n    const modelComp = node.addComponent(CubismModel);\r\n\r\n    // Initialize it by resetting it.\r\n    modelComp.reset(moc);\r\n    return modelComp;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * Resets a CubismMoc reference in CubismModel.\r\n   * @param model Target Cubism model.\r\n   * @param moc Cubism moc to reset.\r\n   */\r\n  public resetMocReference(model: CubismModel, moc: CubismMoc): void {\r\n    model.moc = moc;\r\n  }\r\n\r\n  /** Moc backing field. */\r\n  @property({ type: CubismMoc, serializable: true, visible: true })\r\n  private _moc: CubismMoc | null = null;\r\n\r\n  /** Moc the instance was instantiated from. */\r\n  public get moc(): CubismMoc | null {\r\n    return this._moc;\r\n  }\r\n  private set moc(value: CubismMoc | null) {\r\n    this._moc = value;\r\n  }\r\n\r\n  private _taskableModel: CubismTaskableModel | null = null;\r\n  private get taskableModel(): CubismTaskableModel | null {\r\n    return this._taskableModel;\r\n  }\r\n  private set taskableModel(value: CubismTaskableModel | null) {\r\n    this._taskableModel = value;\r\n  }\r\n\r\n  /** Parameters backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _parameters: Array<CubismParameter> | null = null;\r\n\r\n  /** Drawables of model. */\r\n  public get parameters(): Array<CubismParameter> | null {\r\n    if (this._parameters == null) {\r\n      this.revive();\r\n    }\r\n    return this._parameters;\r\n  }\r\n  private set parameters(value: Array<CubismParameter> | null) {\r\n    this._parameters = value;\r\n  }\r\n\r\n  /** Parts backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _parts: Array<CubismPart> | null = null;\r\n  /** Drawables of model. */\r\n  public get parts(): Array<CubismPart> | null {\r\n    if (this._parts == null) {\r\n      this.revive();\r\n    }\r\n    return this._parts;\r\n  }\r\n  private set parts(value: Array<CubismPart> | null) {\r\n    this._parts = value;\r\n  }\r\n\r\n  /** Drawables backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _drawables: Array<CubismDrawable> | null = null;\r\n  /** Drawables of model. */\r\n  public get drawables(): Array<CubismDrawable> | null {\r\n    if (this._drawables == null) {\r\n      this.revive();\r\n    }\r\n    return this._drawables;\r\n  }\r\n  private set drawables(value: Array<CubismDrawable> | null) {\r\n    this._drawables = value;\r\n  }\r\n\r\n  /** CanvasInformation backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _canvasInformation: CubismCanvasInformation | null = null;\r\n  /** Canvas information of model. */\r\n  public get canvasInformation(): CubismCanvasInformation | null {\r\n    if (this._canvasInformation == null) {\r\n      this.revive();\r\n    }\r\n\r\n    return this._canvasInformation;\r\n  }\r\n  private set canvasInformation(value: CubismCanvasInformation | null) {\r\n    this._canvasInformation = value;\r\n  }\r\n\r\n  /** Parameter store cache. */\r\n  protected _parameterStore: CubismParameterStore | null = null;\r\n\r\n  /** True if instance is revived. */\r\n  public get isRevived(): boolean {\r\n    return this.taskableModel != null;\r\n  }\r\n\r\n  private get canRevive(): boolean {\r\n    return this._moc != null;\r\n  }\r\n\r\n  /** Model update functions for player loop. */\r\n  @property({ serializable: false, visible: false })\r\n  private static _modelUpdateFunctions: ModelUpdateFunctions = new ModelUpdateFunctions();\r\n\r\n  private static get modelUpdateFunctions(): IModelUpdateFunctions {\r\n    return this._modelUpdateFunctions;\r\n  }\r\n\r\n  private wasAttachedModelUpdateFunction: boolean = false;\r\n\r\n  private _wasJustEnabled: boolean = false;\r\n  /** True on the frame the instance was enabled. */\r\n  private get wasJustEnabled() {\r\n    return this._wasJustEnabled;\r\n  }\r\n  private set wasJustEnabled(value) {\r\n    this._wasJustEnabled = value;\r\n  }\r\n\r\n  private _lastTick: number = 0;\r\n  /** Frame number last update was done. */\r\n  private get lastTick() {\r\n    return this._lastTick;\r\n  }\r\n  private set lastTick(value) {\r\n    this._lastTick = value;\r\n  }\r\n\r\n  /** Revives instance. */\r\n  private revive() {\r\n    // Return if already revive.\r\n    if (this.isRevived) {\r\n      return;\r\n    }\r\n\r\n    // Return if revive isn't possible.\r\n    if (this.moc == null) {\r\n      console.error('CubismModel.revive(): this.moc is null.');\r\n      return;\r\n    }\r\n\r\n    const model = CubismTaskableModel.createTaskableModel(this.moc);\r\n\r\n    if (model == null) {\r\n      console.error('CubismModel.revive(): CubismTaskableModel.createTaskableModel() failed.');\r\n      return;\r\n    }\r\n\r\n    this.taskableModel = model;\r\n\r\n    // Revive proxies.\r\n    this.parameters = this.getComponentsInChildren(CubismParameter);\r\n    if (this.taskableModel != null) {\r\n      ArrayExtensionMethods.reviveParameters(this.parameters, model.unmanagedModel!);\r\n    }\r\n    this.parts = this.getComponentsInChildren(CubismPart);\r\n    if (this.taskableModel != null) {\r\n      ArrayExtensionMethods.reviveParts(this.parts, model.unmanagedModel!);\r\n    }\r\n\r\n    // Editor Only, For operation from inspector.\r\n    if (EDITOR) {\r\n      if (this.taskableModel != null) {\r\n        this.parameters.forEach((e) => {\r\n          Reflect.set(e, '_model', this);\r\n        });\r\n        this.parts.forEach((e) => {\r\n          Reflect.set(e, '_model', this);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.drawables = this.getComponentsInChildren(CubismDrawable);\r\n    if (this.taskableModel != null) {\r\n      ArrayExtensionMethods.reviveDrawables(this.drawables, model.unmanagedModel!);\r\n    }\r\n\r\n    if (model.unmanagedModel == null) {\r\n      console.error('CubismModel.revive(): this.taskableModel.unmanagedModel is null.');\r\n      return;\r\n    }\r\n    this.canvasInformation = CubismCanvasInformation.instantiate(model.unmanagedModel);\r\n    this._parameterStore = this.getComponent(CubismParameterStore);\r\n  }\r\n\r\n  /**\r\n   * Initializes instance for first use.\r\n   * @param moc Moc to instantiate from.\r\n   */\r\n  private reset(moc: CubismMoc) {\r\n    this.moc = moc;\r\n    this.name = moc.name;\r\n    this.taskableModel = CubismTaskableModel.createTaskableModel(moc);\r\n\r\n    if (this.taskableModel == null) {\r\n      console.error('CubismModel.reset(): CubismTaskableModel.createTaskableModel() failed.');\r\n      return;\r\n    }\r\n    console.assert(this.taskableModel.unmanagedModel != null);\r\n    const unmanagedModel = this.taskableModel.unmanagedModel!;\r\n\r\n    // Create and initialize proxies.\r\n    const parameters = CubismParameter.createParameters(unmanagedModel);\r\n    const parts = CubismPart.createParts(unmanagedModel);\r\n    const drawables = CubismDrawable.createDrawables(unmanagedModel);\r\n\r\n    this.node.addChild(parameters);\r\n    this.node.addChild(parts);\r\n    this.node.addChild(drawables);\r\n\r\n    this.parameters = parameters.getComponentsInChildren(CubismParameter);\r\n    this.parts = parts.getComponentsInChildren(CubismPart);\r\n    this.drawables = drawables.getComponentsInChildren(CubismDrawable);\r\n\r\n    this.canvasInformation = CubismCanvasInformation.instantiate(unmanagedModel!);\r\n  }\r\n\r\n  /** Forces update. */\r\n  public forceUpdateNow(): void {\r\n    this.wasJustEnabled = true;\r\n    this.lastTick = -1;\r\n\r\n    this.revive();\r\n\r\n    this.onModelUpdate();\r\n  }\r\n\r\n  /** Calls model update functions for player loop. */\r\n  private static onModelsUpdate(): void {\r\n    if (CubismModel._modelUpdateFunctions != null) {\r\n      CubismModel._modelUpdateFunctions.invoke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register the model update function into the player loop.\r\n   *\r\n   * Unity における PreLateUpdate の位置で実行できるイベントがないため\r\n   * Unity における onRenderObject と同程度の実行タイミング {@link Director.EVENT_AFTER_DRAW} で\r\n   * {@link CubismModel.onModelsUpdate} が実行されるよう実装\r\n   */\r\n  public static registerCallbackFunction(): void {\r\n    // Prepare the function for using player loop.\r\n    director.off(Director.EVENT_AFTER_DRAW, CubismModel.onModelsUpdate);\r\n    director.on(Director.EVENT_AFTER_DRAW, CubismModel.onModelsUpdate);\r\n  }\r\n\r\n  /**\r\n   * Called by Cocos Creator. Triggers this to update.\r\n   * @param deltaTime\r\n   */\r\n  protected update(deltaTime: number) {\r\n    if (!this.wasAttachedModelUpdateFunction) {\r\n      CubismModel._modelUpdateFunctions.add(this.bindedOnModelUpdateFunc);\r\n      this.wasAttachedModelUpdateFunction = true;\r\n    }\r\n\r\n    // Return on first frame enabled.\r\n    if (this.wasJustEnabled) {\r\n      return;\r\n    }\r\n\r\n    // Return unless revived.\r\n    if (!this.isRevived) {\r\n      return;\r\n    }\r\n\r\n    if (this.taskableModel == null) {\r\n      console.error('CubismModel.update(): this.taskableModel is null.');\r\n      return;\r\n    }\r\n\r\n    if (this.parameters == null) {\r\n      console.error('CubismModel.update(): this.parameters is null.');\r\n      return;\r\n    }\r\n\r\n    // Return if backend is ticking.\r\n    if (!this.taskableModel.didExecute) {\r\n      return;\r\n    }\r\n\r\n    // Sync parameters back.\r\n    this.taskableModel.tryReadParameters(this.parameters);\r\n\r\n    // restore last frame parameters value and parts opacity.\r\n    if (this._parameterStore != null) {\r\n      this._parameterStore.restoreParameters();\r\n    }\r\n\r\n    // Trigger event.\r\n    if (this.onDynamicDrawableData == null) {\r\n      return;\r\n    }\r\n\r\n    this._onDynamicDrawableData.invoke(this, this.taskableModel.dynamicDrawableData);\r\n  }\r\n\r\n  /** Update model states. */\r\n  private onModelUpdate(): void {\r\n    // Return unless revived.\r\n    if (!this.isRevived) {\r\n      return;\r\n    }\r\n\r\n    // Return if already ticked this frame.\r\n    const frameCount = director.getTotalFrames();\r\n\r\n    if (this.lastTick == frameCount /* && Application.isPlaying*/) {\r\n      return;\r\n    }\r\n    this.lastTick = frameCount;\r\n\r\n    if (this.taskableModel == null) {\r\n      console.warn('CubismModel.taskableModel is null.');\r\n      return;\r\n    }\r\n    if (this.parameters == null) {\r\n      console.error('CubismModel.update(): this.parameters is null.');\r\n      return;\r\n    }\r\n    if (this.parts == null) {\r\n      console.error('CubismModel.update(): this.parts is null.');\r\n      return;\r\n    }\r\n\r\n    // Try to sync parameters and parts (without caring whether task is executing or not).\r\n    this.taskableModel.tryWriteParametersAndParts(this.parameters, this.parts);\r\n\r\n    // Return if task is executing.\r\n    // シングルスレッド調整のため常にfalse\r\n    // if (this.taskableModel.isExecuting) {\r\n    //   return;\r\n    // }\r\n\r\n    // Force blocking update on first frame enabled.\r\n    if (this.wasJustEnabled) {\r\n      // Force sync update.\r\n      this.taskableModel.updateNow();\r\n\r\n      // Unset condition.\r\n      this.wasJustEnabled = false;\r\n\r\n      // Fetch results by calling own 'Update()'.\r\n      this.update(game.deltaTime);\r\n\r\n      return;\r\n    }\r\n\r\n    // Enqueue update task.\r\n    this.taskableModel.update();\r\n  }\r\n\r\n  /** Called by Cocos Creator. Revives instance. */\r\n  protected onEnable(): void {\r\n    this.wasJustEnabled = true;\r\n    this.revive();\r\n  }\r\n  protected onDisable(): void {\r\n    if (this.wasAttachedModelUpdateFunction) {\r\n      CubismModel.modelUpdateFunctions.remove(this.bindedOnModelUpdateFunc);\r\n      this.wasAttachedModelUpdateFunction = false;\r\n    }\r\n  }\r\n\r\n  /** Called by Cocos Creator. Releases unmanaged memory. */\r\n  protected onDestroy(): void {\r\n    if (!this.isRevived) {\r\n      return;\r\n    }\r\n    this.taskableModel = null;\r\n  }\r\n\r\n  /** Called by Cocos Creator. Triggers onEnable. */\r\n  private onValidate(): void {\r\n    this.onEnable();\r\n  }\r\n\r\n  /**\r\n   * コールバック登録用 onLoad にて初期化されます。\r\n   * @param sender\r\n   * @param data\r\n   */\r\n  protected bindedOnModelUpdateFunc: () => void = this.onModelUpdate.bind(this);\r\n}\r\n\r\n/**\r\n * Handler for CubismDynamicDrawableData.\r\n * @param sender Model the dymanic data applies to.\r\n * @param data New data.\r\n */\r\ntype DynamicDrawableDataHandler = (\r\n  sender: CubismModel,\r\n  data: Array<CubismDynamicDrawableData>\r\n) => void;\r\n\r\nclass DynamicDrawableDataEvent implements IDynamicDrawableDataEvent {\r\n  private functions = Array<DynamicDrawableDataHandler>(0);\r\n\r\n  public add(func: DynamicDrawableDataHandler): void {\r\n    this.functions.push(func);\r\n  }\r\n\r\n  public remove(func: DynamicDrawableDataHandler): void {\r\n    this.functions = this.functions.filter((value) => value != func);\r\n  }\r\n\r\n  public invoke(sender: CubismModel, data: Array<CubismDynamicDrawableData>): void {\r\n    for (let i = 0; i < this.functions.length; i++) {\r\n      this.functions[i](sender, data);\r\n    }\r\n  }\r\n}\r\n\r\nCubismModel.registerCallbackFunction();\r\n"]}