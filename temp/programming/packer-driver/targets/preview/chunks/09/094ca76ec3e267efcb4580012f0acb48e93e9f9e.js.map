{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Raycasting/CubismRaycaster.ts"],"names":["Component","geometry","math","_decorator","ComponentExtensionMethods","CubismDrawable","Vector3","CubismVector3","CubismRenderer","CubismRaycastable","CubismRaycastablePrecision","CubismRaycastHit","ccclass","CubismRaycaster","raycastables","raycastablePrecisions","refresh","candidates","findCubismModel","drawables","console","error","Array","i","length","getComponent","renderer","assert","push","raycastable","precision","start","raycast1","origin","direction","result","maximumDistance","Number","POSITIVE_INFINITY","raycast2","Ray","create","x","y","z","ray","from","o","d","intersectionInWorldSpace","add","multiplySingle","intersectionInLocalSpace","node","inverseTransformPoint","Vec3","toBuiltinType","copyWith","distance","magnitude","hitCount","raycastablePrecision","meshRenderer","enabled","bounds","mesh","calculateBounds","contains","triangles","containsInTriangles","drawable","localPosition","worldPosition","inputPosition","getIndices","positions","getPositions","vertexPositionA","vertexPositionB","vertexPositionC","crossProduct1","crossProduct2","crossProduct3"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Component, geometry, math, _decorator } from 'cc';\r\nimport ComponentExtensionMethods from '../../Core/ComponentExtensionMethods';\r\nimport CubismDrawable from '../../Core/CubismDrawable';\r\nimport { CubismVector3 as Vector3 } from '../../Core/CubismVector';\r\nimport CubismMeshPrimitive from '../../Rendering/CubismMeshPrimitive';\r\nimport CubismRenderer from '../../Rendering/CubismRenderer';\r\nimport CubismRaycastable from './CubismRaycastable';\r\nimport CubismRaycastablePrecision from './CubismRaycastablePrecision';\r\nimport CubismRaycastHit from './CubismRaycastHit';\r\nconst { ccclass } = _decorator;\r\n\r\n/**\r\n * Allows casting rays against {@link CubismRaycastable}s.\r\n *\r\n * **Sealed class**\r\n */\r\n@ccclass('CubismRaycaster')\r\nexport default class CubismRaycaster extends Component {\r\n  /** {@link CubismRenderer}s with {@link CubismRaycastable}s attached. */\r\n  private raycastables: CubismRenderer[] | null = null; // { get; set; }\r\n\r\n  /** {@link CubismRaycastablePrecision}s with {@link CubismRaycastable}s attached. */\r\n  private raycastablePrecisions: CubismRaycastablePrecision[] | null = null; // { get; set; }\r\n\r\n  /** Refreshes the controller. Call this method after adding and/or removing {@link CubismRaycastable}. */\r\n  private refresh(): void {\r\n    const candidates = ComponentExtensionMethods.findCubismModel(this)?.drawables ?? null;\r\n    if (candidates == null) {\r\n      console.error('CubismRaycaster.refresh(): candidates is null.');\r\n      return;\r\n    }\r\n\r\n    // Find raycastable drawables.\r\n    const raycastables = new Array<CubismRenderer>();\r\n    const raycastablePrecisions = new Array<CubismRaycastablePrecision>();\r\n\r\n    for (var i = 0; i < candidates.length; i++) {\r\n      // Skip non-raycastables.\r\n      if (candidates[i].getComponent(CubismRaycastable) == null) {\r\n        continue;\r\n      }\r\n      const renderer = candidates[i].getComponent(CubismRenderer);\r\n      console.assert(renderer);\r\n      raycastables.push(renderer!);\r\n\r\n      const raycastable = candidates[i].getComponent(CubismRaycastable);\r\n      console.assert(raycastable);\r\n      console.assert(raycastable!.precision);\r\n      raycastablePrecisions.push(raycastable!.precision!);\r\n    }\r\n\r\n    // Cache raycastables.\r\n    this.raycastables = raycastables;\r\n    this.raycastablePrecisions = raycastablePrecisions;\r\n  }\r\n\r\n  //#region Cocos Creator Event Handling\r\n\r\n  /** Called by Cocos Creator. Makes sure cache is initialized. */\r\n  protected start(): void {\r\n    // Initialize cache.\r\n    this.refresh();\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Casts a ray.\r\n   * @param origin The origin of the ray.\r\n   * @param direction The direction of the ray.\r\n   * @param result The result of the cast.\r\n   * @param maximumDistance [Optional] The maximum distance of the ray.\r\n   * @returns\r\n   * true in case of a hit; false otherwise.\r\n   *\r\n   * The numbers of drawables had hit\r\n   */\r\n  public raycast1(\r\n    origin: Vector3,\r\n    direction: Vector3,\r\n    result: CubismRaycastHit[],\r\n    maximumDistance: number = Number.POSITIVE_INFINITY\r\n  ): number {\r\n    return this.raycast2(\r\n      geometry.Ray.create(origin.x, origin.y, origin.z, direction.x, direction.y, direction.z),\r\n      result,\r\n      maximumDistance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Casts a ray.\r\n   * @param ray\r\n   * @param result  The result of the cast.\r\n   * @param maximumDistance [Optional] The maximum distance of the ray.\r\n   * @returns\r\n   * true in case of a hit; false otherwise.\r\n   *\r\n   * The numbers of drawables had hit\r\n   */\r\n  public raycast2(\r\n    ray: geometry.Ray,\r\n    result: CubismRaycastHit[],\r\n    maximumDistance: number = Number.POSITIVE_INFINITY\r\n  ): number {\r\n    // Cast ray against model plane.\r\n    const origin = Vector3.from(ray.o);\r\n    const direction = Vector3.from(ray.d);\r\n    const intersectionInWorldSpace = origin.add(direction.multiplySingle(direction.z / origin.z));\r\n    let intersectionInLocalSpace = Vector3.from(\r\n      this.node.inverseTransformPoint(new math.Vec3(), intersectionInWorldSpace.toBuiltinType())\r\n    );\r\n    intersectionInLocalSpace = intersectionInLocalSpace.copyWith({ z: 0 });\r\n    const distance = intersectionInWorldSpace.magnitude();\r\n    // Return non-hits.\r\n    if (distance > maximumDistance) {\r\n      return 0;\r\n    }\r\n    // Cast against each raycastable.\r\n    let hitCount = 0;\r\n    console.assert(this.raycastables != null);\r\n    const raycastables = this.raycastables!;\r\n    console.assert(this.raycastablePrecisions != null);\r\n    const raycastablePrecisions = this.raycastablePrecisions!;\r\n\r\n    for (let i = 0; i < raycastables.length; i++) {\r\n      const raycastable = raycastables[i];\r\n      const raycastablePrecision = raycastablePrecisions[i];\r\n      // Skip inactive raycastables.\r\n      console.assert(raycastable.meshRenderer != null);\r\n      if (!raycastable.meshRenderer!.enabled) {\r\n        continue;\r\n      }\r\n      const bounds = raycastable.mesh.calculateBounds();\r\n\r\n      // Skip non hits (bounding box)\r\n      if (!bounds.contains(intersectionInLocalSpace)) {\r\n        continue;\r\n      }\r\n\r\n      // Do detailed hit-detection against mesh if requested.\r\n      if (raycastablePrecision == CubismRaycastablePrecision.triangles) {\r\n        if (!this.containsInTriangles(raycastable.mesh, intersectionInLocalSpace)) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      result[hitCount] = new CubismRaycastHit({\r\n        drawable: raycastable.getComponent(CubismDrawable),\r\n        distance: distance,\r\n        localPosition: intersectionInLocalSpace,\r\n        worldPosition: intersectionInWorldSpace,\r\n      });\r\n\r\n      ++hitCount;\r\n\r\n      // Exit if result buffer is full.\r\n      if (hitCount == result.length) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hitCount;\r\n  }\r\n\r\n  /**\r\n   * Check the point is inside polygons.\r\n   * @param mesh\r\n   * @param inputPosition\r\n   * @returns\r\n   */\r\n  private containsInTriangles(mesh: CubismMeshPrimitive, inputPosition: Vector3): boolean {\r\n    const triangles = mesh.getIndices();\r\n    const positions = mesh.getPositions();\r\n    for (let i = 0; i < triangles.length; i += 3) {\r\n      const vertexPositionA = positions[triangles[i]];\r\n      const vertexPositionB = positions[triangles[i + 1]];\r\n      const vertexPositionC = positions[triangles[i + 2]];\r\n\r\n      const crossProduct1 =\r\n        (vertexPositionB.x - vertexPositionA.x) * (inputPosition.y - vertexPositionB.y) -\r\n        (vertexPositionB.y - vertexPositionA.y) * (inputPosition.x - vertexPositionB.x);\r\n      const crossProduct2 =\r\n        (vertexPositionC.x - vertexPositionB.x) * (inputPosition.y - vertexPositionC.y) -\r\n        (vertexPositionC.y - vertexPositionB.y) * (inputPosition.x - vertexPositionC.x);\r\n      const crossProduct3 =\r\n        (vertexPositionA.x - vertexPositionC.x) * (inputPosition.y - vertexPositionA.y) -\r\n        (vertexPositionA.y - vertexPositionC.y) * (inputPosition.x - vertexPositionA.x);\r\n\r\n      if (\r\n        (crossProduct1 > 0 && crossProduct2 > 0 && crossProduct3 > 0) ||\r\n        (crossProduct1 < 0 && crossProduct2 < 0 && crossProduct3 < 0)\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"]}