{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsOutput.ts"],"names":["_decorator","math","Enum","CubismPhysics","CubismPhysicsMath","CubismPhysicsSourceComponent","MathExtensions","property","ccclass","Vec2","CubismPhysicsOutput","serializable","type","readonly","valueBelowMinimum","valueExceededMaximum","destination","getValue","getScale","getOutputTranslationX","translation","particles","particleIndex","gravity","outputValue","x","isInverted","getOutputTranslationY","y","getOutputAngle","parentGravity","ZERO","useAngleCorrection","subtract","position","directionToRadian","getOutputScaleTranslationX","translationScale","getOutputScaleTranslationY","getOutputScaleAngle","angleScale","initializeGetter","sourceComponent","X","bind","Y","Angle","neverCheck","clone"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, math, Enum } from 'cc';\r\nimport CubismPhysics from './CubismPhysics';\r\nimport CubismPhysicsMath from './CubismPhysicsMath';\r\nimport CubismPhysicsSourceComponent from './CubismPhysicsSourceComponent';\r\nimport type CubismPhysicsParticle from './CubismPhysicsParticle';\r\nimport type CubismParameter from '../../Core/CubismParameter';\r\nimport { MathExtensions } from '../../Utils';\r\nconst { property, ccclass } = _decorator;\r\nconst { Vec2 } = MathExtensions;\r\n\r\n/**\r\n * Delegation of function of getting output value.\r\n * @param translation Translation.\r\n * @param parameter Parameter.\r\n * @param particles Particles.\r\n * @param particleIndex Index of particle.\r\n * @param gravity Gravity.\r\n * @returns Output value.\r\n */\r\ntype ValueGetter = (\r\n  translation: math.Vec2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  gravity: math.Vec2\r\n) => number;\r\n\r\n/**\r\n * Delegation of function of getting output scale.\r\n * @returns Output scale.\r\n */\r\ntype ScaleGetter = () => number;\r\n\r\n/** Output data of physics. (struct) */\r\n@ccclass('CubismPhysicsOutput')\r\nexport default class CubismPhysicsOutput {\r\n  /**\r\n   * Gets output for translation X-axis.\r\n   * @param translation Translation.\r\n   * @param parameter Parameter.\r\n   * @param particles Particles.\r\n   * @param particleIndex Index of particle.\r\n   * @param gravity Gravity.\r\n   * @returns Output value.\r\n   */\r\n  private getOutputTranslationX(\r\n    translation: math.Vec2,\r\n    particles: Array<CubismPhysicsParticle>,\r\n    particleIndex: number,\r\n    gravity: math.Vec2\r\n  ): number {\r\n    let outputValue = translation.x;\r\n    if (this.isInverted) {\r\n      outputValue *= -1.0;\r\n    }\r\n    return outputValue;\r\n  }\r\n\r\n  /**\r\n   * Gets output for translation Y-axis.\r\n   * @param translation Translation.\r\n   * @param parameter Parameter.\r\n   * @param particles Particles.\r\n   * @param particleIndex Index of particle.\r\n   * @param gravity Gravity.\r\n   * @returns Output value.\r\n   */\r\n  private getOutputTranslationY(\r\n    translation: math.Vec2,\r\n    particles: Array<CubismPhysicsParticle>,\r\n    particleIndex: number,\r\n    gravity: math.Vec2\r\n  ): number {\r\n    let outputValue = translation.y;\r\n    if (this.isInverted) {\r\n      outputValue *= -1.0;\r\n    }\r\n    return outputValue;\r\n  }\r\n\r\n  /**\r\n   * Gets output for angle.\r\n   * @param translation Translation.\r\n   * @param parameter Parameter.\r\n   * @param particles Particles.\r\n   * @param particleIndex Index of particle.\r\n   * @param gravity Gravity.\r\n   * @returns Output value.\r\n   */\r\n  private getOutputAngle(\r\n    translation: math.Vec2,\r\n    particles: Array<CubismPhysicsParticle>,\r\n    particleIndex: number,\r\n    gravity: math.Vec2\r\n  ): number {\r\n    let parentGravity = math.Vec2.ZERO;\r\n    if (CubismPhysics.useAngleCorrection) {\r\n      if (particleIndex < 2) {\r\n        parentGravity = new math.Vec2(gravity.x, gravity.y * -1.0);\r\n      } else {\r\n        parentGravity = Vec2.subtract(\r\n          particles[particleIndex - 1].position,\r\n          particles[particleIndex - 2].position\r\n        );\r\n      }\r\n    } else {\r\n      parentGravity = new math.Vec2(gravity.x, gravity.y * -1.0);\r\n    }\r\n    let outputValue = CubismPhysicsMath.directionToRadian(parentGravity, translation);\r\n    if (this.isInverted) {\r\n      outputValue *= -1.0;\r\n    }\r\n    return outputValue;\r\n  }\r\n\r\n  /**\r\n   * Gets output scale for translation X-axis.\r\n   * @returns Output scale.\r\n   */\r\n  private getOutputScaleTranslationX(): number {\r\n    return this.translationScale.x;\r\n  }\r\n\r\n  /**\r\n   * Gets output scale for translation Y-axis.\r\n   * @returns Output scale.\r\n   */\r\n  private getOutputScaleTranslationY(): number {\r\n    return this.translationScale.y;\r\n  }\r\n\r\n  /**\r\n   * Gets output scale for angle.\r\n   * @returns Output scale.\r\n   */\r\n  private getOutputScaleAngle(): number {\r\n    return this.angleScale;\r\n  }\r\n\r\n  public initializeGetter(): void {\r\n    switch (this.sourceComponent) {\r\n      case CubismPhysicsSourceComponent.X:\r\n        {\r\n          this.getScale = this.getOutputScaleTranslationX.bind(this);\r\n          this.getValue = this.getOutputTranslationX.bind(this);\r\n        }\r\n        break;\r\n      case CubismPhysicsSourceComponent.Y:\r\n        {\r\n          this.getScale = this.getOutputScaleTranslationY.bind(this);\r\n          this.getValue = this.getOutputTranslationY.bind(this);\r\n        }\r\n        break;\r\n      case CubismPhysicsSourceComponent.Angle:\r\n        {\r\n          this.getScale = this.getOutputScaleAngle.bind(this);\r\n          this.getValue = this.getOutputAngle.bind(this);\r\n        }\r\n        break;\r\n      default:\r\n        const neverCheck: never = this.sourceComponent;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /** Parameter ID of destination. */\r\n  @property({ serializable: true })\r\n  public destinationId: string | null = '';\r\n\r\n  /** Index of particle. */\r\n  @property({ serializable: true })\r\n  public particleIndex: number = 0;\r\n\r\n  /** Scale of transition. */\r\n  @property({ serializable: true })\r\n  public translationScale: math.Vec2 = math.Vec2.ZERO.clone();\r\n\r\n  /** Scale of angle. */\r\n  @property({ serializable: true })\r\n  public angleScale: number = 0;\r\n\r\n  /** Weight. */\r\n  @property({ serializable: true })\r\n  public weight: number = 0;\r\n\r\n  /** Component of source. */\r\n  @property({ type: Enum(CubismPhysicsSourceComponent), serializable: true, readonly: false })\r\n  public sourceComponent: CubismPhysicsSourceComponent = CubismPhysicsSourceComponent.X;\r\n\r\n  /** True if value is inverted; otherwise. */\r\n  @property({ serializable: true })\r\n  public isInverted: boolean = false;\r\n\r\n  /** The value that below minimum. */\r\n  public valueBelowMinimum: number = 0;\r\n\r\n  /** The value that exceeds maximum. */\r\n  public valueExceededMaximum: number = 0;\r\n\r\n  /** Destination data from parameter. */\r\n  public destination: CubismParameter | null = null;\r\n\r\n  /** Function of getting output value. */\r\n  public getValue: ValueGetter | null = null;\r\n\r\n  /** Function of getting output scale. */\r\n  public getScale: ScaleGetter | null = null;\r\n}\r\n"]}