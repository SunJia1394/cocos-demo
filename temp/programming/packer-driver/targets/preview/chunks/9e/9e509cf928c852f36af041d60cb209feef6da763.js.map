{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismExp3Json.ts"],"names":["CubismExp3Json","_decorator","JsonParseUtils","ccclass","asNumber","asString","constructor","type","fadeInTime","fadeOutTime","parameters","Array","loadFrom","exp3Json","json","parse","loadFromJson","loadFromJsonAsset","exp3JsonAsset","Type","arrayedInstantiateFromJson","Parameters","SerializableExpressionParameter","instantiateFromJson","FadeInTime","FadeOutTime","undefined","result","args","id","value","blend","copyWith","equals","other","strictEquals","Id","Value","Blend","DEFAULT"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { JsonAsset, _decorator } from 'cc';\r\nimport IStructLike from '../../IStructLike';\r\nimport JsonParseUtils from './JsonParseUtils';\r\nconst { ccclass } = _decorator;\r\nconst { asNumber, asString } = JsonParseUtils;\r\n\r\n/**\r\n * Cubism exp3.json data.\r\n *\r\n * **Sealed class.**\r\n */\r\nexport default class CubismExp3Json {\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Loads a exp3.json asset.\r\n   * @param exp3Json exp3.json to deserialize.\r\n   * @returns Deserialized exp3.json on success; null otherwise.\r\n   */\r\n  public static loadFrom(exp3Json: string): CubismExp3Json | null {\r\n    const json = JsonParseUtils.parse(exp3Json);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n    return this.loadFromJson(json);\r\n  }\r\n\r\n  /**\r\n   * Loads a exp3.json asset.\r\n   * @param exp3JsonAsset exp3.json to deserialize.\r\n   * @returns Deserialized exp3.json on success; null otherwise.\r\n   */\r\n  public static loadFromJsonAsset(exp3JsonAsset: JsonAsset): CubismExp3Json | null {\r\n    if (exp3JsonAsset.json != null) {\r\n      return this.loadFromJson(exp3JsonAsset.json);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Type\r\n   * - Parameters\r\n   *\r\n   * **Optional properties**\r\n   * - FadeInTime\r\n   * - FadeOutTime\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static loadFromJson(json: any): CubismExp3Json | null {\r\n    const type = asString(json.Type);\r\n    const parameters = JsonParseUtils.arrayedInstantiateFromJson(\r\n      json.Parameters,\r\n      SerializableExpressionParameter.instantiateFromJson\r\n    );\r\n    const fadeInTime = asNumber(json.FadeInTime);\r\n    const fadeOutTime = asNumber(json.FadeOutTime);\r\n    if (type === undefined || parameters === undefined) {\r\n      return null;\r\n    }\r\n    const result = new CubismExp3Json();\r\n    result.type = type;\r\n    result.parameters = parameters;\r\n    result.fadeInTime = fadeInTime ?? 1.0;\r\n    result.fadeOutTime = fadeOutTime ?? 1.0;\r\n    return result;\r\n  }\r\n\r\n  // #region Json Data\r\n  /** Expression Type */\r\n  public type: string = '';\r\n\r\n  /** Expression FadeInTime */\r\n  public fadeInTime: number = 1.0;\r\n\r\n  /** Expression FadeOutTime */\r\n  public fadeOutTime: number = 1.0;\r\n\r\n  /** Expression Parameters */\r\n  public parameters: Array<SerializableExpressionParameter> = new Array(0);\r\n\r\n  // #endregion\r\n}\r\n\r\n// #region Json Helpers\r\n\r\n/** Expression Parameter (struct) */\r\n@ccclass('SerializableExpressionParameter')\r\nexport class SerializableExpressionParameter\r\n  implements IStructLike<SerializableExpressionParameter>\r\n{\r\n  /** Expression Parameter Id */\r\n  public readonly id: string;\r\n  /** Expression Parameter Value */\r\n  public readonly value: number;\r\n  /** Expression Parameter Blend Mode */\r\n  public readonly blend: string;\r\n\r\n  public constructor(args: { id?: string; value?: number; blend?: string } = {}) {\r\n    this.id = args.id ?? '';\r\n    this.value = args.value ?? 0;\r\n    this.blend = args.blend ?? '';\r\n  }\r\n\r\n  public copyWith(\r\n    args: { id?: string | null; value?: number; blend?: string | null } = {}\r\n  ): SerializableExpressionParameter {\r\n    return new SerializableExpressionParameter({\r\n      id: args.id ?? this.id,\r\n      value: args.value ?? this.value,\r\n      blend: args.blend ?? this.blend,\r\n    });\r\n  }\r\n\r\n  public equals(other: SerializableExpressionParameter): boolean {\r\n    throw this === other\r\n      ? true\r\n      : this.id == other.id && this.value == other.value && this.blend == other.blend;\r\n  }\r\n\r\n  public strictEquals(other: SerializableExpressionParameter): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Id\r\n   * - Value\r\n   *\r\n   * **Optional properties**\r\n   * - Blend\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static instantiateFromJson(json: any): SerializableExpressionParameter | undefined {\r\n    const id = asString(json.Id);\r\n    const value = asNumber(json.Value);\r\n    if (id === undefined || value === undefined) {\r\n      return;\r\n    }\r\n    const blend = asString(json.Blend);\r\n    return new SerializableExpressionParameter({\r\n      id: id,\r\n      value: value,\r\n      blend: blend,\r\n    });\r\n  }\r\n}\r\nexport namespace SerializableExpressionParameter {\r\n  export const DEFAULT = new SerializableExpressionParameter();\r\n}\r\n// #endregion\r\n"]}