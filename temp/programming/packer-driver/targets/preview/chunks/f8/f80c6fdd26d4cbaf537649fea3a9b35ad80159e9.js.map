{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/ArrayExtensionMethods.ts"],"names":["math","findByIdFromParameters","self","id","i","length","reviveParameters","model","sort","a","b","unmanagedIndex","revive","writeToModelFromParameters","values","parameters","value","readFromParameters","findByIdFromParts","reviveParts","writeToModelFromParts","opacities","parts","opacity","findByIdFromDrawables","reviveDrawables","readFromArrayCubismDynamicDrawableData","unmanagedModel","drawables","flags","dynamicFlags","drawOrders","renderOrders","vertexPositions","multiplyColors","screenColors","data","drawOrder","renderOrder","areVertexPositionsDirty","j","Vec3","isBlendColorDirty","rgbaIndex","multiplyColor","Color","screenColor","resetDynamicFlags","ArrayExtensionMethods"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { math } from 'cc';\r\nimport type { Model } from '../CubismCore';\r\nimport type CubismDrawable from './CubismDrawable';\r\nimport type CubismDynamicDrawableData from './CubismDynamicDrawableData';\r\nimport type CubismParameter from './CubismParameter';\r\nimport type CubismPart from './CubismPart';\r\n\r\n/** Extension for Cubism related arrays. */\r\nnamespace ArrayExtensionMethods {\r\n  // #region Parameters\r\n\r\n  /**\r\n   * Finds a {@link CubismParameter} by its ID.\r\n   * @param self Container.\r\n   * @param id ID to match.\r\n   * @returns Parameter on success; null otherwise.\r\n   */\r\n  export function findByIdFromParameters(\r\n    self: readonly CubismParameter[],\r\n    id: string\r\n  ): CubismParameter | null {\r\n    for (let i = 0; i < self.length; ++i) {\r\n      if (self[i].id != id) {\r\n        continue;\r\n      }\r\n      return self[i];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Revives (and sorts) CubismParameters.\r\n   * @param self Container.\r\n   * @param model TaskableModel to unmanaged model.\r\n   * @returns\r\n   */\r\n  export function reviveParameters(self: CubismParameter[], model: Model) {\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    self.sort((a, b) => a.unmanagedIndex - b.unmanagedIndex);\r\n\r\n    for (let i = 0; i < self.length; ++i) {\r\n      self[i].revive(model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes opacities to unmanaged model.\r\n   * @param self Source buffer.\r\n   * @param model\r\n   * @returns\r\n   */\r\n  export function writeToModelFromParameters(self: readonly CubismParameter[], model: Model) {\r\n    // Get address.\r\n    const values = model.parameters.values;\r\n\r\n    // Push.\r\n    for (let i = 0; i < self.length; i++) {\r\n      values[self[i].unmanagedIndex] = self[i].value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes opacities to unmanaged model.\r\n   * @param self Source buffer.\r\n   * @param model\r\n   * @returns\r\n   */\r\n  export function readFromParameters(self: readonly CubismParameter[], model: Model) {\r\n    if (model.parameters?.values == null) {\r\n      return;\r\n    }\r\n\r\n    // Get address.\r\n    const values = model.parameters.values;\r\n\r\n    // Pull.\r\n    for (let i = 0; i < self.length; i++) {\r\n      self[i].value = values[self[i].unmanagedIndex];\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Parts\r\n\r\n  /**\r\n   * Finds a CubismPart by its ID.\r\n   * @param self this.\r\n   * @param id ID to match.\r\n   * @returns Part if found; null otherwise.\r\n   */\r\n  export function findByIdFromParts(self: readonly CubismPart[], id: string): CubismPart | null {\r\n    for (let i = 0; i < self.length; ++i) {\r\n      if (self[i].id != id) {\r\n        continue;\r\n      }\r\n\r\n      return self[i];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Revives (and sorts) CubismParts.\r\n   * @param self Container.\r\n   * @param model TaskableModel to unmanaged model.\r\n   */\r\n  export function reviveParts(self: CubismPart[], model: Model) {\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    self.sort((a, b) => a.unmanagedIndex - b.unmanagedIndex);\r\n\r\n    for (let i = 0; i < self.length; ++i) {\r\n      self[i].revive(model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes opacities to unmanaged model.\r\n   * @param self Source buffer.\r\n   * @param model\r\n   * @returns\r\n   */\r\n  export function writeToModelFromParts(self: CubismPart[], model: Model) {\r\n    // Get address.\r\n    const opacities = model.parts.opacities;\r\n\r\n    // Push.\r\n    for (let i = 0; i < self.length; i++) {\r\n      opacities[self[i].unmanagedIndex] = self[i].opacity;\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Drawables\r\n\r\n  /**\r\n   * Finds a CubismDrawable by its ID.\r\n   * @param self this.\r\n   * @param id ID to match.\r\n   * @returns Part if found; null otherwise.\r\n   */\r\n  export function findByIdFromDrawables(\r\n    self: readonly CubismDrawable[],\r\n    id: string\r\n  ): CubismDrawable | null {\r\n    for (let i = 0; i < self.length; ++i) {\r\n      if (self[i].id != id) {\r\n        continue;\r\n      }\r\n\r\n      return self[i];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Revives (and sorts) CubismDrawables.\r\n   * @param self Container.\r\n   * @param model TaskableModel to unmanaged model.\r\n   */\r\n  export function reviveDrawables(self: CubismDrawable[], model: Model) {\r\n    if (model == null) {\r\n      return;\r\n    }\r\n\r\n    self.sort((a, b) => a.unmanagedIndex - b.unmanagedIndex);\r\n\r\n    for (let i = 0; i < self.length; ++i) {\r\n      self[i].revive(model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads new data from a model.\r\n   * @param self Buffer to write to.\r\n   * @param model Unmanaged model to read from.\r\n   */\r\n  export function readFromArrayCubismDynamicDrawableData(\r\n    self: readonly CubismDynamicDrawableData[],\r\n    unmanagedModel: Model\r\n  ) {\r\n    const drawables = unmanagedModel.drawables;\r\n    const flags = drawables.dynamicFlags;\r\n    const opacities = drawables.opacities;\r\n    const drawOrders = drawables.drawOrders;\r\n    const renderOrders = drawables.renderOrders;\r\n    const vertexPositions = drawables.vertexPositions;\r\n    const multiplyColors = drawables.multiplyColors;\r\n    const screenColors = drawables.screenColors;\r\n\r\n    // Pull data.\r\n    for (let i = 0; i < self.length; i++) {\r\n      const data = self[i];\r\n\r\n      data.flags = flags[i];\r\n      data.opacity = opacities[i];\r\n      data.drawOrder = drawOrders[i];\r\n      data.renderOrder = renderOrders[i];\r\n      // Read vertex positions only if necessary.\r\n      if (!data.areVertexPositionsDirty) {\r\n        continue;\r\n      }\r\n      // Copy vertex positions.\r\n      for (let j = 0; j < data.vertexPositions.length; j++) {\r\n        data.vertexPositions[j] = new math.Vec3(\r\n          vertexPositions[i][j * 2 + 0],\r\n          vertexPositions[i][j * 2 + 1]\r\n        );\r\n      }\r\n\r\n      if (!data.isBlendColorDirty) {\r\n        continue;\r\n      }\r\n\r\n      const rgbaIndex = i * 4;\r\n      data.multiplyColor = new math.Color(\r\n        multiplyColors[rgbaIndex] * 255,\r\n        multiplyColors[rgbaIndex + 1] * 255,\r\n        multiplyColors[rgbaIndex + 2] * 255,\r\n        multiplyColors[rgbaIndex + 3] * 255\r\n      );\r\n      data.screenColor = new math.Color(\r\n        screenColors[rgbaIndex] * 255,\r\n        screenColors[rgbaIndex + 1] * 255,\r\n        screenColors[rgbaIndex + 2] * 255,\r\n        screenColors[rgbaIndex + 3] * 255\r\n      );\r\n    }\r\n    // Clear dynamic flags.\r\n    drawables.resetDynamicFlags();\r\n  }\r\n}\r\nexport default ArrayExtensionMethods;\r\n"]}