{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/CubismResources.ts"],"names":["assetManager","EDITOR","isImporter","_maskMaterial","_maskCullingMaterial","getMaskMaterial","getMaskCullingMaterial","CubismResources","loadBundle","error","bundle","console","load","asset","info","mask","Editor","Message","request","maskCulling","loadAny"],"mappings":";;;;;;;;;;;;;;;;AAOSA,MAAAA,Y,OAAAA,Y;;AACAC,MAAAA,M,UAAAA,M;;AACAC,MAAAA,U,iBAAAA,U;;;;;;AATT;AACA;AACA;AACA;AACA;AACA;;;;;AAMIC,MAAAA,a,GAAiC,I;AACjCC,MAAAA,oB,GAAwC,I;;;AAGnC,iBAASC,eAAT,GAA4C;AACjD,iBAAOF,aAAP;AACD;;;;AACM,iBAASG,sBAAT,GAAmD;AACxD,iBAAOF,oBAAP;AACD;;;SANOG,e,KAAAA,e;;yBASKA,e;;AAEf,UAAI,CAACN,MAAL,EAAa;AACXD,QAAAA,YAAY,CAACQ,UAAb,CAAwB,6BAAxB,EAAuD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxE,cAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,YAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,WAFD,MAEO;AACLC,YAAAA,MAAM,CAACE,IAAP,CAAsB,gBAAtB,EAAwC,CAACH,KAAD,EAAQI,KAAR,KAAkB;AACxD,kBAAIJ,KAAK,IAAI,IAAb,EAAmB;AACjBE,gBAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,eAFD,MAEO;AACLE,gBAAAA,OAAO,CAACG,IAAR,CAAa,qBAAb;AACAX,gBAAAA,aAAa,GAAGU,KAAhB;AACD;AACF,aAPD;AAQAH,YAAAA,MAAM,CAACE,IAAP,CAAsB,uBAAtB,EAA+C,CAACH,KAAD,EAAQI,KAAR,KAAkB;AAC/D,kBAAIJ,KAAK,IAAI,IAAb,EAAmB;AACjBE,gBAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,eAFD,MAEO;AACLL,gBAAAA,oBAAoB,GAAGS,KAAvB;AACD;AACF,aAND;AAOD;AACF,SApBD;AAqBD,OAtBD,MAsBO;AACL,YAAI,CAAC;AAAA;AAAA,uCAAL,EAAmB;AACXE,UAAAA,IADW,GACJ,MAAMC,MAAM,CAACC,OAAP,CAAeC,OAAf,CACjB,UADiB,EAEjB,YAFiB,EAGjB,iEAHiB,CADF;AAMXC,UAAAA,WANW,GAMG,MAAMH,MAAM,CAACC,OAAP,CAAeC,OAAf,CACxB,UADwB,EAExB,YAFwB,EAGxB,wEAHwB,CANT;AAWjBlB,UAAAA,YAAY,CAACoB,OAAb,CAAqBL,IAArB,EAA2B,IAA3B,EAAiC,CAACN,KAAD,EAAQI,KAAR,KAAkB;AACjD,gBAAIJ,KAAJ,EAAW;AACTE,cAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,aAFD,MAEO;AACLN,cAAAA,aAAa,GAAGU,KAAhB;AACD;AACF,WAND;AAOAb,UAAAA,YAAY,CAACoB,OAAb,CAAqBD,WAArB,EAAkC,IAAlC,EAAwC,CAACV,KAAD,EAAQI,KAAR,KAAkB;AACxD,gBAAIJ,KAAJ,EAAW;AACTE,cAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,aAFD,MAEO;AACLL,cAAAA,oBAAoB,GAAGS,KAAvB;AACD;AACF,WAND;AAOD;AACF","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { assetManager, Material } from 'cc';\r\nimport { EDITOR } from 'cc/env';\r\nimport { isImporter } from '../Utils';\r\n\r\nlet _maskMaterial: Material | null = null;\r\nlet _maskCullingMaterial: Material | null = null;\r\n\r\nnamespace CubismResources {\r\n  export function getMaskMaterial(): Material | null {\r\n    return _maskMaterial;\r\n  }\r\n  export function getMaskCullingMaterial(): Material | null {\r\n    return _maskCullingMaterial;\r\n  }\r\n}\r\n\r\nexport default CubismResources;\r\n\r\nif (!EDITOR) {\r\n  assetManager.loadBundle('Live2DCubismBuiltinResource', (error, bundle) => {\r\n    if (error != null) {\r\n      console.error(error);\r\n    } else {\r\n      bundle.load<Material>('Materials/Mask', (error, asset) => {\r\n        if (error != null) {\r\n          console.error(error);\r\n        } else {\r\n          console.info('Initialize success.');\r\n          _maskMaterial = asset;\r\n        }\r\n      });\r\n      bundle.load<Material>('Materials/MaskCulling', (error, asset) => {\r\n        if (error != null) {\r\n          console.error(error);\r\n        } else {\r\n          _maskCullingMaterial = asset;\r\n        }\r\n      });\r\n    }\r\n  });\r\n} else {\r\n  if (!isImporter()) {\r\n    const mask = await Editor.Message.request(\r\n      'asset-db',\r\n      'query-uuid',\r\n      'db://live2d_cubismsdk_cocoscreator/resources/Materials/Mask.mtl'\r\n    );\r\n    const maskCulling = await Editor.Message.request(\r\n      'asset-db',\r\n      'query-uuid',\r\n      'db://live2d_cubismsdk_cocoscreator/resources/Materials/MaskCulling.mtl'\r\n    );\r\n    assetManager.loadAny(mask, null, (error, asset) => {\r\n      if (error) {\r\n        console.error(error);\r\n      } else {\r\n        _maskMaterial = asset;\r\n      }\r\n    });\r\n    assetManager.loadAny(maskCulling, null, (error, asset) => {\r\n      if (error) {\r\n        console.error(error);\r\n      } else {\r\n        _maskCullingMaterial = asset;\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}