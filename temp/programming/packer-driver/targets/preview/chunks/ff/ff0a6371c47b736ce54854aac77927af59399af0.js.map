{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismUserData3Json.ts"],"names":["CubismUserData3Json","CubismUserDataBody","CubismUserDataTargetType","JsonParseUtils","asNumber","asString","constructor","version","meta","SerializableMeta","DEFAULT","userData","loadFrom","userData3Json","json","parse","loadFromJson","loadFromJsonAsset","userData3JsonAsset","Version","instantiateFromJson","Meta","arrayedInstantiateFromJson","UserData","SerializableUserData","undefined","result","toBodyArray","targetType","userDataList","Array","i","length","body","id","value","ArtMesh","target","push","neverCheck","args","userDataCount","totalUserDataCount","copyWith","equals","other","strictEquals","UserDataCount","totalUserDataSize","TotalUserDataSize","Target","Id","Value"],"mappings":";;;6IAmBMA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;AAXCC,MAAAA,kB;;AACAC,MAAAA,wB;;AACAC,MAAAA,c;;;;;;;AAVP;AACA;AACA;AACA;AACA;AACA;;;OAOM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,O;;;AAEN;AACA;AACA;AACA;AACA;;AACML,MAAAA,mB,GAAN,MAAMA,mBAAN,CAA0B;AAChBM,QAAAA,WAAW,GAAG;AA4EtB;;AAEA;AA9EsB,eA+EfC,OA/Ee,GA+EG,CA/EH;;AAiFtB;AAjFsB,eAkFfC,IAlFe,GAkF8BR,mBAAmB,CAACS,gBAApB,CAAqCC,OAlFnE;;AAoFtB;AApFsB,eAqFfC,QArFe,GAqF+C,IArF/C;AAAE;AAExB;AACF;AACA;AACA;AACA;;;AACwB,eAARC,QAAQ,CAACC,aAAD,EAAoD;AACxE,cAAMC,IAAI,GAAG;AAAA;AAAA,gDAAeC,KAAf,CAAqBF,aAArB,CAAb;;AACA,cAAI,CAACC,IAAL,EAAW;AACT,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAKE,YAAL,CAAkBF,IAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACiC,eAAjBG,iBAAiB,CAACC,kBAAD,EAA4D;AACzF,cAAI,CAACA,kBAAkB,CAACJ,IAAxB,EAA8B;AAC5B,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAKE,YAAL,CAAkBE,kBAAkB,CAACJ,IAArC,CAAP;AACD;;AAEyB,eAAZE,YAAY,CAACF,IAAD,EAAY;AACpC,cAAMP,OAAO,GAAG;AAAA;AAAA,gDAAeH,QAAf,CAAwBU,IAAI,CAACK,OAA7B,CAAhB;AACA,cAAMX,IAAI,GAAGR,mBAAmB,CAACS,gBAApB,CAAqCW,mBAArC,CAAyDN,IAAI,CAACO,IAA9D,CAAb;AACA,cAAMV,QAAQ,GAAG;AAAA;AAAA,gDAAeW,0BAAf,CACfR,IAAI,CAACS,QADU,EAEfvB,mBAAmB,CAACwB,oBAApB,CAAyCJ,mBAF1B,CAAjB;;AAIA,cAAIb,OAAO,KAAKkB,SAAZ,IAAyBjB,IAAI,KAAKiB,SAAlC,IAA+Cd,QAAQ,KAAKc,SAAhE,EAA2E;AACzE,mBAAO,IAAP;AACD;;AACD,cAAMC,MAAM,GAAG,IAAI1B,mBAAJ,EAAf;AACA0B,UAAAA,MAAM,CAACnB,OAAP,GAAiBA,OAAjB;AACAmB,UAAAA,MAAM,CAAClB,IAAP,GAAcA,IAAd;AACAkB,UAAAA,MAAM,CAACf,QAAP,GAAkBA,QAAlB;AACA,iBAAOe,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACSC,QAAAA,WAAW,CAACC,UAAD,EAA6D;AAC7E,cAAMC,YAAY,GAAG,IAAIC,KAAJ,EAArB;;AAEA,cAAI,KAAKnB,QAAL,IAAiB,IAArB,EAA2B;AACzB,iBAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpB,QAAL,CAAcqB,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,kBAAME,IAAI,GAAG;AAAA;AAAA,4DAAuB;AAClCC,gBAAAA,EAAE,EAAE,KAAKvB,QAAL,CAAcoB,CAAd,EAAiBG,EADa;AAElCC,gBAAAA,KAAK,EAAE,KAAKxB,QAAL,CAAcoB,CAAd,EAAiBI;AAFU,eAAvB,CAAb;;AAIA,sBAAQP,UAAR;AACE,qBAAK;AAAA;AAAA,0EAAyBQ,OAA9B;AAAuC;AACrC;AACA,wBAAI,KAAKzB,QAAL,CAAcoB,CAAd,EAAiBM,MAAjB,IAA2B,SAA/B,EAA0C;AACxCR,sBAAAA,YAAY,CAACS,IAAb,CAAkBL,IAAlB;AACD;;AACD;AACD;;AACD;AAAS;AACP,wBAAMM,UAAiB,GAAGX,UAA1B;AACA;AACD;AAXH;AAaD;AACF;;AACD,iBAAOC,YAAP;AACD,SA3EuB,CAwFxB;;;AAxFwB,O,EA2F1B;;;AAIS,cAAMpB,gBAAN,CAAgE;AAM9DH,UAAAA,WAAW,CAChBkC,IADgB,EAKhB;AAAA;;AAAA,gBAJAA,IAIA;AAJAA,cAAAA,IAIA,GADI,EACJ;AAAA;;AAVF;AAUE,iBATcC,aASd;;AARF;AAQE,iBAPcC,kBAOd;AACA,iBAAKD,aAAL,0BAAqBD,IAAI,CAACC,aAA1B,kCAA2C,CAA3C;AACA,iBAAKC,kBAAL,4BAA0BF,IAAI,CAACE,kBAA/B,oCAAqD,CAArD;AACD;;AAEMC,UAAAA,QAAQ,CACbH,IADa,EAKK;AAAA;;AAAA,gBAJlBA,IAIkB;AAJlBA,cAAAA,IAIkB,GADd,EACc;AAAA;;AAClB,mBAAO,IAAI/B,gBAAJ,CAAqB;AAC1BgC,cAAAA,aAAa,0BAAED,IAAI,CAACC,aAAP,mCAAwB,KAAKA,aADhB;AAE1BC,cAAAA,kBAAkB,4BAAEF,IAAI,CAACE,kBAAP,qCAA6B,KAAKA;AAF1B,aAArB,CAAP;AAID;;AAEME,UAAAA,MAAM,CAACC,KAAD,EAAmC;AAC9C,mBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKJ,aAAL,IAAsBI,KAAK,CAACJ,aAA5B,IACE,KAAKC,kBAAL,IAA2BG,KAAK,CAACH,kBAHvC;AAID;;AACMI,UAAAA,YAAY,CAACD,KAAD,EAAmC;AACpD,mBAAO,SAASA,KAAhB;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACqC,iBAAnBzB,mBAAmB,CAACN,IAAD,EAA0C;AACzE,gBAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,qBAAOW,SAAP;AACD;;AACD,gBAAMgB,aAAa,GAAGrC,QAAQ,CAACU,IAAI,CAACiC,aAAN,CAA9B;AACA,gBAAMC,iBAAiB,GAAG5C,QAAQ,CAACU,IAAI,CAACmC,iBAAN,CAAlC;;AACA,gBAAIR,aAAa,KAAKhB,SAAlB,IAA+BuB,iBAAiB,KAAKvB,SAAzD,EAAoE;AAClE,qBAAOA,SAAP;AACD;;AACD,mBAAO,IAAIhB,gBAAJ,CAAqB;AAC1BgC,cAAAA,aAAa,EAAEA,aADW;AAE1BC,cAAAA,kBAAkB,EAAEM;AAFM,aAArB,CAAP;AAID;;AA1DoE;;;;AA8DhE,cAAMxB,oBAAN,CAAwE;AAQtElB,UAAAA,WAAW,CAChBkC,IADgB,EAMhB;AAAA;;AAAA,gBALAA,IAKA;AALAA,cAAAA,IAKA,GADI,EACJ;AAAA;;AAbF;AAaE,iBAZcH,MAYd;;AAXF;AAWE,iBAVcH,EAUd;;AATF;AASE,iBARcC,KAQd;AACA,iBAAKE,MAAL,mBAAcG,IAAI,CAACH,MAAnB,2BAA6B,EAA7B;AACA,iBAAKH,EAAL,eAAUM,IAAI,CAACN,EAAf,uBAAqB,EAArB;AACA,iBAAKC,KAAL,kBAAaK,IAAI,CAACL,KAAlB,0BAA2B,EAA3B;AACD;;AAEMS,UAAAA,MAAM,CAACC,KAAD,EAAuC;AAClD,mBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKR,MAAL,IAAeQ,KAAK,CAACR,MAArB,IAA+B,KAAKH,EAAL,IAAWW,KAAK,CAACX,EAAhD,IAAsD,KAAKC,KAAL,IAAcU,KAAK,CAACV,KAF9E;AAGD;;AAEMW,UAAAA,YAAY,CAACD,KAAD,EAAuC;AACxD,mBAAO,SAASA,KAAhB;AACD;;AAEMF,UAAAA,QAAQ,CACbH,IADa,EAMS;AAAA;;AAAA,gBALtBA,IAKsB;AALtBA,cAAAA,IAKsB,GADlB,EACkB;AAAA;;AACtB,mBAAO,IAAIhB,oBAAJ,CAAyB;AAC9Ba,cAAAA,MAAM,mBAAEG,IAAI,CAACH,MAAP,4BAAiB,KAAKA,MADE;AAE9BH,cAAAA,EAAE,eAAEM,IAAI,CAACN,EAAP,wBAAa,KAAKA,EAFU;AAG9BC,cAAAA,KAAK,kBAAEK,IAAI,CAACL,KAAP,2BAAgB,KAAKA;AAHI,aAAzB,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqC,iBAAnBf,mBAAmB,CAACN,IAAD,EAA8C;AAC7E,gBAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,qBAAOW,SAAP;AACD;;AACD,gBAAMY,MAAM,GAAGhC,QAAQ,CAACS,IAAI,CAACoC,MAAN,CAAvB;AACA,gBAAMhB,EAAE,GAAG7B,QAAQ,CAACS,IAAI,CAACqC,EAAN,CAAnB;AACA,gBAAMhB,KAAK,GAAG9B,QAAQ,CAACS,IAAI,CAACsC,KAAN,CAAtB;;AACA,gBAAIf,MAAM,KAAKZ,SAAX,IAAwBS,EAAE,KAAKT,SAA/B,IAA4CU,KAAK,KAAKV,SAA1D,EAAqE;AACnE,qBAAOA,SAAP;AACD;;AACD,mBAAO,IAAID,oBAAJ,CAAyB;AAAEa,cAAAA,MAAM,EAAEA,MAAV;AAAkBH,cAAAA,EAAE,EAAEA,EAAtB;AAA0BC,cAAAA,KAAK,EAAEA;AAAjC,aAAzB,CAAP;AACD;;AA/D4E;;;;;AAmEtE,cAAMzB,OAAO,mCAAG,IAAIc,oBAAJ,EAAhB;WADQA,oB,KAAAA,oB,wBAAAA,oB,0BAAAA,oB;;;AAKR,cAAMd,OAAO,+BAAG,IAAID,gBAAJ,EAAhB;WADQA,gB,KAAAA,gB,wBAAAA,gB,0BAAAA,gB;SAtITT,mB,KAAAA,mB,SA2IV;;;yBAEeA,mB","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { JsonAsset } from 'cc';\r\nimport CubismUserDataBody from '../UserData/CubismUserDataBody';\r\nimport CubismUserDataTargetType from '../UserData/CubismUserDataTargetType';\r\nimport JsonParseUtils from './JsonParseUtils';\r\nimport type IStructLike from '../../IStructLike';\r\nconst { asNumber, asString } = JsonParseUtils;\r\n\r\n/**\r\n * Handles user data from cdi3.json.\r\n *\r\n * **Sealed class.**\r\n */\r\nclass CubismUserData3Json {\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Loads a cdi3.json asset.\r\n   * @param userData3Json  cdi3.json to deserialize.\r\n   * @returns Deserialized cdi3.json on success; null otherwise.\r\n   */\r\n  public static loadFrom(userData3Json: string): CubismUserData3Json | null {\r\n    const json = JsonParseUtils.parse(userData3Json);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n    return this.loadFromJson(json);\r\n  }\r\n\r\n  /**\r\n   * Loads a cdi3.json asset.\r\n   * @param userData3JsonAsset cdi3.json to deserialize.\r\n   * @returns Deserialized cdi3.json on success; null otherwise.\r\n   */\r\n  public static loadFromJsonAsset(userData3JsonAsset: JsonAsset): CubismUserData3Json | null {\r\n    if (!userData3JsonAsset.json) {\r\n      return null;\r\n    }\r\n    return this.loadFromJson(userData3JsonAsset.json);\r\n  }\r\n\r\n  public static loadFromJson(json: any) {\r\n    const version = JsonParseUtils.asNumber(json.Version);\r\n    const meta = CubismUserData3Json.SerializableMeta.instantiateFromJson(json.Meta);\r\n    const userData = JsonParseUtils.arrayedInstantiateFromJson(\r\n      json.UserData,\r\n      CubismUserData3Json.SerializableUserData.instantiateFromJson\r\n    );\r\n    if (version === undefined || meta === undefined || userData === undefined) {\r\n      return null;\r\n    }\r\n    const result = new CubismUserData3Json();\r\n    result.version = version;\r\n    result.meta = meta;\r\n    result.userData = userData;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Makes CubismUserDataBody array that was selected by CubismUserDataTargetType.\r\n   * @param targetType Target object type.\r\n   * @returns CubismUserDataBody array. Selected by CubismUserDataTargetType.\r\n   */\r\n  public toBodyArray(targetType: CubismUserDataTargetType): CubismUserDataBody[] {\r\n    const userDataList = new Array<CubismUserDataBody>();\r\n\r\n    if (this.userData != null) {\r\n      for (let i = 0; i < this.userData.length; i++) {\r\n        const body = new CubismUserDataBody({\r\n          id: this.userData[i].id,\r\n          value: this.userData[i].value,\r\n        });\r\n        switch (targetType) {\r\n          case CubismUserDataTargetType.ArtMesh: {\r\n            // Only drawables.\r\n            if (this.userData[i].target == 'ArtMesh') {\r\n              userDataList.push(body);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            const neverCheck: never = targetType;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return userDataList;\r\n  }\r\n\r\n  // #region Json Data\r\n\r\n  /** Json file format version. */\r\n  public version: number = 0;\r\n\r\n  /** Additional data describing physics. */\r\n  public meta: CubismUserData3Json.SerializableMeta = CubismUserData3Json.SerializableMeta.DEFAULT;\r\n\r\n  /** Array of user data. */\r\n  public userData: CubismUserData3Json.SerializableUserData[] | null = null;\r\n\r\n  // #endregion\r\n}\r\n\r\n// #region Json Helpers\r\n\r\nnamespace CubismUserData3Json {\r\n  /** Additional data describing user data. (struct) */\r\n  export class SerializableMeta implements IStructLike<SerializableMeta> {\r\n    /** Number of user data. */\r\n    public readonly userDataCount: number;\r\n    /** Total number of user data. */\r\n    public readonly totalUserDataCount: number;\r\n\r\n    public constructor(\r\n      args: {\r\n        userDataCount?: number;\r\n        totalUserDataCount?: number;\r\n      } = {}\r\n    ) {\r\n      this.userDataCount = args.userDataCount ?? 0;\r\n      this.totalUserDataCount = args.totalUserDataCount ?? 0;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        userDataCount?: number;\r\n        totalUserDataCount?: number;\r\n      } = {}\r\n    ): SerializableMeta {\r\n      return new SerializableMeta({\r\n        userDataCount: args.userDataCount ?? this.userDataCount,\r\n        totalUserDataCount: args.totalUserDataCount ?? this.totalUserDataCount,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializableMeta): boolean {\r\n      return this === other\r\n        ? true\r\n        : this.userDataCount == other.userDataCount &&\r\n            this.totalUserDataCount == other.totalUserDataCount;\r\n    }\r\n    public strictEquals(other: SerializableMeta): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - UserDataCount\r\n     * - TotalUserDataSize\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableMeta | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const userDataCount = asNumber(json.UserDataCount);\r\n      const totalUserDataSize = asNumber(json.TotalUserDataSize);\r\n      if (userDataCount === undefined || totalUserDataSize === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableMeta({\r\n        userDataCount: userDataCount,\r\n        totalUserDataCount: totalUserDataSize,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** User data. (struct) */\r\n  export class SerializableUserData implements IStructLike<SerializableUserData> {\r\n    /** Type of target object. */\r\n    public readonly target: string;\r\n    /** Name of target object. */\r\n    public readonly id: string;\r\n    /** Value. */\r\n    public readonly value: string;\r\n\r\n    public constructor(\r\n      args: {\r\n        target?: string;\r\n        id?: string;\r\n        value?: string;\r\n      } = {}\r\n    ) {\r\n      this.target = args.target ?? '';\r\n      this.id = args.id ?? '';\r\n      this.value = args.value ?? '';\r\n    }\r\n\r\n    public equals(other: SerializableUserData): boolean {\r\n      return this === other\r\n        ? true\r\n        : this.target == other.target && this.id == other.id && this.value == other.value;\r\n    }\r\n\r\n    public strictEquals(other: SerializableUserData): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        target?: string;\r\n        id?: string;\r\n        value?: string;\r\n      } = {}\r\n    ): SerializableUserData {\r\n      return new SerializableUserData({\r\n        target: args.target ?? this.target,\r\n        id: args.id ?? this.id,\r\n        value: args.value ?? this.value,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Target\r\n     * - Id\r\n     * - Value\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableUserData | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const target = asString(json.Target);\r\n      const id = asString(json.Id);\r\n      const value = asString(json.Value);\r\n      if (target === undefined || id === undefined || value === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableUserData({ target: target, id: id, value: value });\r\n    }\r\n  }\r\n\r\n  export namespace SerializableUserData {\r\n    export const DEFAULT = new SerializableUserData();\r\n  }\r\n\r\n  export namespace SerializableMeta {\r\n    export const DEFAULT = new SerializableMeta();\r\n  }\r\n}\r\n\r\n// #endregion\r\n\r\nexport default CubismUserData3Json;\r\n"]}