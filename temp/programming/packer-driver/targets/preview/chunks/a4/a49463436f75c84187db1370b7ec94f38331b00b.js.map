{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Expression/CubismPlayingExpression.ts"],"names":["CCFloat","_decorator","ArrayExtensionMethods","CubismParameter","CubismParameterBlendMode","ccclass","property","CubismPlayingExpression","serializable","visible","type","range","create","model","expressionData","ret","fadeInTime","fadeOutTime","weight","expressionUserTime","expressionEndTime","parameterCount","parameters","length","destinations","Array","value","blend","console","error","i","findByIdFromParameters","id"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CCFloat, CCString, _decorator } from 'cc';\r\nimport ArrayExtensionMethods from '../../Core/ArrayExtensionMethods';\r\nimport CubismParameter from '../../Core/CubismParameter';\r\nimport CubismParameterBlendMode from '../CubismParameterBlendMode';\r\nimport type CubismModel from '../../Core/CubismModel';\r\nimport type CubismExpressionData from './CubismExpressionData';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/** The cubism expression data. */\r\n@ccclass('CubismPlayingExpression')\r\nexport default class CubismPlayingExpression {\r\n  //#region variable\r\n\r\n  /** Expression type. */\r\n  @property({ serializable: true, visible: true })\r\n  public type: string = '';\r\n\r\n  /** Expression fade in time. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public fadeInTime: number = 0;\r\n\r\n  /** Expression fade out time. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public fadeOutTime: number = 0;\r\n\r\n  /** Expression Weight. */\r\n  @property({ type: CCFloat, serializable: true, visible: true, range: [0.0, 1.0, 0.01] })\r\n  public weight: number = 0;\r\n\r\n  /** Expression user time. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public expressionUserTime: number = 0;\r\n\r\n  /** Expression end time. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public expressionEndTime: number = 0;\r\n\r\n  /** Expression parameters cache. */\r\n  @property({ type: [CubismParameter], serializable: true, visible: true })\r\n  public destinations: (CubismParameter | null)[] = new Array(0);\r\n\r\n  /** Expression parameter value. */\r\n  @property({ type: [CCFloat], serializable: true, visible: true })\r\n  public value: number[] = new Array();\r\n\r\n  /** Expression parameter blend mode. */\r\n  @property({ type: [CubismParameterBlendMode], serializable: true, visible: true })\r\n  public blend: CubismParameterBlendMode[] = new Array();\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Initialize expression data from {@link CubismExpressionData}.\r\n   * @param model model.\r\n   * @param expressionData Source.\r\n   * @returns\r\n   */\r\n  public static create(\r\n    model: CubismModel,\r\n    expressionData: CubismExpressionData\r\n  ): CubismPlayingExpression | null {\r\n    // Fail silently...\r\n    if (model == null || expressionData == null) {\r\n      return null;\r\n    }\r\n\r\n    const ret = new CubismPlayingExpression();\r\n\r\n    ret.type = expressionData.type;\r\n\r\n    ret.fadeInTime = expressionData.fadeInTime < 0.0 ? 1.0 : expressionData.fadeInTime;\r\n\r\n    ret.fadeOutTime = expressionData.fadeOutTime < 0.0 ? 1.0 : expressionData.fadeOutTime;\r\n\r\n    ret.weight = 0.0;\r\n    ret.expressionUserTime = 0.0;\r\n    ret.expressionEndTime = 0.0;\r\n\r\n    let parameterCount = expressionData.parameters.length;\r\n    ret.destinations = new Array<CubismParameter>(parameterCount);\r\n    ret.value = new Array<number>(parameterCount);\r\n    ret.blend = new Array<CubismParameterBlendMode>(parameterCount);\r\n\r\n    if (model.parameters == null) {\r\n      console.error('CubismPlayingExpression.create(): parameters is null.');\r\n      return null;\r\n    }\r\n    for (let i = 0; i < parameterCount; i++) {\r\n      ret.destinations[i] = ArrayExtensionMethods.findByIdFromParameters(\r\n        model.parameters,\r\n        expressionData.parameters[i].id\r\n      );\r\n      ret.value[i] = expressionData.parameters[i].value;\r\n      ret.blend[i] = expressionData.parameters[i].blend;\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n"]}