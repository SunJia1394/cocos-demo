{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismMoc.ts"],"names":["Asset","_decorator","Moc","ccclass","property","CubismMoc","serializable","visible","_bytes","hasMocConsistency","mocByte","createFrom","moc3","moc","bytes","value","_nativeAsset","unmanagedMoc","_unmanagedMoc","isRevived","acquireUnmanagedMoc","referenceCount","revive","releaseUnmanagedMoc","_release","byteLength","fromArrayBuffer","validate"],"mappings":";;;;;;;;;;;;;;;;AAOSA,MAAAA,K,OAAAA,K;AAAOC,MAAAA,U,OAAAA,U;;AACPC,MAAAA,G,gBAAAA,G;;;;AART;AACA;AACA;AACA;AACA;AACA;;;;;OAIM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;AAE9B;AACA;AACA;AACA;AACA;;yBAEqBI,S,WADpBF,OAAO,CAAC,WAAD,C,UA6CLC,QAAQ,CAAC;AAAEE,QAAAA,YAAY,EAAE,KAAhB;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OAAD,C,UASRH,QAAQ,CAAC;AAAEE,QAAAA,YAAY,EAAE,KAAhB;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OAAD,C,2BAtDX,MACqBF,SADrB,SACuCL,KADvC,CAC6C;AAAA;AAAA;AAuB3C;;AAEA;AAzB2C,eA0BnCQ,MA1BmC;;AAAA;;AAAA;AAAA;;AAC3C;;AAEA;AACF;AACA;AACA;AACA;AACSC,QAAAA,iBAAiB,CAACC,OAAD,EAAgC;AACtD,iBAAOR,GAAG,CAACO,iBAAJ,CAAsBC,OAAtB,MAAmC,CAAnC,GAAuC,IAAvC,GAA8C,KAArD;AACD;AAED;AACF;AACA;AACA;AACA;;;AAC0B,eAAVC,UAAU,CAACC,IAAD,EAA+B;AACrD,cAAIC,GAAG,GAAG,IAAIR,SAAJ,EAAV;AACAQ,UAAAA,GAAG,CAACL,MAAJ,GAAaI,IAAb;AACA,iBAAOC,GAAP;AACD;;AAOD;AACgB,YAALC,KAAK,GAAG;AACjB,iBAAO,KAAKN,MAAZ;AACD;;AACgB,YAALM,KAAK,CAACC,KAAD,EAAQ;AACvB,eAAKP,MAAL,GAAcO,KAAd;AACD;AAED;;;AACuB,YAAZC,YAAY,GAAgB;AACrC,iBAAO,KAAKR,MAAZ;AACD;;AACuB,YAAZQ,YAAY,CAACD,KAAD,EAAqB;AAC3C,eAAKP,MAAL,GAAcO,KAAd;AACD;;AAIuB,YAAZE,YAAY,GAAG;AACzB,iBAAO,KAAKC,aAAZ;AACD;;AACuB,YAAZD,YAAY,CAACF,KAAD,EAAQ;AAC9B,eAAKG,aAAL,GAAqBH,KAArB;AACD;;AAKD;AACoB,YAATI,SAAS,GAAY;AAC9B,iBAAO,KAAKF,YAAL,IAAqB,IAA5B;AACD;AAED;AACF;AACA;AACA;;;AACSG,QAAAA,mBAAmB,GAAe;AACvC,eAAKC,cAAL;AAEA,eAAKC,MAAL;AAEA,iBAAO,KAAKL,YAAZ;AACD;AAED;;;AACOM,QAAAA,mBAAmB,GAAS;AACjC,eAAKF,cAAL,GADiC,CAEjC;;AACA,cAAI,KAAKA,cAAL,IAAuB,CAA3B,EAA8B;AAAA;;AAC5B,uCAAKJ,YAAL,wCAAmBO,QAAnB;AACA,iBAAKP,YAAL,GAAoB,IAApB;AACD,WAHD,CAIA;AAJA,eAKK,IAAI,KAAKI,cAAL,GAAsB,CAA1B,EAA6B;AAChC,iBAAKA,cAAL,GAAsB,CAAtB;AACD;AACF;AAED;;;AACQC,QAAAA,MAAM,GAAS;AACrB;AACA,cAAI,KAAKH,SAAT,EAAoB;AAClB;AACD,WAJoB,CAMrB;;;AACA,cAAI,KAAKL,KAAL,CAAWW,UAAX,IAAyB,CAA7B,EAAgC;AAC9B;AACD,WAToB,CAWrB;;;AACA,eAAKR,YAAL,GAAoBf,GAAG,CAACwB,eAAJ,CAAoB,KAAKZ,KAAzB,CAApB;AACD;;AAEMa,QAAAA,QAAQ,GAAG;AAChB,iBAAO,CAAC,CAAC,KAAKnB,MAAd;AACD;;AAzG0C,O;;;;;iBA6CP,I;;;;;;;iBASH,C","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Asset, _decorator } from 'cc';\r\nimport { Moc } from '../CubismCore';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Cubism moc asset.\r\n *\r\n * **Sealed class.**\r\n */\r\n@ccclass('CubismMoc')\r\nexport default class CubismMoc extends Asset {\r\n  // #region Factory Methods\r\n\r\n  /**\r\n   * Checks consistency of a moc.\r\n   * @param mocByte Source.\r\n   * @returns `true` if Moc is valid; `false` otherwise.\r\n   */\r\n  public hasMocConsistency(mocByte: ArrayBuffer): boolean {\r\n    return Moc.hasMocConsistency(mocByte) === 1 ? true : false;\r\n  }\r\n\r\n  /**\r\n   * Creates a CubismMoc asset from raw bytes.\r\n   * @param moc3 Source.\r\n   * @returns Instance.\r\n   */\r\n  public static createFrom(moc3: ArrayBuffer): CubismMoc {\r\n    let moc = new CubismMoc();\r\n    moc._bytes = moc3;\r\n    return moc;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /** Bytes backing field. */\r\n  private _bytes!: ArrayBuffer;\r\n\r\n  /** Raw moc bytes. */\r\n  public get bytes() {\r\n    return this._bytes;\r\n  }\r\n  private set bytes(value) {\r\n    this._bytes = value;\r\n  }\r\n\r\n  /** Raw moc bytes. */\r\n  public get _nativeAsset(): ArrayBuffer {\r\n    return this._bytes;\r\n  }\r\n  private set _nativeAsset(value: ArrayBuffer) {\r\n    this._bytes = value;\r\n  }\r\n\r\n  @property({ serializable: false, visible: false })\r\n  private _unmanagedMoc: Moc | null = null;\r\n  private get unmanagedMoc() {\r\n    return this._unmanagedMoc;\r\n  }\r\n  private set unmanagedMoc(value) {\r\n    this._unmanagedMoc = value;\r\n  }\r\n\r\n  @property({ serializable: false, visible: false })\r\n  private referenceCount: number = 0;\r\n\r\n  // True if instance is revived.\r\n  public get isRevived(): boolean {\r\n    return this.unmanagedMoc != null;\r\n  }\r\n\r\n  /**\r\n   * Acquires native handle.\r\n   * @returns Valid handle on success; IntPtr.Zero otherwise.\r\n   */\r\n  public acquireUnmanagedMoc(): Moc | null {\r\n    this.referenceCount++;\r\n\r\n    this.revive();\r\n\r\n    return this.unmanagedMoc;\r\n  }\r\n\r\n  /** Releases native handle. */\r\n  public releaseUnmanagedMoc(): void {\r\n    this.referenceCount--;\r\n    // Release instance of unmanaged moc in case the instance isn't referenced any longer.\r\n    if (this.referenceCount == 0) {\r\n      this.unmanagedMoc?._release();\r\n      this.unmanagedMoc = null;\r\n    }\r\n    // Deal with invalid reference counts.\r\n    else if (this.referenceCount < 0) {\r\n      this.referenceCount = 0;\r\n    }\r\n  }\r\n\r\n  /** Revives instance without acquiring it. */\r\n  private revive(): void {\r\n    // Return if already revived.\r\n    if (this.isRevived) {\r\n      return;\r\n    }\r\n\r\n    // Return if no bytes are available.\r\n    if (this.bytes.byteLength <= 0) {\r\n      return;\r\n    }\r\n\r\n    // Try revive.\r\n    this.unmanagedMoc = Moc.fromArrayBuffer(this.bytes);\r\n  }\r\n\r\n  public validate() {\r\n    return !!this._bytes;\r\n  }\r\n}\r\n"]}