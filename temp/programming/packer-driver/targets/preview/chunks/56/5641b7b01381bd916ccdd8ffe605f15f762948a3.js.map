{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskTexture.ts"],"names":["SourcesItem","Asset","assetManager","CCInteger","Game","game","RenderTexture","_decorator","CubismMaskCommandBuffer","CubismMaskTilePool","ArrayExtensions","isImporter","MathExtensions","CubismMaskTile","EDITOR","ccclass","property","CubismMaskTexture","type","serializable","visible","getTextureReference","renderTexture","initGlobalMaskTexture","once","EVENT_GAME_INITED","loadBundle","error","bundle","console","load","asset","globalMaskTexture","_globalMaskTexture","size","_size","value","isPowerOfTwo","refreshRenderTexture","channels","subdivisions","_subdivisions","tilePool","_tilePool","_renderTexture","sources","_sources","isRevived","containsSources","length","addSource","source","tryRevive","Array","findIndex","index","obj","warn","tiles","acquireTiles","getNecessaryTileCount","item","push","setTiles","removeSource","itemIndex","returnTiles","splice","reinitializeSources","i","copyWith","initialize","width","height","name","onLoaded","key","Symbol","for","global","globalThis","reviveInEditor","info","destroy","ret","addToCommandBuffer","buffer","constructor","undefined","generateCubismMaskTexture","args","equals","other","isEquals","strictEquals","maskTex","Editor","Message","request","loadAny"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Asset, assetManager, CCInteger, Game, game, RenderTexture, _decorator } from 'cc';\r\nimport CubismMaskCommandBuffer from './CubismMaskCommandBuffer';\r\nimport CubismMaskTilePool from './CubismMaskTilePool';\r\nimport { ArrayExtensions, isImporter, MathExtensions } from '../../Utils';\r\nimport CubismMaskTile from './CubismMaskTile';\r\nimport type ICubismMaskTextureCommandSource from './ICubismMaskTextureCommandSource';\r\nimport type ICubismMaskCommandSource from './ICubismMaskCommandSource';\r\nimport type IStructLike from '../../IStructLike';\r\nimport { EDITOR } from 'cc/env';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Texture for rendering masks.\r\n *\r\n * ScriptableObject\r\n * [CreateAssetMenu(menuName = \"Live2D Cubism/Mask Texture\")]\r\n */\r\n@ccclass('CubismMaskTexture')\r\nexport default class CubismMaskTexture extends Asset implements ICubismMaskCommandSource {\r\n  // #region Conversion\r\n\r\n  /**\r\n   * Converts a CubismMaskTexture to a Texture.\r\n   * @returns Value to convert.\r\n   */\r\n  public getTextureReference() {\r\n    return this.renderTexture;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  public static initGlobalMaskTexture() {\r\n    game.once(Game.EVENT_GAME_INITED, () => {\r\n      assetManager.loadBundle('Live2DCubismBuiltinResource', (error, bundle) => {\r\n        if (error != null) {\r\n          console.error(error);\r\n        } else {\r\n          bundle.load<CubismMaskTexture>('GlobalMaskTexture', (error, asset) => {\r\n            if (error != null) {\r\n              console.error(error);\r\n            } else {\r\n              // CubismMaskTexture._globalMaskTexture = asset;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private static _globalMaskTexture: CubismMaskTexture | null = null;\r\n\r\n  /** The global mask texture. */\r\n  public static get globalMaskTexture(): CubismMaskTexture | null {\r\n    return CubismMaskTexture._globalMaskTexture;\r\n  }\r\n\r\n  /** Size backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: false })\r\n  private _size: number = 1024;\r\n\r\n  /** Texture size in pixels. */\r\n  public get size() {\r\n    return this._size;\r\n  }\r\n  public set size(value) {\r\n    // Return early if same value given.\r\n    if (value == this._size) {\r\n      return;\r\n    }\r\n    // Fail silently if not power-of-two.\r\n    if (!MathExtensions.isPowerOfTwo(value)) {\r\n      return;\r\n    }\r\n    // Apply changes.\r\n    this._size = value;\r\n    this.refreshRenderTexture();\r\n  }\r\n\r\n  /** Channel count. */\r\n  public get channels(): number {\r\n    return 4;\r\n  }\r\n\r\n  /** Subdivisions backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: false })\r\n  private _subdivisions: number = 3;\r\n\r\n  /** Subdivision level. */\r\n  public get subdivisions() {\r\n    return this._subdivisions;\r\n  }\r\n  public set subdivisions(value) {\r\n    if (value == this._subdivisions) {\r\n      return;\r\n    }\r\n    // Apply changes.\r\n    this._subdivisions = value;\r\n    this.refreshRenderTexture();\r\n  }\r\n\r\n  private _tilePool: CubismMaskTilePool | null = null;\r\n  /** Tile pool 'allocator'. */\r\n  private get tilePool() {\r\n    return this._tilePool;\r\n  }\r\n  private set tilePool(value) {\r\n    this._tilePool = value;\r\n  }\r\n\r\n  /** RenderTexture backing field. */\r\n  private _renderTexture: RenderTexture | null = null;\r\n\r\n  /** RenderTexture to draw on. */\r\n  private get renderTexture(): RenderTexture | null {\r\n    if (this._renderTexture == null) {\r\n      this.refreshRenderTexture();\r\n    }\r\n    return this._renderTexture;\r\n  }\r\n  private set renderTexture(value: RenderTexture | null) {\r\n    this._renderTexture = value;\r\n  }\r\n\r\n  private _sources = new Array<SourcesItem>(0);\r\n  /** Sources. */\r\n  private get sources() {\r\n    return this._sources;\r\n  }\r\n  private set sources(value) {\r\n    this._sources = value;\r\n  }\r\n\r\n  /** True if instance is revived. */\r\n  private get isRevived(): boolean {\r\n    return this.tilePool != null;\r\n  }\r\n\r\n  /** True if instance contains any sources. */\r\n  private get containsSources(): boolean {\r\n    return this.sources != null && this.sources.length > 0;\r\n  }\r\n\r\n  // #region Interface For ICubismMaskSources\r\n\r\n  /**\r\n   * Add source of masks for drawing.\r\n   * @param source\r\n   */\r\n  public addSource(source: ICubismMaskTextureCommandSource): void {\r\n    // Make sure instance is valid.\r\n    this.tryRevive();\r\n    // Initialize container if necessary.\r\n    if (this.sources == null) {\r\n      this.sources = new Array<SourcesItem>();\r\n    }\r\n    // Return early if source already exists.\r\n    else if (this.sources.findIndex((value, index, obj) => value.source == source) != -1) {\r\n      return;\r\n    }\r\n    // Register source.\r\n    if (this.tilePool == null) {\r\n      console.warn('CubismMaskTexture.tilePool is null.');\r\n      return;\r\n    }\r\n    const tiles = this.tilePool.acquireTiles(source.getNecessaryTileCount());\r\n    if (tiles == null) {\r\n      console.warn('CubismMaskTexture.tilePool.acquireTiles() failed.');\r\n      return;\r\n    }\r\n    const item = new SourcesItem({ source: source, tiles: tiles });\r\n    this.sources.push(item);\r\n    // Apply tiles to source.\r\n    source.setTiles(item.tiles);\r\n  }\r\n\r\n  /**\r\n   * Remove source of masks\r\n   * @param source\r\n   */\r\n  public removeSource(source: ICubismMaskTextureCommandSource): void {\r\n    // Return early if empty.\r\n    if (!this.containsSources) {\r\n      return;\r\n    }\r\n    const itemIndex = this.sources.findIndex((value, index, obj) => {\r\n      return value.source == source;\r\n    });\r\n    // Return if source is invalid.\r\n    if (itemIndex == -1) {\r\n      return;\r\n    }\r\n    // Return tiles and deregister source.\r\n    if (this.tilePool == null) {\r\n      console.warn('CubismMaskTexture.tilePool is null.');\r\n      return;\r\n    }\r\n    this.tilePool.returnTiles(this.sources[itemIndex].tiles);\r\n    this.sources.splice(itemIndex, 1);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  private tryRevive(): void {\r\n    // Return early if already revived.\r\n    if (this.isRevived) {\r\n      return;\r\n    }\r\n    this.refreshRenderTexture();\r\n  }\r\n\r\n  private reinitializeSources(): void {\r\n    // Reallocate tiles if sources exist.\r\n    if (this.containsSources) {\r\n      if (this.tilePool == null) {\r\n        console.warn('CubismMaskTexture.tilePool is null.');\r\n        return;\r\n      }\r\n      for (let i = 0; i < this.sources.length; i++) {\r\n        let source = this.sources[i];\r\n        if (source.source == null) {\r\n          console.warn('CubismMaskTexture.sources[i].source is null.');\r\n          return;\r\n        }\r\n        const tiles = this.tilePool.acquireTiles(source.source.getNecessaryTileCount());\r\n        if (tiles == null) {\r\n          console.warn('CubismMaskTexture.tilePool.acquireTiles() failed.');\r\n          return;\r\n        }\r\n        source.source.setTiles(tiles);\r\n        this.sources[i] = source.copyWith({ source: source.source, tiles: tiles });\r\n      }\r\n    }\r\n  }\r\n\r\n  private refreshRenderTexture(): void {\r\n    // Recreate render texture.\r\n    this._renderTexture = new RenderTexture();\r\n    this._renderTexture.initialize({\r\n      width: this.size,\r\n      height: this.size,\r\n      name: 'CubismMaskTextureInstance',\r\n    });\r\n    // Recreate allocator.\r\n    this.tilePool = new CubismMaskTilePool(this.subdivisions, this.channels);\r\n    // Reinitialize sources.\r\n    this.reinitializeSources();\r\n  }\r\n\r\n  //#region Cocos Creator Event Handling\r\n\r\n  /** Initializes instance. */\r\n  public onLoaded(): void {\r\n    super.onLoaded();\r\n    CubismMaskTexture._globalMaskTexture = this;\r\n    if (EDITOR) {\r\n      const key = Symbol.for('CubismMaskTexture.globalMaskTexture');\r\n      const global = globalThis as unknown as {\r\n        [key]: CubismMaskTexture | undefined;\r\n      };\r\n      global[key] = this;\r\n    }\r\n\r\n    CubismMaskCommandBuffer.addSource(this);\r\n  }\r\n\r\n  public static reviveInEditor(): void {\r\n    console.info('reviveInEditor');\r\n    if (EDITOR) {\r\n      const key = Symbol.for('CubismMaskTexture.globalMaskTexture');\r\n      const global = globalThis as unknown as {\r\n        [key]: CubismMaskTexture | undefined;\r\n      };\r\n      if (global[key]) {\r\n        CubismMaskTexture._globalMaskTexture = global[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Finalizes instance. */\r\n  public destroy(): boolean {\r\n    CubismMaskTexture._globalMaskTexture = null;\r\n    CubismMaskCommandBuffer.removeSource(this);\r\n    const ret = super.destroy();\r\n    return ret;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  // #region ICubismMaskCommandSource\r\n\r\n  /**\r\n   * Called to enqueue source.\r\n   * @param buffer Buffer to enqueue in.\r\n   */\r\n  public addToCommandBuffer(buffer: CubismMaskCommandBuffer): void {\r\n    // Return early if empty.\r\n    if (!this.containsSources) {\r\n      return;\r\n    }\r\n    // Enqueue render target.\r\n    for (let i = 0; i < this.sources.length; i++) {\r\n      this.sources[i].source?.addToCommandBuffer(buffer);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  private constructor(size?: number, subdivisions?: number) {\r\n    super();\r\n    // Parameters cannot be given during deserialization, so none of the parameters in the constructor may be present\r\n    // The build process removes the same data as the default value.\r\n    // So if no parameters are passed in and no data is restored, the default values on the class are used\r\n    if (size !== undefined) {\r\n      this._size = size;\r\n    }\r\n    if (subdivisions !== undefined) {\r\n      this._subdivisions = subdivisions;\r\n    }\r\n  }\r\n\r\n  public static generateCubismMaskTexture(\r\n    size: number = 512,\r\n    subdivisions: number = 3\r\n  ): CubismMaskTexture | null {\r\n    // Fail silently if not power-of-two.\r\n    if (!MathExtensions.isPowerOfTwo(size)) {\r\n      return null;\r\n    }\r\n    return new CubismMaskTexture(size, subdivisions);\r\n  }\r\n}\r\n\r\n// #region Source Item\r\n\r\n/** Source of masks and its tiles (struct) */\r\nclass SourcesItem implements IStructLike<SourcesItem> {\r\n  /** SourcesItem instance. */\r\n  public readonly source: ICubismMaskTextureCommandSource | null;\r\n  /** Tiles assigned to the instance. */\r\n  public readonly tiles: Array<CubismMaskTile>;\r\n\r\n  public constructor(\r\n    args: { source?: ICubismMaskTextureCommandSource | null; tiles?: Array<CubismMaskTile> } = {}\r\n  ) {\r\n    this.source = args.source ?? null;\r\n    this.tiles = args.tiles ?? new Array(0);\r\n  }\r\n\r\n  public copyWith(\r\n    args: { source?: ICubismMaskTextureCommandSource | null; tiles?: Array<CubismMaskTile> } = {}\r\n  ): SourcesItem {\r\n    return new SourcesItem({\r\n      source: args.source !== undefined ? args.source : this.source,\r\n      tiles: args.tiles ?? this.tiles,\r\n    });\r\n  }\r\n\r\n  public equals(other: SourcesItem): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.source === other.source &&\r\n          ArrayExtensions.isEquals(CubismMaskTile.isEquals, this.tiles, other.tiles);\r\n  }\r\n\r\n  public strictEquals(other: SourcesItem): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n// #endregion\r\n\r\n// 他の処理が実行される前に CubismMaskCommandBuffer を展開するため GlobalMaskTexture をロードします。\r\nif (!EDITOR) {\r\n  CubismMaskTexture.initGlobalMaskTexture();\r\n} else {\r\n  if (!isImporter()) {\r\n    const maskTex = await Editor.Message.request(\r\n      'asset-db',\r\n      'query-uuid',\r\n      'db://live2d_cubismsdk_cocoscreator/resources/GlobalMaskTexture.asset'\r\n    );\r\n    CubismMaskTexture.reviveInEditor();\r\n    if (!CubismMaskTexture.globalMaskTexture) {\r\n      console.info('loadAny');\r\n      assetManager.loadAny(maskTex, null, (error, asset: CubismMaskTexture) => {\r\n        if (error) {\r\n          console.error(error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}