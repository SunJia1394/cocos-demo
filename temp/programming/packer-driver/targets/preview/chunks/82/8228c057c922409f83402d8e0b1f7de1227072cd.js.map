{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/ObjectExtensionMethods.ts"],"names":["Component","Node","getInterface","self","isImplementsFunc","isNode","node","handlers","getComponents","filter","value","_index","_array","result","length","console","warn","toNullUnlessImplementsInterface","exposesInterface","implementsInterface","comp","some","ObjectExtensionMethods"],"mappings":";;;;;;;;;;AAO0BA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;AAPrC;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAQS,iBAASC,YAAT,CACLC,IADK,EAELC,gBAFK,EAGK;AACV,cAAIA,gBAAgB,CAACD,IAAD,CAApB,EAA4B;AAC1B,mBAAOA,IAAP;AACD,WAHS,CAIV;;;AACA,cAAI,CAACF,IAAI,CAACI,MAAL,CAAYF,IAAZ,CAAL,EAAwB;AACtB,mBAAO,IAAP;AACD;;AACD,cAAIG,IAAI,GAAGH,IAAX;AACA,cAAMI,QAAQ,GAAGD,IAAI,CAClBE,aADc,CACAR,SADA,EAEdS,MAFc,CAEP,CAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA2BR,gBAAgB,CAACM,KAAD,CAFpC,CAAjB;AAGA,cAAIG,MAAgB,GAAG,IAAvB;;AACA,cAAIN,QAAQ,CAACO,MAAT,GAAkB,CAAtB,EAAyB;AACvBD,YAAAA,MAAM,GAAGN,QAAQ,CAAC,CAAD,CAAjB;AACD,WAfS,CAgBV;;;AACA,cAAIM,MAAM,IAAI,IAAd,EAAoB;AAClBE,YAAAA,OAAO,CAACC,IAAR,CAAab,IAAI,GAAG,8CAApB;AACD;;AACD,iBAAOU,MAAP;AACD;;;;AAQM,iBAASI,+BAAT,CACLd,IADK,EAELC,gBAFK,EAGY;AACjB,cAAMc,gBAAgB,GAAGC,mBAAmB,CAAChB,IAAD,EAAOC,gBAAP,CAA5C,CADiB,CAGjB;;AACA,cAAI,CAACc,gBAAL,EAAuB;AACrBH,YAAAA,OAAO,CAACC,IAAR,CAAab,IAAI,GAAG,8CAApB;AACD;;AAED,iBAAOe,gBAAgB,GAAGf,IAAH,GAAU,IAAjC;AACD;;;;AAQM,iBAASgB,mBAAT,CACLhB,IADK,EAELC,gBAFK,EAGa;AAClB;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB,mBAAO,KAAP;AACD;;AACD,cAAIC,gBAAgB,CAACD,IAAD,CAApB,EAA4B;AAC1B,mBAAO,IAAP;AACD,WAPiB,CASlB;;;AACA,cAAIF,IAAI,CAACI,MAAL,CAAYF,IAAZ,CAAJ,EAAuB;AACrB,gBAAIiB,IAAI,GAAGjB,IAAX;;AACA,gBAAIiB,IAAI,IAAI,IAAZ,EAAkB;AAChB,qBAAOA,IAAI,CACRZ,aADI,CACUR,SADV,EAEJqB,IAFI,CAEC,CAACX,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA2BR,gBAAgB,CAACM,KAAD,CAF5C,CAAP;AAGD;AACF,WAjBiB,CAmBlB;;;AACA,iBAAO,KAAP;AACD;;;SAnFOY,sB,KAAAA,sB;;yBAqFKA,sB","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Asset, CCObject, Component, Node } from 'cc';\r\n\r\n/** Extensions for Objects. */\r\nnamespace ObjectExtensionMethods {\r\n  /**\r\n   * Extracts an interface from an Object.\r\n   * @param T Interface type to extract.\r\n   * @param self this.\r\n   * @returns Valid reference on success; null otherwise.\r\n   */\r\n  export function getInterface<T extends object = object>(\r\n    self: object,\r\n    isImplementsFunc: (obj: object) => obj is T\r\n  ): T | null {\r\n    if (isImplementsFunc(self)) {\r\n      return self;\r\n    }\r\n    // Deal with Nodes.\r\n    if (!Node.isNode(self)) {\r\n      return null;\r\n    }\r\n    let node = self as Node;\r\n    const handlers = node\r\n      .getComponents(Component)\r\n      .filter((value, _index, _array) => isImplementsFunc(value)) as (T & Component)[];\r\n    let result: T | null = null;\r\n    if (handlers.length > 0) {\r\n      result = handlers[0];\r\n    }\r\n    // Warn on error.\r\n    if (result == null) {\r\n      console.warn(self + \" doesn't expose requested interface of type.\");\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Nulls reference in case an Object doesn't expose an interface requested.\r\n   * @param T Type of interface to check for.\r\n   * @param self this.\r\n   * @returns self if object exposes interface; null otherwise.\r\n   */\r\n  export function toNullUnlessImplementsInterface<T extends object = object>(\r\n    self: unknown,\r\n    isImplementsFunc: (obj: unknown) => obj is T\r\n  ): T | Node | null {\r\n    const exposesInterface = implementsInterface(self, isImplementsFunc);\r\n\r\n    // Warn on error.\r\n    if (!exposesInterface) {\r\n      console.warn(self + \" doesn't expose requested interface of type.\");\r\n    }\r\n\r\n    return exposesInterface ? self : null;\r\n  }\r\n\r\n  /**\r\n   * Checks whether a {@link CCObject} implements an interface.\r\n   * @param T Interface type to check against.\r\n   * @param self this.\r\n   * @returns true if interface is exposed; false otherwise.\r\n   */\r\n  export function implementsInterface<T extends object = object>(\r\n    self: unknown,\r\n    isImplementsFunc: (obj: unknown) => obj is T\r\n  ): self is T | Node {\r\n    // Return early in case argument matches type.\r\n    if (self == null) {\r\n      return false;\r\n    }\r\n    if (isImplementsFunc(self)) {\r\n      return true;\r\n    }\r\n\r\n    // Search in components in case object is a GameObject.\r\n    if (Node.isNode(self)) {\r\n      let comp = self as Node;\r\n      if (comp != null) {\r\n        return comp\r\n          .getComponents(Component)\r\n          .some((value, _index, _array) => isImplementsFunc(value));\r\n      }\r\n    }\r\n\r\n    // Return on fail.\r\n    return false;\r\n  }\r\n}\r\nexport default ObjectExtensionMethods;\r\n"]}