{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/CubismParametersInspector.ts"],"names":["_decorator","Component","ComponentExtensionMethods","CubismDisplayInfoParameterName","CubismParametersInspector","ccclass","getParameters","cubismModel","findCubismModel","console","error","parametersSource","parameters","Array","length","i","displayName","diParamName","getComponent","parameterName","id","nodeUuid","node","uuid","componentUuid","minimumValue","maximumValue","defaultValue","value"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACdC,MAAAA,yB;;AACAC,MAAAA,8B;;;;;;AATP;AACA;AACA;AACA;AACA;AACA;;;;;yBAOqBC,yB,WADpBJ,UAAU,CAACK,OAAX,CAAmB,2BAAnB,C,gBAAD,MACqBD,yBADrB,SACuDH,SADvD,CACiE;AAC/D;AACF;AACA;AACA;AACUK,QAAAA,aAAa,GAAgC;AACnD,cAAMC,WAAW,GAAG;AAAA;AAAA,sEAA0BC,eAA1B,CAA0C,IAA1C,CAApB;;AACA,cAAID,WAAW,IAAI,IAAnB,EAAyB;AACvBE,YAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;AACA,mBAAO,IAAP;AACD;;AAED,cAAMC,gBAAgB,GAAGJ,WAAW,CAACK,UAArC;;AACA,cAAID,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BF,YAAAA,OAAO,CAACC,KAAR,CAAc,iCAAd;AACA,mBAAO,IAAP;AACD;;AACD,cAAME,UAAU,GAAG,IAAIC,KAAJ,CAAgCF,gBAAgB,CAACG,MAAjD,CAAnB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACG,MAArC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,gBAAIC,WAA+B,SAAnC;AACA,gBAAMC,WAAW,GAAGN,gBAAgB,CAACI,CAAD,CAAhB,CAAoBG,YAApB;AAAA;AAAA,iFAApB;;AACA,gBAAID,WAAW,IAAI,IAAnB,EAAyB;AACvBD,cAAAA,WAAW,GAAGC,WAAW,CAACD,WAA1B;;AACA,kBAAI,CAACA,WAAL,EAAkB;AAChBA,gBAAAA,WAAW,GAAGC,WAAW,CAACE,aAA1B;AACD;AACF;;AACD,gBAAI,CAACH,WAAL,EAAkB;AAChBA,cAAAA,WAAW,GAAGL,gBAAgB,CAACI,CAAD,CAAhB,CAAoBK,EAAlC;AACD;;AAEDR,YAAAA,UAAU,CAACG,CAAD,CAAV,GAAgB;AACdM,cAAAA,QAAQ,EAAEV,gBAAgB,CAACI,CAAD,CAAhB,CAAoBO,IAApB,CAAyBC,IADrB;AAEdC,cAAAA,aAAa,EAAEb,gBAAgB,CAACI,CAAD,CAAhB,CAAoBQ,IAFrB;AAGdH,cAAAA,EAAE,EAAET,gBAAgB,CAACI,CAAD,CAAhB,CAAoBK,EAHV;AAIdK,cAAAA,YAAY,EAAEd,gBAAgB,CAACI,CAAD,CAAhB,CAAoBU,YAJpB;AAKdC,cAAAA,YAAY,EAAEf,gBAAgB,CAACI,CAAD,CAAhB,CAAoBW,YALpB;AAMdC,cAAAA,YAAY,EAAEhB,gBAAgB,CAACI,CAAD,CAAhB,CAAoBY,YANpB;AAOdC,cAAAA,KAAK,EAAEjB,gBAAgB,CAACI,CAAD,CAAhB,CAAoBa,KAPb;AAQdZ,cAAAA,WAAW,EAAEA;AARC,aAAhB;AAUD;;AACD,iBAAO;AAAET,YAAAA,WAAW,EAAEA,WAAW,CAACgB,IAA3B;AAAiCX,YAAAA,UAAU,EAAEA;AAA7C,WAAP;AACD;;AA3C8D,O","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component } from 'cc';\r\nimport ComponentExtensionMethods from '../Core/ComponentExtensionMethods';\r\nimport CubismDisplayInfoParameterName from './CubismDisplayInfoParameterName';\r\n\r\n@_decorator.ccclass('CubismParametersInspector')\r\nexport default class CubismParametersInspector extends Component {\r\n  /**\r\n   * Editor(Inspector) で 情報を取得するための実装\r\n   * @returns\r\n   */\r\n  private getParameters(): IGetParametersResult | null {\r\n    const cubismModel = ComponentExtensionMethods.findCubismModel(this);\r\n    if (cubismModel == null) {\r\n      console.error('Find CubismModel failed.');\r\n      return null;\r\n    }\r\n\r\n    const parametersSource = cubismModel.parameters;\r\n    if (parametersSource == null) {\r\n      console.error('CubismModel.parameters is null.');\r\n      return null;\r\n    }\r\n    const parameters = new Array<ISerializedParameter>(parametersSource.length);\r\n    for (let i = 0; i < parametersSource.length; i++) {\r\n      let displayName: string | undefined;\r\n      const diParamName = parametersSource[i].getComponent(CubismDisplayInfoParameterName);\r\n      if (diParamName != null) {\r\n        displayName = diParamName.displayName;\r\n        if (!displayName) {\r\n          displayName = diParamName.parameterName;\r\n        }\r\n      }\r\n      if (!displayName) {\r\n        displayName = parametersSource[i].id;\r\n      }\r\n\r\n      parameters[i] = {\r\n        nodeUuid: parametersSource[i].node.uuid,\r\n        componentUuid: parametersSource[i].uuid,\r\n        id: parametersSource[i].id,\r\n        minimumValue: parametersSource[i].minimumValue,\r\n        maximumValue: parametersSource[i].maximumValue,\r\n        defaultValue: parametersSource[i].defaultValue,\r\n        value: parametersSource[i].value,\r\n        displayName: displayName,\r\n      };\r\n    }\r\n    return { cubismModel: cubismModel.uuid, parameters: parameters };\r\n  }\r\n}\r\n\r\nexport interface IGetParametersResult {\r\n  /** uuid */\r\n  cubismModel: string;\r\n  parameters: ISerializedParameter[];\r\n}\r\n\r\nexport interface ISerializedParameter {\r\n  nodeUuid: string;\r\n  componentUuid: string;\r\n  id: string;\r\n  minimumValue: number;\r\n  maximumValue: number;\r\n  defaultValue: number;\r\n  value: number;\r\n  displayName: string;\r\n}\r\n"]}