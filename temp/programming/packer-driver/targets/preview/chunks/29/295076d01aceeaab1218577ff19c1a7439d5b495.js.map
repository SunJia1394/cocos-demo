{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/SampleScripts/OriginalWorkflow/Expression/CubismExpressionPreview.ts"],"names":["_decorator","Component","ComponentExtensionMethods","CubismExpressionController","ccclass","property","CubismExpressionPreview","_expressionController","start","model","findCubismModel","console","assert","getComponent","changeExpression","event","customEventData","currentExpressionIndex","Number","parseInt"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACdC,MAAAA,yB;;AACAC,MAAAA,0B;;;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;yBAGTM,uB,WADpBF,OAAO,CAAC,yBAAD,C,gBAAR,MACqBE,uBADrB,SACqDL,SADrD,CAC+D;AAAA;AAAA;;AAC7D;AAD6D,eAE7DM,qBAF6D,GAEF,IAFE;AAAA;;AAI7D;AACUC,QAAAA,KAAK,GAAS;AACtB,cAAMC,KAAK,GAAG;AAAA;AAAA,sEAA0BC,eAA1B,CAA0C,IAA1C,CAAd;;AACA,cAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,YAAAA,OAAO,CAACC,MAAR,CAAeH,KAAK,IAAI,IAAxB;AACA;AACD;;AAED,eAAKF,qBAAL,GAA6BE,KAAK,CAACI,YAAN;AAAA;AAAA,uEAA7B;AACD;AAED;AACF;AACA;AACA;;;AACSC,QAAAA,gBAAgB,CAACC,KAAD,EAAoBC,eAApB,EAAmD;AACxE,cAAI,KAAKT,qBAAL,IAA8B,IAAlC,EAAwC;AACtC,iBAAKA,qBAAL,CAA2BU,sBAA3B,GAAoDC,MAAM,CAACC,QAAP,CAAgBH,eAAhB,CAApD;AACD;AACF;;AAvB4D,O","sourcesContent":["import { _decorator, Component, Node, EventTouch } from 'cc';\r\nimport ComponentExtensionMethods from '../../../Core/ComponentExtensionMethods';\r\nimport CubismExpressionController from '../../../Framework/Expression/CubismExpressionController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CubismExpressionPreview')\r\nexport default class CubismExpressionPreview extends Component {\r\n  /** ExpressionController to be operated. */\r\n  _expressionController: CubismExpressionController | null = null;\r\n\r\n  /** Get expression controller. */\r\n  protected start(): void {\r\n    const model = ComponentExtensionMethods.findCubismModel(this);\r\n    if (model == null) {\r\n      console.assert(model != null);\r\n      return;\r\n    }\r\n\r\n    this._expressionController = model.getComponent(CubismExpressionController);\r\n  }\r\n\r\n  /**\r\n   * Change facial expression.\r\n   * @param expressionIndex index of facial expression to set.\r\n   */\r\n  public changeExpression(event: EventTouch, customEventData: string): void {\r\n    if (this._expressionController != null) {\r\n      this._expressionController.currentExpressionIndex = Number.parseInt(customEventData);\r\n    }\r\n  }\r\n}\r\n"]}