{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/CubismRenderController.ts"],"names":["_decorator","CCFloat","CCInteger","Enum","CCObject","Camera","math","Node","Component","Asset","CubismRenderer","InEditorSymbols","CubismRendererInEditorSymbols","CubismSortingMode","CubismUpdateExecutionOrder","CubismUpdateController","ObjectExtensionMethods","ICubismUpdatable","CoreComponentExtensionMethods","FrameworkComponentExtensionMethods","ICubismDrawOrderHandler","ICubismOpacityHandler","ICubismBlendColorHandler","EDITOR","ccclass","property","executeInEditMode","CubismRenderController","type","serializable","visible","readonly","SYMBOL","_drawablesRootTransform","bindedOnLateUpdate","onLateUpdate","bind","bindedOnDynamicDrawableDataFunc","onDynamicDrawableData","lastOpacity","_lastOpacity","value","overwriteFlagForModelMultiplyColors","_isOverwrittenModelMultiplyColors","overwriteFlagForModelScreenColors","_isOverwrittenModelScreenColors","modelMultiplyColor","_modelMultiplyColor","modelScreenColor","_modelScreenColor","sortingLayer","Error","sortingLayerId","_sortingLayerId","renderers","console","error","i","length","onControllerSortingLayerDidChange","sortingMode","_sortingMode","warn","onControllerSortingModeDidChange","assert","_sortingOrder","sortingOrder","onControllerSortingOrderDidChange","drawOrderHandler","_drawOrderHandler","toNullUnlessImplementsInterface","isImplements","drawOrderHandlerInterface","_drawOrderHandlerInterface","getInterface","opacityHandler","_opacityHandler","opacityHandlerInterface","_opacityHandlerInterface","multiplyColorHandler","_multiplyColorHandler","multiplyColorHandlerInterface","_multiplyColorHandlerInterface","screenColorHandler","_screenColorHandler","screenColorHandlerInterface","_screenColorHandlerInterface","depthOffset","_depthOffset","Math","abs","EPSILON","onControllerDepthOffsetDidChange","model","findCubismModel","drawablesRootTransform","drawables","node","parent","_renderers","getComponentsMany","hasUpdateController","_hasUpdateController","tryInitializeRenderers","addComponentEach","tryInitialize","updateOpacity","opacity","clamp01","applyOpacityToRenderers","onModelOpacityDidChange","onOpacityDidChange","updateBlendColors","isMultiplyColorUpdated","isScreenColorUpdated","newMultiplyColors","Array","newScreenColors","isUseUserMultiplyColor","overwriteFlagForDrawableMultiplyColors","lastIsUseUserMultiplyColor","multiplyColor","lastMultiplyColor","applyMultiplyColor","isUseUserScreenColor","overwriteFlagForDrawableScreenColor","lastIsUseUserScreenColor","screenColor","lastScreenColor","applyScreenColor","onBlendColorDidChange","executionOrder","CUBISM_RENDER_CONTROLLER","needsUpdateOnEditing","enabled","cameraToFace","cameraRot","getWorldRotation","drawRot","equals","setWorldRotation","start","getComponent","onEnable","add","onDisable","remove","lateUpdate","deltaTime","sender","data","swapMeshes","updateVisibility","updateRenderOrder","isAnyDirty","isVisibilityDirty","onDrawableVisiblityDidChange","isVisible","isRenderOrderDirty","onDrawableRenderOrderDidChange","renderOrder","isOpacityDirty","onDrawableOpacityDidChange","areVertexPositionsDirty","onDrawableVertexPositionsDidChange","vertexPositions","isDrawOrderDirty","onDrawOrderDidChange","drawOrder","isUseModelMultiplyColor","isBlendColorDirty","isUseModelScreenColor","opacityHandlerComponent","opacityHandlerAsset","opacityHandlerNode","drawOrderHandlerComponent","drawOrderHandlerAsset","drawOrderHandlerNode","Color","WHITE","clone","backToFrontZ"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  _decorator,\r\n  CCFloat,\r\n  CCInteger,\r\n  Enum,\r\n  CCObject,\r\n  Camera,\r\n  math,\r\n  Node,\r\n  Component,\r\n  Asset,\r\n} from 'cc';\r\nimport CubismRenderer, { CubismRendererInEditorSymbols as InEditorSymbols } from './CubismRenderer';\r\nimport CubismSortingMode from './CubismSortingMode';\r\nimport CubismUpdateExecutionOrder from '../Framework/CubismUpdateExecutionOrder';\r\nimport CubismUpdateController from '../Framework/CubismUpdateController';\r\nimport ObjectExtensionMethods from '../Framework/ObjectExtensionMethods';\r\nimport ICubismUpdatable from '../Framework/ICubismUpdatable';\r\nimport CoreComponentExtensionMethods from '../Core/ComponentExtensionMethods';\r\nimport FrameworkComponentExtensionMethods from '../Framework/ComponentExtensionMethods';\r\nimport ICubismDrawOrderHandler from './ICubismDrawOrderHandler';\r\nimport ICubismOpacityHandler from './ICubismOpacityHandler';\r\nimport ICubismBlendColorHandler from './ICubismBlendColorHandler';\r\nimport type CubismModel from '../Core/CubismModel';\r\nimport type CubismDynamicDrawableData from '../Core/CubismDynamicDrawableData';\r\nimport { EDITOR } from 'cc/env';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n@ccclass('CubismRenderController')\r\n@executeInEditMode\r\nexport default class CubismRenderController extends Component implements ICubismUpdatable {\r\n  //#region Opacity\r\n  /**\r\n   * Model opacity.\r\n   *\r\n   * This is turned into a field to be available to AnimationClips...\r\n   */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public opacity: number = 1;\r\n  //#endregion\r\n\r\n  //#region LastOpacity\r\n  /** {@link lastOpacity} backing field. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  private _lastOpacity: number = 0;\r\n  /** Last model opacity. */\r\n  public get lastOpacity() {\r\n    return this._lastOpacity;\r\n  }\r\n  public set lastOpacity(value) {\r\n    this._lastOpacity = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region OverwriteFlagForModelMultiplyColors\r\n  /** {@link overwriteFlagForModelMultiplyColors} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _isOverwrittenModelMultiplyColors: boolean = false;\r\n  /** Whether to overwrite with multiply color from the model. */\r\n  public get overwriteFlagForModelMultiplyColors(): boolean {\r\n    return this._isOverwrittenModelMultiplyColors;\r\n  }\r\n  public set overwriteFlagForModelMultiplyColors(value: boolean) {\r\n    this._isOverwrittenModelMultiplyColors = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region OverwriteFlagForModelScreenColors\r\n  /** {@link overwriteFlagForModelScreenColors} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _isOverwrittenModelScreenColors: boolean = false;\r\n  /** Whether to overwrite with screen color from the model. */\r\n  public get overwriteFlagForModelScreenColors(): boolean {\r\n    return this._isOverwrittenModelScreenColors;\r\n  }\r\n  public set overwriteFlagForModelScreenColors(value: boolean) {\r\n    this._isOverwrittenModelScreenColors = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ModelMultiplyColor\r\n  /** {@link modelMultiplyColor} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _modelMultiplyColor: Readonly<math.Color> = math.Color.WHITE.clone();\r\n  // Multiply colors used throughout the model.\r\n  public get modelMultiplyColor(): Readonly<math.Color> {\r\n    return this._modelMultiplyColor;\r\n  }\r\n  public set modelMultiplyColor(value: Readonly<math.Color>) {\r\n    this._modelMultiplyColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ModelScreenColor\r\n  /** {@link modelScreenColor} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _modelScreenColor: Readonly<math.Color> = new math.Color(0, 0, 0, 0);\r\n  public get modelScreenColor(): Readonly<math.Color> {\r\n    return this._modelScreenColor;\r\n  }\r\n  public set modelScreenColor(value: Readonly<math.Color>) {\r\n    this._modelScreenColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region SortingLayer\r\n  public get sortingLayer(): string {\r\n    throw new Error('Method not implemented.');\r\n    // return UnityEngine.SortingLayer.IDToName(this.sortingLayerId);\r\n    return '';\r\n  }\r\n  public set sortingLayer(value) {\r\n    throw new Error('Method not implemented.');\r\n    // this.sortingLayerId = UnityEngine.SortingLayer.NameToID(value);\r\n  }\r\n  //#endregion\r\n\r\n  //#region SortingLayerId\r\n  /** {@link sortingLayerId} backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: true })\r\n  private _sortingLayerId: number = 0;\r\n  /** Sorting layer Id. */\r\n  public get sortingLayerId(): number {\r\n    return this._sortingLayerId;\r\n  }\r\n  public set sortingLayerId(value) {\r\n    if (value == this._sortingLayerId) {\r\n      return;\r\n    }\r\n\r\n    this._sortingLayerId = value;\r\n\r\n    // Apply sorting layer.\r\n    const renderers = this.renderers;\r\n    if (renderers == null) {\r\n      console.error('CubismRenderController.renderers is null.');\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < renderers.length; i++) {\r\n      renderers[i].onControllerSortingLayerDidChange(this._sortingLayerId);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region SortingMode\r\n  /** {@link sortingMode} backing field. */\r\n  @property({ type: Enum(CubismSortingMode), serializable: true, visible: false })\r\n  private _sortingMode: CubismSortingMode = CubismSortingMode.backToFrontZ;\r\n\r\n  /** CubismDrawable sorting. */\r\n  @property({ type: Enum(CubismSortingMode), visible: true })\r\n  public get sortingMode(): CubismSortingMode {\r\n    return this._sortingMode;\r\n  }\r\n  public set sortingMode(value) {\r\n    // Return early if same value given.\r\n    if (value == this._sortingMode) {\r\n      return;\r\n    }\r\n\r\n    this._sortingMode = value;\r\n\r\n    // Flip sorting.\r\n    const renderers = this.renderers;\r\n    if (renderers == null) {\r\n      console.warn('CubismRenderController.renderers is null.');\r\n      return;\r\n    }\r\n\r\n    if (!EDITOR) {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        renderers[i].onControllerSortingModeDidChange(this._sortingMode);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        console.assert(renderers[i][InEditorSymbols.onControllerSortingModeDidChange] != null);\r\n        renderers[i][InEditorSymbols.onControllerSortingModeDidChange](this._sortingOrder);\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region SortingOrder\r\n  /** {@link sortingOrder} backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: true })\r\n  private _sortingOrder: number = 0;\r\n\r\n  /** Order in sorting layer. */\r\n  @property({ type: CCInteger, visible: false, readonly: false })\r\n  public get sortingOrder(): number {\r\n    return this._sortingOrder;\r\n  }\r\n  public set sortingOrder(value: number) {\r\n    // Return early in case same value given.\r\n    if (value == this._sortingOrder) {\r\n      return;\r\n    }\r\n\r\n    this._sortingOrder = value;\r\n\r\n    // Apply new sorting order.\r\n    const renderers = this.renderers;\r\n    if (renderers == null) {\r\n      console.error('CubismRenderController.renderers is null.');\r\n      return;\r\n    }\r\n\r\n    if (!EDITOR) {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        renderers[i].onControllerSortingOrderDidChange(this._sortingOrder);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        console.assert(renderers[i][InEditorSymbols.onControllerSortingOrderDidChange] != null);\r\n        renderers[i][InEditorSymbols.onControllerSortingOrderDidChange](this._sortingOrder);\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region CameraToFace\r\n  /** [Optional] Camera to face. */\r\n  @property({ type: Camera, serializable: true, visible: true })\r\n  public cameraToFace: Camera | null = null;\r\n  //#endregion\r\n\r\n  //#region DrawOrderHandler\r\n  /** {@link drawOrderHandler} backing field. */\r\n  @property({ type: CCObject, serializable: true, visible: false })\r\n  private _drawOrderHandler: Node | ((Component | Asset) & ICubismOpacityHandler) | null = null;\r\n\r\n  /** Draw order handler proxy object. */\r\n  @property({ type: CCObject, visible: false })\r\n  public get drawOrderHandler(): Node | ((Component | Asset) & ICubismOpacityHandler) | null {\r\n    return this._drawOrderHandler;\r\n  }\r\n  public set drawOrderHandler(value: Node | ((Component | Asset) & ICubismOpacityHandler) | null) {\r\n    this._drawOrderHandler = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismDrawOrderHandler.isImplements\r\n    ) as Node | ((Component | Asset) & ICubismOpacityHandler) | null;\r\n  }\r\n  //#endregion\r\n\r\n  //#region DrawOrderHandlerInterface\r\n  /** {@link drawOrderHandlerInterface} backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _drawOrderHandlerInterface: ICubismDrawOrderHandler | null = null;\r\n\r\n  /** Listener for draw order changes. */\r\n  private get drawOrderHandlerInterface(): ICubismDrawOrderHandler | null {\r\n    if (this._drawOrderHandlerInterface == null) {\r\n      if (this.drawOrderHandler == null) {\r\n        return null;\r\n      }\r\n      this._drawOrderHandlerInterface = ObjectExtensionMethods.getInterface(\r\n        this.drawOrderHandler,\r\n        ICubismDrawOrderHandler.isImplements\r\n      ) as ICubismDrawOrderHandler;\r\n    }\r\n    return this._drawOrderHandlerInterface;\r\n  }\r\n  //#endregion\r\n\r\n  //#region OpacityHandler\r\n  /** {@link opacityHandler} backing field. */\r\n  @property({ type: CCObject, serializable: true, visible: false })\r\n  private _opacityHandler: Node | ((Component | Asset) & ICubismOpacityHandler) | null = null;\r\n\r\n  /** Opacity handler proxy object. */\r\n  @property({ type: CCObject, visible: false })\r\n  public get opacityHandler(): Node | ((Component | Asset) & ICubismOpacityHandler) | null {\r\n    return this._opacityHandler;\r\n  }\r\n  public set opacityHandler(value: Node | ((Component | Asset) & ICubismOpacityHandler) | null) {\r\n    this._opacityHandler = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismOpacityHandler.isImplements\r\n    ) as Node | ((Component | Asset) & ICubismOpacityHandler) | null;\r\n  }\r\n  //#endregion\r\n\r\n  //#region OpacityHandlerInterface\r\n  /** {@link opacityHandlerInterface} backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _opacityHandlerInterface: ICubismOpacityHandler | null = null;\r\n\r\n  /** Listener for opacity changes. */\r\n  private get opacityHandlerInterface(): ICubismOpacityHandler | null {\r\n    if (this._opacityHandlerInterface == null) {\r\n      if (this.opacityHandler == null) {\r\n        return null;\r\n      }\r\n      this._opacityHandlerInterface = ObjectExtensionMethods.getInterface(\r\n        this.opacityHandler,\r\n        ICubismOpacityHandler.isImplements\r\n      ) as ICubismOpacityHandler;\r\n    }\r\n    return this._opacityHandlerInterface;\r\n  }\r\n  //#endregion\r\n\r\n  //#region MultiplyColorHandler\r\n  /** {@link multiplyColorHandler} backing field. */\r\n  @property({ type: CCObject, visible: false })\r\n  private _multiplyColorHandler: Node | ((Component | Asset) & ICubismBlendColorHandler) | null =\r\n    null;\r\n  public get multiplyColorHandler():\r\n    | Node\r\n    | ((Component | Asset) & ICubismBlendColorHandler)\r\n    | null {\r\n    return this._multiplyColorHandler;\r\n  }\r\n  public set multiplyColorHandler(\r\n    value: Node | ((Component | Asset) & ICubismBlendColorHandler) | null\r\n  ) {\r\n    this._multiplyColorHandler = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region MultiplyColorHandlerInterface\r\n  /** {@link multiplyColorHandlerInterface} backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _multiplyColorHandlerInterface: ICubismBlendColorHandler | null = null;\r\n\r\n  /** Listener for blend color changes. */\r\n  private get multiplyColorHandlerInterface(): ICubismBlendColorHandler | null {\r\n    if (this._multiplyColorHandlerInterface == null) {\r\n      if (this.multiplyColorHandler == null) {\r\n        return null;\r\n      }\r\n      this._multiplyColorHandlerInterface = ObjectExtensionMethods.getInterface(\r\n        this.multiplyColorHandler,\r\n        ICubismBlendColorHandler.isImplements\r\n      );\r\n    }\r\n    return this._multiplyColorHandlerInterface;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ScreenColorHandler\r\n  /** {@link screenColorHandler} backing field. */\r\n  @property({ type: CCObject, visible: false })\r\n  private _screenColorHandler: Node | ((Component | Asset) & ICubismBlendColorHandler) | null =\r\n    null;\r\n  public get screenColorHandler(): Node | ((Component | Asset) & ICubismBlendColorHandler) | null {\r\n    return this._screenColorHandler;\r\n  }\r\n  public set screenColorHandler(\r\n    value: Node | ((Component | Asset) & ICubismBlendColorHandler) | null\r\n  ) {\r\n    this._screenColorHandler = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ScreenColorHandlerInterface\r\n  /** {@link screenColorHandlerInterface} backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _screenColorHandlerInterface: ICubismBlendColorHandler | null = null;\r\n\r\n  /** Listener for blend color changes. */\r\n  private get screenColorHandlerInterface(): ICubismBlendColorHandler | null {\r\n    if (this._screenColorHandlerInterface == null) {\r\n      if (this.screenColorHandler == null) {\r\n        return null;\r\n      }\r\n      this._screenColorHandlerInterface = ObjectExtensionMethods.getInterface(\r\n        this.screenColorHandler,\r\n        ICubismBlendColorHandler.isImplements\r\n      );\r\n    }\r\n    return this._screenColorHandlerInterface;\r\n  }\r\n  //#endregion\r\n\r\n  //#region DepthOffset\r\n  /**\r\n   * The value to offset the CubismDrawables by.\r\n   *\r\n   * You only need to adjust this value when using perspective cameras.\r\n   */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  private _depthOffset: number = 0.00001;\r\n\r\n  /** Depth offset used when sorting by depth. */\r\n  @property({ type: CCFloat, visible: false })\r\n  public get depthOffset(): number {\r\n    return this._depthOffset;\r\n  }\r\n  public set depthOffset(value: number) {\r\n    // Return if same value given.\r\n    if (Math.abs(value - this._depthOffset) < math.EPSILON) {\r\n      return;\r\n    }\r\n\r\n    // Store value.\r\n    this._depthOffset = value;\r\n\r\n    // Apply it.\r\n    const renderers = this.renderers;\r\n    if (renderers == null) {\r\n      console.error('CubismRenderController.renderers is null.');\r\n      return;\r\n    }\r\n\r\n    if (!EDITOR) {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        renderers[i].onControllerDepthOffsetDidChange(this._depthOffset);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        console.assert(renderers[i][InEditorSymbols.onControllerDepthOffsetDidChange] != null);\r\n        renderers[i][InEditorSymbols.onControllerDepthOffsetDidChange](this._depthOffset);\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region Model\r\n  /** Model the controller belongs to. */\r\n  private get model(): CubismModel | null {\r\n    return CoreComponentExtensionMethods.findCubismModel(this);\r\n  }\r\n  //#endregion\r\n\r\n  //#region DrawablesRootTransform\r\n  /** DrawablesRootTransform backing field. */\r\n  private _drawablesRootTransform: Node | null = null;\r\n\r\n  /** Root transform of all CubismDrawables of the model. */\r\n  private get drawablesRootTransform(): Node | null {\r\n    if (this._drawablesRootTransform == null) {\r\n      const drawables = this.model?.drawables;\r\n      if (drawables != null && drawables.length > 0) {\r\n        this._drawablesRootTransform = drawables[0].node.parent;\r\n      }\r\n    }\r\n    return this._drawablesRootTransform;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Renderers\r\n  /** Renderers backing field. */\r\n  @property({ serializable: false, visible: false })\r\n  private _renderers: Array<CubismRenderer> | null = null;\r\n\r\n  /** CubismRenderers */\r\n  public get renderers(): Array<CubismRenderer> | null {\r\n    if (this._renderers == null) {\r\n      console.assert(this.model);\r\n      console.assert(this.model!.drawables);\r\n      const drawables = this.model!.drawables!;\r\n      this._renderers = FrameworkComponentExtensionMethods.getComponentsMany(\r\n        drawables,\r\n        CubismRenderer\r\n      );\r\n    }\r\n    return this._renderers;\r\n  }\r\n  private set renderers(value: Array<CubismRenderer> | null) {\r\n    this._renderers = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region HasUpdateController\r\n  @property({ serializable: false, visible: true })\r\n  private _hasUpdateController: boolean = false;\r\n  /** Model has update controller component. */\r\n  public get hasUpdateController() {\r\n    return this._hasUpdateController;\r\n  }\r\n  public set hasUpdateController(value) {\r\n    this._hasUpdateController = value;\r\n  }\r\n  //#endregion\r\n\r\n  /** Makes sure all CubismDrawables have CubismRenderers attached to them. */\r\n  private tryInitializeRenderers(): void {\r\n    // Try get renderers.\r\n    let renderers = this.renderers;\r\n\r\n    // Create renderers if necesssary.\r\n    if (renderers == null || renderers.length == 0) {\r\n      // Create renders and apply it to backing field...\r\n      const drawables = CoreComponentExtensionMethods.findCubismModel(this)?.drawables ?? null;\r\n      if (drawables == null) {\r\n        return;\r\n      }\r\n      renderers = FrameworkComponentExtensionMethods.addComponentEach(drawables, CubismRenderer);\r\n\r\n      // Store renderers.\r\n      this.renderers = renderers;\r\n    }\r\n\r\n    // Make sure renderers are initialized.\r\n    for (var i = 0; i < renderers.length; i++) {\r\n      renderers[i].tryInitialize(this);\r\n    }\r\n\r\n    // Initialize sorting layer.\r\n    // We set the backing field here directly because we pull the sorting layer directly from the renderer.\r\n    // TODO: MeshRenderer.sortingLayerID 実装待ち\r\n    // this._sortingLayerId = _renderers[0].meshRenderer.sortingLayerID;\r\n  }\r\n\r\n  /** Updates opacity if necessary. */\r\n  private updateOpacity(): void {\r\n    // Return if same value given.\r\n    if (Math.abs(this.opacity - this.lastOpacity) < math.EPSILON) {\r\n      return;\r\n    }\r\n\r\n    // Store value.\r\n    this.opacity = math.clamp01(this.opacity);\r\n    this.lastOpacity = this.opacity;\r\n\r\n    // Apply opacity.\r\n    const applyOpacityToRenderers =\r\n      this.opacityHandlerInterface == null || this.opacity > 1 - math.EPSILON;\r\n\r\n    if (applyOpacityToRenderers) {\r\n      console.assert(this.renderers != null, 'renderers is null.');\r\n      const renderers = this.renderers!;\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        renderers[i].onModelOpacityDidChange(this.opacity);\r\n      }\r\n    }\r\n\r\n    // Call handler.\r\n    if (this.opacityHandlerInterface != null) {\r\n      this.opacityHandlerInterface.onOpacityDidChange(this, this.opacity);\r\n    }\r\n  }\r\n\r\n  /** Updates Blend Colors if necessary. */\r\n  private updateBlendColors(): void {\r\n    if (this.renderers == null) {\r\n      return;\r\n    }\r\n\r\n    let isMultiplyColorUpdated = false;\r\n    let isScreenColorUpdated = false;\r\n    const newMultiplyColors = new Array<math.Color>(this.renderers.length);\r\n    const newScreenColors = new Array<math.Color>(this.renderers.length);\r\n\r\n    for (let i = 0; i < this.renderers.length; i++) {\r\n      const isUseUserMultiplyColor =\r\n        this.renderers[i].overwriteFlagForDrawableMultiplyColors ||\r\n        this.overwriteFlagForModelMultiplyColors;\r\n\r\n      if (isUseUserMultiplyColor) {\r\n        // If you switch from a setting that uses the color of the model, revert to the color that was retained.\r\n        if (!this.renderers[i].lastIsUseUserMultiplyColor) {\r\n          this.renderers[i].multiplyColor = this.renderers[i].lastMultiplyColor;\r\n          this.renderers[i].applyMultiplyColor();\r\n          isMultiplyColorUpdated = true;\r\n        } else if (this.renderers[i].lastMultiplyColor != this.renderers[i].multiplyColor) {\r\n          this.renderers[i].applyMultiplyColor();\r\n          isMultiplyColorUpdated = true;\r\n        }\r\n\r\n        this.renderers[i].lastMultiplyColor = this.renderers[i].multiplyColor;\r\n      } else if (this.renderers[i].lastIsUseUserMultiplyColor) {\r\n        this.renderers[i].multiplyColor = this.renderers[i].lastMultiplyColor;\r\n        this.renderers[i].applyMultiplyColor();\r\n        isMultiplyColorUpdated = true;\r\n      }\r\n\r\n      newMultiplyColors[i] = this.renderers[i].multiplyColor;\r\n      this.renderers[i].lastIsUseUserMultiplyColor = isUseUserMultiplyColor;\r\n\r\n      const isUseUserScreenColor =\r\n        this.renderers[i].overwriteFlagForDrawableScreenColor ||\r\n        this.overwriteFlagForModelScreenColors;\r\n\r\n      if (isUseUserScreenColor) {\r\n        // If you switch from a setting that uses the color of the model, revert to the color that was retained.\r\n        if (!this.renderers[i].lastIsUseUserScreenColor) {\r\n          this.renderers[i].screenColor = this.renderers[i].lastScreenColor;\r\n          this.renderers[i].applyScreenColor();\r\n          isScreenColorUpdated = true;\r\n        } else if (this.renderers[i].lastScreenColor != this.renderers[i].screenColor) {\r\n          this.renderers[i].applyScreenColor();\r\n          isScreenColorUpdated = true;\r\n        }\r\n\r\n        this.renderers[i].lastScreenColor = this.renderers[i].screenColor;\r\n      } else if (this.renderers[i].lastIsUseUserScreenColor) {\r\n        this.renderers[i].screenColor = this.renderers[i].lastScreenColor;\r\n        this.renderers[i].applyScreenColor();\r\n        isScreenColorUpdated = true;\r\n      }\r\n\r\n      newScreenColors[i] = this.renderers[i].screenColor;\r\n      this.renderers[i].lastIsUseUserScreenColor = isUseUserScreenColor;\r\n    }\r\n\r\n    if (this.multiplyColorHandler != null && isMultiplyColorUpdated) {\r\n      this.multiplyColorHandlerInterface?.onBlendColorDidChange(this, newMultiplyColors);\r\n    }\r\n\r\n    if (this.screenColorHandler != null && isScreenColorUpdated) {\r\n      this.screenColorHandlerInterface?.onBlendColorDidChange(this, newScreenColors);\r\n    }\r\n  }\r\n\r\n  /** Called by cubism update controller. Order to invoke OnLateUpdate. */\r\n  public get executionOrder() {\r\n    return CubismUpdateExecutionOrder.CUBISM_RENDER_CONTROLLER;\r\n  }\r\n\r\n  /** Called by cubism update controller. Needs to invoke OnLateUpdate on Editing. */\r\n  public get needsUpdateOnEditing(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /** Called by cubism update controller. Applies billboarding. */\r\n  public onLateUpdate(): void {\r\n    // Fail silently...\r\n    if (!this.enabled) {\r\n      return;\r\n    }\r\n\r\n    // Update opacity if necessary.\r\n    this.updateOpacity();\r\n\r\n    // Updates Blend Colors if necessary.\r\n    this.updateBlendColors();\r\n\r\n    // Return early in case no camera is to be faced.\r\n    if (this.cameraToFace == null) {\r\n      return;\r\n    }\r\n\r\n    const cameraRot = this.cameraToFace.node.getWorldRotation();\r\n    if (EDITOR) {\r\n      const drawRot = this.drawablesRootTransform?.getWorldRotation();\r\n      if (drawRot != null && cameraRot.equals(drawRot)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Face camera.\r\n    if (this.drawablesRootTransform != null) {\r\n      this.drawablesRootTransform.setWorldRotation(cameraRot);\r\n    }\r\n  }\r\n\r\n  //#region bindedOnLateUpdate\r\n  /** ICubismUpdatable Binded callback function. */\r\n  public readonly bindedOnLateUpdate: ICubismUpdatable.CallbackFunction =\r\n    this.onLateUpdate.bind(this);\r\n  /** ICubismUpdatable metadata */\r\n  public readonly [ICubismUpdatable.SYMBOL]: typeof ICubismUpdatable.SYMBOL =\r\n    ICubismUpdatable.SYMBOL;\r\n  //#endregion\r\n\r\n  // #region Cocos Creator Event Handling\r\n  /** Called by Cocos Creator. */\r\n  protected start(): void {\r\n    // Get cubism update controller.\r\n    this.hasUpdateController = this.getComponent(CubismUpdateController) != null;\r\n  }\r\n\r\n  /** Called by Cocos Creator. Enables listening to render data updates. */\r\n  protected onEnable(): void {\r\n    // Fail silently.\r\n    if (this.model == null) {\r\n      return;\r\n    }\r\n\r\n    // Make sure renderers are available.\r\n    this.tryInitializeRenderers();\r\n\r\n    // Register listener.\r\n    this.model.onDynamicDrawableData.add(this.bindedOnDynamicDrawableDataFunc);\r\n  }\r\n\r\n  /** Called by Cocos Creator. Disables listening to render data updates. */\r\n  protected onDisable() {\r\n    // Fail silently.\r\n    if (this.model == null) {\r\n      return;\r\n    }\r\n\r\n    // Deregister listener.\r\n    this.model.onDynamicDrawableData.remove(this.bindedOnDynamicDrawableDataFunc);\r\n  }\r\n  // #endregion\r\n\r\n  // #region Cubism Event Handling\r\n\r\n  /** Called by Cocos Creator. */\r\n  protected lateUpdate(deltaTime: number): void {\r\n    if (!this.hasUpdateController) {\r\n      this.onLateUpdate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called whenever new render data is available.\r\n   * @param sender Model with new render data.\r\n   * @param data New render data.\r\n   */\r\n  private onDynamicDrawableData(sender: CubismModel, data: Array<CubismDynamicDrawableData>): void {\r\n    // Get drawables.\r\n    const drawables = sender.drawables;\r\n    const renderers = this.renderers;\r\n\r\n    if (drawables == null) {\r\n      console.error('sender.drawables is null.');\r\n      return;\r\n    }\r\n    if (renderers == null) {\r\n      console.error('renderers is null.');\r\n      return;\r\n    }\r\n\r\n    // Handle render data changes.\r\n    for (let i = 0; i < data.length; i++) {\r\n      // Controls whether mesh buffers are to be swapped.\r\n      let swapMeshes = false;\r\n\r\n      // Update visibility if last SwapInfo flag is true.\r\n      renderers[i].updateVisibility();\r\n\r\n      // Update render order if last SwapInfo flags is true.\r\n      renderers[i].updateRenderOrder();\r\n\r\n      // Skip completely non-dirty data.\r\n      if (!data[i].isAnyDirty) {\r\n        continue;\r\n      }\r\n\r\n      // Update visibility.\r\n      if (data[i].isVisibilityDirty) {\r\n        renderers[i].onDrawableVisiblityDidChange(data[i].isVisible);\r\n\r\n        swapMeshes = true;\r\n      }\r\n\r\n      // Update render order.\r\n      if (data[i].isRenderOrderDirty) {\r\n        renderers[i].onDrawableRenderOrderDidChange(data[i].renderOrder);\r\n\r\n        swapMeshes = true;\r\n      }\r\n\r\n      // Update opacity.\r\n      if (data[i].isOpacityDirty) {\r\n        renderers[i].onDrawableOpacityDidChange(data[i].opacity);\r\n\r\n        swapMeshes = true;\r\n      }\r\n\r\n      // Update vertex positions.\r\n      if (data[i].areVertexPositionsDirty) {\r\n        renderers[i].onDrawableVertexPositionsDidChange(data[i].vertexPositions);\r\n\r\n        swapMeshes = true;\r\n      }\r\n\r\n      // Swap buffers if necessary.\r\n      // [INV] Swapping only half of the meshes might improve performance even. Would that be visually feasible?\r\n      if (swapMeshes) {\r\n        renderers[i].swapMeshes();\r\n      }\r\n    }\r\n\r\n    // Pass draw order changes to handler (if available).\r\n    let drawOrderHandler = this.drawOrderHandlerInterface;\r\n\r\n    if (drawOrderHandler != null) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (data[i].isDrawOrderDirty) {\r\n          drawOrderHandler.onDrawOrderDidChange(this, drawables[i], data[i].drawOrder);\r\n        }\r\n      }\r\n    }\r\n\r\n    let isMultiplyColorUpdated = false;\r\n    let isScreenColorUpdated = false;\r\n    const newMultiplyColors = new Array<math.Color>(renderers.length);\r\n    const newScreenColors = new Array<math.Color>(renderers.length);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const isUseModelMultiplyColor = !(\r\n        renderers[i].overwriteFlagForDrawableMultiplyColors ||\r\n        this.overwriteFlagForModelMultiplyColors\r\n      );\r\n\r\n      // Skip processing when not using model colors.\r\n      if (data[i].isBlendColorDirty && isUseModelMultiplyColor) {\r\n        renderers[i].applyMultiplyColor();\r\n        isMultiplyColorUpdated = true;\r\n      }\r\n\r\n      newMultiplyColors[i] = renderers[i].multiplyColor;\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const isUseModelScreenColor = !(\r\n        renderers[i].overwriteFlagForDrawableScreenColor || this.overwriteFlagForModelScreenColors\r\n      );\r\n\r\n      // Skip processing when not using model colors.\r\n      if (data[i].isBlendColorDirty && isUseModelScreenColor) {\r\n        renderers[i].applyScreenColor();\r\n        isScreenColorUpdated = true;\r\n      }\r\n\r\n      newScreenColors[i] = renderers[i].screenColor;\r\n    }\r\n\r\n    // Pass blend color changes to handler (if available).\r\n    const multiplyColorHandlerInterface = this.multiplyColorHandlerInterface;\r\n    const screenColorHandlerInterface = this.screenColorHandlerInterface;\r\n\r\n    if (this.multiplyColorHandler != null && isMultiplyColorUpdated) {\r\n      multiplyColorHandlerInterface?.onBlendColorDidChange(this, newMultiplyColors);\r\n    }\r\n\r\n    if (this.screenColorHandler != null && isScreenColorUpdated) {\r\n      screenColorHandlerInterface?.onBlendColorDidChange(this, newScreenColors);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   *\r\n   * @param sender\r\n   * @param data\r\n   */\r\n  protected bindedOnDynamicDrawableDataFunc = this.onDynamicDrawableData.bind(this);\r\n\r\n  //#region Editor Inspector Only\r\n\r\n  @property({ type: Component })\r\n  private get opacityHandlerComponent(): (Component & ICubismOpacityHandler) | null {\r\n    return this._opacityHandler instanceof Component ? this._opacityHandler : null;\r\n  }\r\n  private set opacityHandlerComponent(value: (Component & ICubismOpacityHandler) | null) {\r\n    this.opacityHandler = value;\r\n  }\r\n  @property({ type: Asset })\r\n  private get opacityHandlerAsset(): (Asset & ICubismOpacityHandler) | null {\r\n    return this._opacityHandler instanceof Asset ? this._opacityHandler : null;\r\n  }\r\n  private set opacityHandlerAsset(value: (Asset & ICubismOpacityHandler) | null) {\r\n    this.opacityHandler = value;\r\n  }\r\n  @property({ type: Node })\r\n  private get opacityHandlerNode(): Node | null {\r\n    return this._opacityHandler instanceof Node ? this._opacityHandler : null;\r\n  }\r\n  private set opacityHandlerNode(value: Node | null) {\r\n    this.opacityHandler = value;\r\n  }\r\n\r\n  @property({ type: Component })\r\n  private get drawOrderHandlerComponent(): (Component & ICubismOpacityHandler) | null {\r\n    return this._drawOrderHandler instanceof Component ? this._drawOrderHandler : null;\r\n  }\r\n  private set drawOrderHandlerComponent(value: (Component & ICubismOpacityHandler) | null) {\r\n    this.drawOrderHandler = value;\r\n  }\r\n  @property({ type: Asset })\r\n  private get drawOrderHandlerAsset(): (Asset & ICubismOpacityHandler) | null {\r\n    return this._drawOrderHandler instanceof Asset ? this._drawOrderHandler : null;\r\n  }\r\n  private set drawOrderHandlerAsset(value: (Asset & ICubismOpacityHandler) | null) {\r\n    this.drawOrderHandler = value;\r\n  }\r\n  @property({ type: Node })\r\n  private get drawOrderHandlerNode(): Node | null {\r\n    return this._drawOrderHandler instanceof Node ? this._drawOrderHandler : null;\r\n  }\r\n  private set drawOrderHandlerNode(value: Node | null) {\r\n    this.drawOrderHandler = value;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n"]}