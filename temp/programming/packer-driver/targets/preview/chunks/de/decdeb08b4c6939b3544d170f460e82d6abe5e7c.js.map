{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsInput.ts"],"names":["Enum","math","_decorator","CubismPhysicsMath","CubismPhysicsSourceComponent","property","ccclass","CubismPhysicsInput","serializable","type","visible","getInputTranslationXFromNormalizedParameterValue","targetTranslation","targetAngle","parameter","parameterValue","normalization","weight","result","normalize","position","minimum","maximum","default","isInverted","translation","Vec2","x","normalized","y","angle","clamped","getInputTranslationYFromNormalizedParameterValue","getInputAngleFromNormalizedParameterValue","clone","initializeGetter","sourceComponent","X","getNormalizedParameterValue","bind","Y","Angle","neverCheck","ZERO"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Enum, math, _decorator } from 'cc';\r\nimport CubismPhysicsMath from './CubismPhysicsMath';\r\nimport CubismPhysicsSourceComponent from './CubismPhysicsSourceComponent';\r\nimport type CubismPhysicsNormalization from './CubismPhysicsNormalization';\r\nimport type CubismParameter from '../../Core/CubismParameter';\r\nconst { property, ccclass } = _decorator;\r\n\r\ntype NormalizedParameterValueGetter = (\r\n  targetTranslation: math.Vec2,\r\n  targetAngle: number,\r\n  parameter: CubismParameter,\r\n  parameterValue: number,\r\n  normalization: CubismPhysicsNormalization,\r\n  weight: number\r\n) => { translation: math.Vec2; angle: number; parameterValue: number };\r\n\r\n/** Input data of physics. (struct) */\r\n\r\n@ccclass('CubismPhysicsInput')\r\nexport default class CubismPhysicsInput {\r\n  private getInputTranslationXFromNormalizedParameterValue(\r\n    targetTranslation: math.Vec2,\r\n    targetAngle: number,\r\n    parameter: CubismParameter,\r\n    parameterValue: number,\r\n    normalization: CubismPhysicsNormalization,\r\n    weight: number\r\n  ): { translation: math.Vec2; angle: number; parameterValue: number } {\r\n    const result = CubismPhysicsMath.normalize(\r\n      parameter,\r\n      parameterValue,\r\n      normalization.position.minimum,\r\n      normalization.position.maximum,\r\n      normalization.position.default,\r\n      this.isInverted\r\n    );\r\n\r\n    return {\r\n      translation: new math.Vec2(\r\n        targetTranslation.x + result.normalized * weight,\r\n        targetTranslation.y\r\n      ),\r\n      angle: targetAngle,\r\n      parameterValue: result.clamped,\r\n    };\r\n  }\r\n\r\n  private getInputTranslationYFromNormalizedParameterValue(\r\n    targetTranslation: math.Vec2,\r\n    targetAngle: number,\r\n    parameter: CubismParameter,\r\n    parameterValue: number,\r\n    normalization: CubismPhysicsNormalization,\r\n    weight: number\r\n  ): { translation: math.Vec2; angle: number; parameterValue: number } {\r\n    const result = CubismPhysicsMath.normalize(\r\n      parameter,\r\n      parameterValue,\r\n      normalization.position.minimum,\r\n      normalization.position.maximum,\r\n      normalization.position.default,\r\n      this.isInverted\r\n    );\r\n\r\n    return {\r\n      translation: new math.Vec2(\r\n        targetTranslation.x,\r\n        targetTranslation.y + result.normalized * weight\r\n      ),\r\n      angle: targetAngle,\r\n      parameterValue: result.clamped,\r\n    };\r\n  }\r\n\r\n  private getInputAngleFromNormalizedParameterValue(\r\n    targetTranslation: math.Vec2,\r\n    targetAngle: number,\r\n    parameter: CubismParameter,\r\n    parameterValue: number,\r\n    normalization: CubismPhysicsNormalization,\r\n    weight: number\r\n  ): { translation: math.Vec2; angle: number; parameterValue: number } {\r\n    const result = CubismPhysicsMath.normalize(\r\n      parameter,\r\n      parameterValue,\r\n      normalization.angle.minimum,\r\n      normalization.angle.maximum,\r\n      normalization.angle.default,\r\n      this.isInverted\r\n    );\r\n\r\n    return {\r\n      translation: targetTranslation.clone(),\r\n      angle: targetAngle + result.normalized * weight,\r\n      parameterValue: result.clamped,\r\n    };\r\n  }\r\n\r\n  public initializeGetter() {\r\n    switch (this.sourceComponent) {\r\n      case CubismPhysicsSourceComponent.X:\r\n        {\r\n          this.getNormalizedParameterValue =\r\n            this.getInputTranslationXFromNormalizedParameterValue.bind(this);\r\n        }\r\n        break;\r\n      case CubismPhysicsSourceComponent.Y:\r\n        {\r\n          this.getNormalizedParameterValue =\r\n            this.getInputTranslationYFromNormalizedParameterValue.bind(this);\r\n        }\r\n        break;\r\n      case CubismPhysicsSourceComponent.Angle:\r\n        {\r\n          this.getNormalizedParameterValue =\r\n            this.getInputAngleFromNormalizedParameterValue.bind(this);\r\n        }\r\n        break;\r\n      default:\r\n        const neverCheck: never = this.sourceComponent;\r\n        break;\r\n    }\r\n  }\r\n  /** Parameter ID of source. */\r\n  @property({ serializable: true })\r\n  public sourceId: string | null = '';\r\n  /** Scale of translation. */\r\n  @property({ serializable: true })\r\n  public scaleOfTranslation: math.Vec2 = math.Vec2.ZERO.clone();\r\n  /** Scale of angle. */\r\n  @property({ serializable: true })\r\n  public angleScale: number = 0;\r\n  /** Weight. */\r\n  @property({ serializable: true })\r\n  public weight: number = 0;\r\n  /** Component of source. */\r\n  @property({ type: Enum(CubismPhysicsSourceComponent), serializable: true })\r\n  public sourceComponent: CubismPhysicsSourceComponent = CubismPhysicsSourceComponent.X;\r\n  /** True if value is inverted; otherwise. */\r\n  @property({ serializable: true })\r\n  public isInverted: boolean = false;\r\n\r\n  /** Source data from parameter. */\r\n  @property({ serializable: false, visible: false })\r\n  public source: CubismParameter | null = null;\r\n\r\n  /** Function of getting normalized parameter value. */\r\n  @property({ serializable: false, visible: false })\r\n  public getNormalizedParameterValue: NormalizedParameterValueGetter | null = null;\r\n}\r\n"]}