{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsController.ts"],"names":["Component","_decorator","CubismUpdateController","CubismUpdateExecutionOrder","CubismPhysics","CubismPhysicsRig","ComponentExtensionMethods","ICubismUpdatable","CubismRenderController","CubismMaskController","ccclass","property","CubismPhysicsController","type","serializable","visible","SYMBOL","_parameters","bindedOnLateUpdate","onLateUpdate","bind","rig","_rig","value","parameters","hasUpdateController","_hasUpdateController","executionOrder","CUBISM_PHYSICS_CONTROLLER","needsUpdateOnEditing","deltaTime","_deltaTime","useFixedDeltaTime","evaluate","stabilization","renderController","getComponent","maskController","console","assert","initialize","onLoad","controller","subRigs","i","length","subRig","findCubismModel","start","lateUpdate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACbC,MAAAA,sB;;AACAC,MAAAA,0B;;AACAC,MAAAA,a;;AACAC,MAAAA,gB;;AACAC,MAAAA,yB;;AACAC,MAAAA,gB;;AAEAC,MAAAA,sB;;AACAC,MAAAA,oB;;;;;;AAhBP;AACA;AACA;AACA;AACA;AACA;;;;;OAYM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;yBAGTW,uB,WADpBF,OAAO,CAAC,yBAAD,C,UASLC,QAAQ,CAAC;AAAEE,QAAAA,IAAI;AAAA;AAAA,gDAAN;AAA0BC,QAAAA,YAAY,EAAE;AAAxC,OAAD,C,UAWRH,QAAQ,CAAC;AAAEG,QAAAA,YAAY,EAAE,KAAhB;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OAAD,C,sCAoDQ;AAAA;AAAA,gDAAiBC,M,EAxEpC,MACqBJ,uBADrB,SACqDZ,SADrD,CAC2F;AAAA;AAAA;;AAAA;;AAAA,eAWjFiB,WAXiF,GAWzC,IAXyC;;AAAA;;AAkEzF;AAlEyF,eAmEzEC,kBAnEyE,GAoEvF,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CApEuF;;AAsEzF;AAtEyF,0BAwEvF;AAAA;AAAA,oDAAiBJ,MAxEsE;AAAA;;AAC1E,YAAHK,GAAG,GAAG;AAChB,iBAAO,KAAKC,IAAZ;AACD;;AACc,YAAHD,GAAG,CAACE,KAAD,EAAiC;AAC9C,eAAKD,IAAL,GAAYC,KAAZ;AACD;;AAMoB,YAAVC,UAAU,GAA6B;AAChD,iBAAO,KAAKP,WAAZ;AACD;;AACqB,YAAVO,UAAU,CAACD,KAAD,EAAkC;AACtD,eAAKN,WAAL,GAAmBM,KAAnB;AACD;;AAI6B,YAAnBE,mBAAmB,GAAY;AACxC,iBAAO,KAAKC,oBAAZ;AACD;;AAC8B,YAAnBD,mBAAmB,CAACF,KAAD,EAAiB;AAC9C,eAAKG,oBAAL,GAA4BH,KAA5B;AACD;;AAEwB,YAAdI,cAAc,GAAW;AAClC,iBAAO;AAAA;AAAA,wEAA2BC,yBAAlC;AACD;;AAE8B,YAApBC,oBAAoB,GAAY;AACzC,iBAAO,KAAP;AACD;;AAEMV,QAAAA,YAAY,CAACW,SAAD,EAAoB;AAAA;;AACrC,cAAIC,UAAU,GAAGD,SAAjB,CADqC,CAGrC;;AACA,cAAI;AAAA;AAAA,8CAAcE,iBAAlB,EAAqC,CACnC;AACA;AACD,WAPoC,CASrC;;;AACA,4BAAKX,GAAL,+BAAUY,QAAV,CAAmBF,UAAnB;AACD;AAED;;;AACOG,QAAAA,aAAa,GAAS;AAC3B,cAAI,KAAKb,GAAL,IAAY,IAAhB,EAAsB;AACpB;AACD;;AAED,eAAKA,GAAL,CAASa,aAAT;AAEA,cAAMC,gBAAgB,GAAG,KAAKC,YAAL;AAAA;AAAA,+DAAzB;AACA,cAAMC,cAAc,GAAG,KAAKD,YAAL;AAAA;AAAA,2DAAvB;AAEAE,UAAAA,OAAO,CAACC,MAAR,CAAeJ,gBAAgB,IAAI,IAAnC;AAEAA,UAAAA,gBAAgB,QAAhB,YAAAA,gBAAgB,CAAEhB,YAAlB;AACAkB,UAAAA,cAAc,QAAd,YAAAA,cAAc,CAAElB,YAAhB;AACD;;AAUMqB,QAAAA,UAAU,CAACnB,GAAD,EAAwB;AACvC,eAAKA,GAAL,GAAWA,GAAX;AACA,eAAKoB,MAAL;AACD;;AAEMA,QAAAA,MAAM,GAAG;AAAA;;AACd;AACA,cAAI,KAAKpB,GAAL,IAAY,IAAhB,EAAsB;AACpB;AACD,WAJa,CAMd;;;AACA,eAAKA,GAAL,CAASqB,UAAT,GAAsB,IAAtB;AACA,cAAMC,OAAO,GAAG,KAAKtB,GAAL,CAASsB,OAAzB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,gBAAME,MAAM,GAAGH,OAAO,CAACC,CAAD,CAAtB;;AACA,gBAAIE,MAAM,IAAI,IAAd,EAAoB;AAClBA,cAAAA,MAAM,CAACzB,GAAP,GAAa,KAAKA,GAAlB;AACD;AACF;;AAED,eAAKG,UAAL,gDAAkB;AAAA;AAAA,sEAA0BuB,eAA1B,CAA0C,IAA1C,CAAlB,qBAAkB,iBAAiDvB,UAAnE,oCAAiF,IAAjF;AAEA,eAAKH,GAAL,CAASmB,UAAT;AACD;;AAEMQ,QAAAA,KAAK,GAAG;AACb;AACA,eAAKvB,mBAAL,GAA2B,KAAKW,YAAL;AAAA;AAAA,mEAA6C,IAAxE;AACD;;AAESa,QAAAA,UAAU,CAACnB,SAAD,EAAoB;AACtC,cAAI,CAAC,KAAKL,mBAAV,EAA+B;AAC7B,iBAAKN,YAAL,CAAkBW,SAAlB;AACD;AACF;;AA7GwF,O;;;;;iBASjD,I;;;;;;;iBAWA,K","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Component, _decorator } from 'cc';\r\nimport CubismUpdateController from '../CubismUpdateController';\r\nimport CubismUpdateExecutionOrder from '../CubismUpdateExecutionOrder';\r\nimport CubismPhysics from './CubismPhysics';\r\nimport CubismPhysicsRig from './CubismPhysicsRig';\r\nimport ComponentExtensionMethods from '../../Core/ComponentExtensionMethods';\r\nimport ICubismUpdatable from '../ICubismUpdatable';\r\nimport type CubismParameter from '../../Core/CubismParameter';\r\nimport CubismRenderController from '../../Rendering/CubismRenderController';\r\nimport CubismMaskController from '../../Rendering/Masking/CubismMaskController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CubismPhysicsController')\r\nexport default class CubismPhysicsController extends Component implements ICubismUpdatable {\r\n  private get rig() {\r\n    return this._rig;\r\n  }\r\n  private set rig(value: CubismPhysicsRig | null) {\r\n    this._rig = value;\r\n  }\r\n\r\n  @property({ type: CubismPhysicsRig, serializable: true })\r\n  private _rig: CubismPhysicsRig | null = null;\r\n\r\n  private _parameters: CubismParameter[] | null = null;\r\n  public get parameters(): CubismParameter[] | null {\r\n    return this._parameters;\r\n  }\r\n  private set parameters(value: CubismParameter[] | null) {\r\n    this._parameters = value;\r\n  }\r\n\r\n  @property({ serializable: false, visible: false })\r\n  private _hasUpdateController: boolean = false;\r\n  public get hasUpdateController(): boolean {\r\n    return this._hasUpdateController;\r\n  }\r\n  private set hasUpdateController(value: boolean) {\r\n    this._hasUpdateController = value;\r\n  }\r\n\r\n  public get executionOrder(): number {\r\n    return CubismUpdateExecutionOrder.CUBISM_PHYSICS_CONTROLLER;\r\n  }\r\n\r\n  public get needsUpdateOnEditing(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public onLateUpdate(deltaTime: number) {\r\n    let _deltaTime = deltaTime;\r\n\r\n    // Use fixed delta time if required.\r\n    if (CubismPhysics.useFixedDeltaTime) {\r\n      // TODO: 存在しないAPI\r\n      // _deltaTime = Time.fixedDeltaTime;\r\n    }\r\n\r\n    // Evaluate rig.\r\n    this.rig?.evaluate(_deltaTime);\r\n  }\r\n\r\n  /** Calculate until the physics is stable and update the model information. */\r\n  public stabilization(): void {\r\n    if (this.rig == null) {\r\n      return;\r\n    }\r\n\r\n    this.rig.stabilization();\r\n\r\n    const renderController = this.getComponent(CubismRenderController);\r\n    const maskController = this.getComponent(CubismMaskController);\r\n\r\n    console.assert(renderController != null);\r\n\r\n    renderController?.onLateUpdate();\r\n    maskController?.onLateUpdate();\r\n  }\r\n\r\n  /** ICubismUpdatable Binded callback function. */\r\n  public readonly bindedOnLateUpdate: ICubismUpdatable.CallbackFunction =\r\n    this.onLateUpdate.bind(this);\r\n\r\n  /** ICubismUpdatable metadata */\r\n  public readonly [ICubismUpdatable.SYMBOL]: typeof ICubismUpdatable.SYMBOL =\r\n    ICubismUpdatable.SYMBOL;\r\n\r\n  public initialize(rig: CubismPhysicsRig) {\r\n    this.rig = rig;\r\n    this.onLoad();\r\n  }\r\n\r\n  public onLoad() {\r\n    // Check rig existence.\r\n    if (this.rig == null) {\r\n      return;\r\n    }\r\n\r\n    // Initialize rig.\r\n    this.rig.controller = this;\r\n    const subRigs = this.rig.subRigs;\r\n    for (let i = 0; i < subRigs.length; i++) {\r\n      const subRig = subRigs[i];\r\n      if (subRig != null) {\r\n        subRig.rig = this.rig;\r\n      }\r\n    }\r\n\r\n    this.parameters = ComponentExtensionMethods.findCubismModel(this)?.parameters ?? null;\r\n\r\n    this.rig.initialize();\r\n  }\r\n\r\n  public start() {\r\n    // Get cubism update controller.\r\n    this.hasUpdateController = this.getComponent(CubismUpdateController) != null;\r\n  }\r\n\r\n  protected lateUpdate(deltaTime: number) {\r\n    if (!this.hasUpdateController) {\r\n      this.onLateUpdate(deltaTime);\r\n    }\r\n  }\r\n}\r\n"]}