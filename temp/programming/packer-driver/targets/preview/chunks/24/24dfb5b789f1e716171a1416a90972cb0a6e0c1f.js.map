{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/CubismUpdateController.ts"],"names":["_decorator","Component","ICubismUpdatable","CubismUpdateExecutionOrder","ComponentExtensionMethods","ccclass","executeInEditMode","CubismUpdateController","_onLateUpdate","refresh","model","findCubismModel","console","error","components","getComponents","filter","value","index","array","isImplements","sortByExecutionOrder","map","_index","_array","bindedOnLateUpdate","start","lateUpdate","deltaTime","forEach","element"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAOSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACdC,MAAAA,gB;;AACAC,MAAAA,0B;;AACAC,MAAAA,yB;;;;;;AAVP;AACA;AACA;AACA;AACA;AACA;;;;;OAMM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAiCN,U;;yBAMlBO,sB,WAFpBF,OAAO,CAAC,wBAAD,C,gBACPC,iB,UADD,MAEqBC,sBAFrB,SAEoDN,SAFpD,CAE8D;AAAA;AAAA;AAAA,eACpDO,aADoD,GACrB,EADqB;AAAA;;AAGrDC,QAAAA,OAAO,GAAG;AACf,cAAMC,KAAK,GAAG;AAAA;AAAA,sEAA0BC,eAA1B,CAA0C,IAA1C,CAAd,CADe,CAGf;;AACA,cAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,YAAAA,OAAO,CAACC,KAAR,CAAc,kDAAd;AACA;AACD,WAPc,CASf;;;AACA,cAAIC,UAAU,GAAGJ,KAAK,CACnBK,aADc,CACAd,SADA,EAEde,MAFc,CAEP,CAACC,KAAD,EAAmBC,KAAnB,EAAkCC,KAAlC,KACN;AAAA;AAAA,oDAAiBC,YAAjB,CAA8BH,KAA9B,CAHa,CAAjB;AAKA;AAAA;AAAA,wEAA2BI,oBAA3B,CAAgDP,UAAhD,EAfe,CAiBf;;AACA,eAAKN,aAAL,GAAqBM,UAAU,CAACQ,GAAX,CAAe,CAACL,KAAD,EAAQM,MAAR,EAAgBC,MAAhB,KAA2BP,KAAK,CAACQ,kBAAhD,CAArB;AACD;;AAESC,QAAAA,KAAK,GAAG;AAChB,eAAKjB,OAAL;AACD;;AAESkB,QAAAA,UAAU,CAACC,SAAD,EAAoB;AACtC;AACA,eAAKpB,aAAL,CAAmBqB,OAAnB,CAA4BC,OAAD,IAAa;AACtCA,YAAAA,OAAO,CAACF,SAAD,CAAP;AACD,WAFD;AAGD;;AAjC2D,O","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component } from 'cc';\r\nimport ICubismUpdatable from './ICubismUpdatable';\r\nimport CubismUpdateExecutionOrder from './CubismUpdateExecutionOrder';\r\nimport ComponentExtensionMethods from '../Core/ComponentExtensionMethods';\r\nconst { ccclass, executeInEditMode } = _decorator;\r\n\r\ntype Action = (deltaTime: number) => void;\r\n\r\n@ccclass('CubismUpdateController')\r\n@executeInEditMode\r\nexport default class CubismUpdateController extends Component {\r\n  private _onLateUpdate: Array<Action> = [];\r\n\r\n  public refresh() {\r\n    const model = ComponentExtensionMethods.findCubismModel(this);\r\n\r\n    // Fail silently...\r\n    if (model == null) {\r\n      console.error('CubismUpdateController.refresh(): model is null.');\r\n      return;\r\n    }\r\n\r\n    // Set delegate.\r\n    let components = model\r\n      .getComponents(Component)\r\n      .filter((value: Component, index: number, array: Component[]) =>\r\n        ICubismUpdatable.isImplements(value)\r\n      ) as Array<ICubismUpdatable & Component>;\r\n    CubismUpdateExecutionOrder.sortByExecutionOrder(components);\r\n\r\n    // Set the null value when refreshed UpdateController to avoid duplicated registering.\r\n    this._onLateUpdate = components.map((value, _index, _array) => value.bindedOnLateUpdate);\r\n  }\r\n\r\n  protected start() {\r\n    this.refresh();\r\n  }\r\n\r\n  protected lateUpdate(deltaTime: number) {\r\n    // Cubism late update.\r\n    this._onLateUpdate.forEach((element) => {\r\n      element(deltaTime);\r\n    });\r\n  }\r\n}\r\n"]}