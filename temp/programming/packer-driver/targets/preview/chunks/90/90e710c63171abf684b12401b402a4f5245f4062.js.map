{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskController.ts"],"names":["MasksMaskedsPair","MasksMaskedsPairs","Component","_decorator","ComponentExtensionMethods","CubismUpdateController","CubismUpdateExecutionOrder","ICubismUpdatable","CubismRenderer","CubismMaskMaskedJunction","CubismMaskRenderer","CubismMaskTexture","ccclass","property","executeInEditMode","CubismMaskController","type","serializable","visible","readonly","SYMBOL","_junctions","bindedOnLateUpdate","onLateUpdate","bind","maskTexture","_maskTexture","globalMaskTexture","value","onDestroy","start","junctions","isRevived","hasUpdateController","_hasUpdateController","tryRevive","forceRevive","model","findCubismModel","console","warn","drawables","pairs","i","length","isMasked","masks","filter","mask","add","Array","entries","j","setMainRenderer","setMasks","setMaskeds","maskeds","setMaskTexture","executionOrder","CUBISM_MASK_CONTROLLER","needsUpdateOnEditing","enabled","error","update","addSource","getComponent","lateUpdate","removeSource","getNecessaryTileCount","setTiles","setMaskTile","addToCommandBuffer","buffer","constructor","args","masked","match","renderer","push","renderers"],"mappings":";;;2QAmPaA,gB,EAYAC,iB;;;;;;;;;;;;;;;;;;AAxPJC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACbC,MAAAA,yB;;AACAC,MAAAA,sB;;AACAC,MAAAA,0B;;AACAC,MAAAA,gB;;AACAC,MAAAA,c;;AACAC,MAAAA,wB;;AACAC,MAAAA,kB;;AACAC,MAAAA,iB;;;;AAfP;AACA;AACA;AACA;AACA;AACA;;;;;OAeM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA2CX,U,GAEjD;;AACA;;yBAGqBY,oB,WAFpBH,OAAO,CAAC,sBAAD,C,UAOLC,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEL,iBAAR;AAA2BM,QAAAA,YAAY,EAAE,IAAzC;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OAAD,C,UAIRL,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEL,iBAAR;AAA2BO,QAAAA,OAAO,EAAE,IAApC;AAA0CC,QAAAA,QAAQ,EAAE;AAApD,OAAD,C,UAkCRN,QAAQ,CAAC;AAAEI,QAAAA,YAAY,EAAE,IAAhB;AAAsBC,QAAAA,OAAO,EAAE;AAA/B,OAAD,C,iBA5CVJ,iB,+CAuIkBP,gBAAgB,CAACa,M,EAxIpC,MAEqBL,oBAFrB,SAGUb,SAHV,CAKA;AAAA;AAAA;;AACE;AADF;;AAyBE;AAzBF,eA0BUmB,UA1BV,GA0B0D,IA1B1D;;AAuCE;AAvCF;;AA+HE;AA/HF,eAgIkBC,kBAhIlB,GAiII,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAjIJ;;AAkIE;AAlIF,wCAoIIjB,gBAAgB,CAACa,MApIrB;AAAA;;AAKE;AAEsB,YAAXK,WAAW,GAAG;AACvB;AACA,cAAI,KAAKC,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,iBAAKA,YAAL,GAAoBf,iBAAiB,CAACgB,iBAAtC;AACD;;AACD,iBAAO,KAAKD,YAAZ;AACD;;AACqB,YAAXD,WAAW,CAACG,KAAD,EAAQ;AAC5B;AACA,cAAIA,KAAK,IAAI,KAAKF,YAAlB,EAAgC;AAC9B;AACD;;AACD,eAAKA,YAAL,GAAoBE,KAApB,CAL4B,CAM5B;;AACA,eAAKC,SAAL;AACA,eAAKC,KAAL;AACD;;AAIoB,YAATC,SAAS,GAAG;AACtB,iBAAO,KAAKV,UAAZ;AACD;;AACoB,YAATU,SAAS,CAACH,KAAD,EAAQ;AAC3B,eAAKP,UAAL,GAAkBO,KAAlB;AACD;AAED;;;AACqB,YAATI,SAAS,GAAY;AAC/B,iBAAO,KAAKD,SAAL,IAAkB,IAAzB;AACD;;AAK6B,YAAnBE,mBAAmB,GAAG;AAC/B,iBAAO,KAAKC,oBAAZ;AACD;;AAC6B,YAAnBD,mBAAmB,CAACL,KAAD,EAAQ;AACpC,eAAKM,oBAAL,GAA4BN,KAA5B;AACD;AAED;;;AACQO,QAAAA,SAAS,GAAS;AACxB,cAAI,KAAKH,SAAT,EAAoB;AAClB;AACD;;AACD,eAAKI,WAAL;AACD;AAED;;;AACQA,QAAAA,WAAW,GAAS;AAC1B,cAAMC,KAAK,GAAGjC,yBAAyB,CAACkC,eAA1B,CAA0C,IAA1C,CAAd;;AACA,cAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,YAAAA,OAAO,CAACC,IAAR,CAAa,qDAAb;AACA;AACD;;AACD,cAAMC,SAAS,GAAGJ,KAAK,CAACI,SAAxB;;AACA,cAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBF,YAAAA,OAAO,CAACC,IAAR,CAAa,gEAAb;AACA;AACD,WAVyB,CAW1B;;;AACA,cAAME,KAAK,GAAG,IAAIzC,iBAAJ,EAAd;;AACA,eAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,gBAAI,CAACF,SAAS,CAACE,CAAD,CAAT,CAAaE,QAAlB,EAA4B;AAC1B;AACD,aAHwC,CAIzC;;;AACA,gBAAMC,KAAK,GAAGL,SAAS,CAACE,CAAD,CAAT,CAAaG,KAAb,CAAmBC,MAAnB,CAA2BC,IAAD,IAAUA,IAAI,IAAI,IAA5C,CAAd;;AACA,gBAAIF,KAAK,CAACF,MAAN,IAAgB,CAApB,EAAuB;AACrB;AACD;;AACDF,YAAAA,KAAK,CAACO,GAAN,CAAUR,SAAS,CAACE,CAAD,CAAnB,EAAwBG,KAAxB;AACD,WAvByB,CAyB1B;;;AACA,eAAKf,SAAL,GAAiB,IAAImB,KAAJ,CAAoCR,KAAK,CAACS,OAAN,CAAcP,MAAlD,CAAjB;;AACA,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,SAAL,CAAea,MAAnC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C;AACA,gBAAMG,MAAK,GAAG,IAAII,KAAJ,CAA8BR,KAAK,CAACS,OAAN,CAAcR,CAAd,EAAiBG,KAAjB,CAAuBF,MAArD,CAAd;;AACA,iBAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAK,CAACF,MAA1B,EAAkC,EAAEQ,CAApC,EAAuC;AACrCN,cAAAA,MAAK,CAACM,CAAD,CAAL,GAAW,IAAI1C,kBAAJ,GAAyB2C,eAAzB,CAAyCX,KAAK,CAACS,OAAN,CAAcR,CAAd,EAAiBG,KAAjB,CAAuBM,CAAvB,CAAzC,CAAX;AACD,aAL6C,CAM9C;;;AACA,gBAAI,KAAK3B,WAAL,IAAoB,IAAxB,EAA8B;AAC5Bc,cAAAA,OAAO,CAACC,IAAR,CAAa,2CAAb;AACA;AACD;;AACD,iBAAKT,SAAL,CAAeY,CAAf,IAAoB,IAAIlC,wBAAJ,GACjB6C,QADiB,CACRR,MADQ,EAEjBS,UAFiB,CAENb,KAAK,CAACS,OAAN,CAAcR,CAAd,EAAiBa,OAFX,EAGjBC,cAHiB,CAGF,KAAKhC,WAHH,CAApB;AAID;AACF;AAED;;;AACyB,YAAdiC,cAAc,GAAW;AAClC,iBAAOpD,0BAA0B,CAACqD,sBAAlC;AACD;AAED;;;AAC+B,YAApBC,oBAAoB,GAAY;AACzC,iBAAO,IAAP;AACD;AAED;;;AACOrC,QAAAA,YAAY,GAAS;AAC1B,cAAI,CAAC,KAAKsC,OAAN,IAAiB,CAAC,KAAK7B,SAA3B,EAAsC;AACpC;AACD;;AACD,cAAI,KAAKD,SAAL,IAAkB,IAAtB,EAA4B;AAC1BQ,YAAAA,OAAO,CAACuB,KAAR,CAAc,yCAAd;AACA;AACD;;AACD,eAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,SAAL,CAAea,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,iBAAKZ,SAAL,CAAeY,CAAf,EAAkBoB,MAAlB;AACD;AACF;;AASD;;AAEA;AACUjC,QAAAA,KAAK,GAAS;AACtB;AACA,cAAI,KAAKL,WAAL,IAAoB,IAAxB,EAA8B;AAC5B;AACD;;AACD,eAAKA,WAAL,CAAiBuC,SAAjB,CAA2B,IAA3B,EALsB,CAMtB;;AACA,eAAK/B,mBAAL,GAA2B,KAAKgC,YAAL,CAAkB5D,sBAAlB,KAA6C,IAAxE;AACD;AAED;;;AACU6D,QAAAA,UAAU,GAAS;AAC3B,cAAI,CAAC,KAAKjC,mBAAV,EAA+B;AAC7B,iBAAKV,YAAL;AACD;AACF;AAED;;;AACUM,QAAAA,SAAS,GAAS;AAC1B,cAAI,KAAKJ,WAAL,IAAoB,IAAxB,EAA8B;AAC5B;AACD;;AACD,eAAKA,WAAL,CAAiB0C,YAAjB,CAA8B,IAA9B;AACD,SAhKH,CAkKE;AAEA;;AAEA;AACF;AACA;AACA;;;AACSC,QAAAA,qBAAqB,GAAW;AACrC,eAAKjC,SAAL;AACA,cAAMJ,SAAS,GAAG,KAAKA,SAAvB;;AACA,cAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBQ,YAAAA,OAAO,CAACC,IAAR,CAAa,yCAAb;AACA,mBAAO,CAAP;AACD;;AACD,iBAAOT,SAAS,CAACa,MAAjB;AACD;AAED;AACF;AACA;AACA;;;AACSyB,QAAAA,QAAQ,CAACzC,KAAD,EAAgC;AAC7C,cAAMG,SAAS,GAAG,KAAKA,SAAvB;;AACA,cAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBQ,YAAAA,OAAO,CAACuB,KAAR,CAAc,yCAAd;AACA;AACD;;AACD,eAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACa,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCZ,YAAAA,SAAS,CAACY,CAAD,CAAT,CAAa2B,WAAb,CAAyB1C,KAAK,CAACe,CAAD,CAA9B;AACD;AACF;AAED;AACF;AACA;AACA;;;AACS4B,QAAAA,kBAAkB,CAACC,MAAD,EAAwC;AAC/D,cAAMzC,SAAS,GAAG,KAAKA,SAAvB;;AACA,cAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBQ,YAAAA,OAAO,CAACuB,KAAR,CAAc,yCAAd;AACA;AACD;;AACD,eAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACa,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCZ,YAAAA,SAAS,CAACY,CAAD,CAAT,CAAa4B,kBAAb,CAAgCC,MAAhC;AACD;AACF;;AAhNH,O;;;;;iBAGmD,I;;;;;;;iBAsCT,K;;;;AA0K1C;;AAEA;kCACaxE,gB,GAAN,MAAMA,gBAAN,CAAuB;AAM5ByE,QAAAA,WAAW,CAACC,IAAD,EAAsE;AAAA;;AAAA,cAArEA,IAAqE;AAArEA,YAAAA,IAAqE,GAAJ,EAAI;AAAA;;AALjF;AAKiF,eAJ1E5B,KAI0E;;AAHjF;AAGiF,eAF1EU,OAE0E;AAC/E,eAAKV,KAAL,kBAAa4B,IAAI,CAAC5B,KAAlB,0BAA2B,IAAII,KAAJ,CAAU,CAAV,CAA3B;AACA,eAAKM,OAAL,oBAAekB,IAAI,CAAClB,OAApB,4BAA+B,IAAIN,KAAJ,CAAU,CAAV,CAA/B;AACD;;AAT2B,O;;mCAYjBjD,iB,GAAN,MAAMA,iBAAN,CAAwB;AAAA;AAC7B;AAD6B,eAEtBkD,OAFsB,GAEQ,IAAID,KAAJ,EAFR;AAAA;;AAI7B;AACF;AACA;AACA;AACA;AACA;AACSD,QAAAA,GAAG,CAAC0B,MAAD,EAAyB7B,KAAzB,EAAwD;AAChE;AACA,eAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKQ,OAAL,CAAaP,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,gBAAIiC,KAAK,GAAG,KAAKzB,OAAL,CAAaR,CAAb,EAAgBG,KAAhB,CAAsBF,MAAtB,IAAgCE,KAAK,CAACF,MAAlD;;AACA,gBAAI,CAACgC,KAAL,EAAY;AACV;AACD;;AACD,iBAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,OAAL,CAAaR,CAAb,EAAgBG,KAAhB,CAAsBF,MAA1C,EAAkDQ,CAAC,EAAnD,EAAuD;AACrD,kBAAI,KAAKD,OAAL,CAAaR,CAAb,EAAgBG,KAAhB,CAAsBM,CAAtB,KAA4BN,KAAK,CAACM,CAAD,CAAL,CAASa,YAAT,CAAsBzD,cAAtB,CAAhC,EAAuE;AACrEoE,gBAAAA,KAAK,GAAG,KAAR;AACA;AACD;AACF;;AACD,gBAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,gBAAMC,SAAQ,GAAGF,MAAM,CAACV,YAAP,CAAoBzD,cAApB,CAAjB;;AACA,gBAAIqE,SAAQ,IAAI,IAAhB,EAAsB;AACpBtC,cAAAA,OAAO,CAACC,IAAR,CAAa,6CAAb;AACA;AACD;;AACD,iBAAKW,OAAL,CAAaR,CAAb,EAAgBa,OAAhB,CAAwBsB,IAAxB,CAA6BD,SAA7B;AACA;AACD,WAvB+D,CAwBhE;;;AACA,cAAME,SAAS,GAAG,IAAI7B,KAAJ,CAA0BJ,KAAK,CAACF,MAAhC,CAAlB;;AACA,eAAK,IAAID,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGG,KAAK,CAACF,MAA1B,EAAkCD,EAAC,EAAnC,EAAuC;AACrC,gBAAMkC,UAAQ,GAAG/B,KAAK,CAACH,EAAD,CAAL,CAASsB,YAAT,CAAsBzD,cAAtB,CAAjB;;AACA,gBAAIqE,UAAQ,IAAI,IAAhB,EAAsB;AACpBtC,cAAAA,OAAO,CAACC,IAAR,CAAa,+CAAb;AACA;AACD;;AACDuC,YAAAA,SAAS,CAACpC,EAAD,CAAT,GAAekC,UAAf;AACD;;AACD,cAAMA,QAAQ,GAAGF,MAAM,CAACV,YAAP,CAAoBzD,cAApB,CAAjB;;AACA,cAAIqE,QAAQ,IAAI,IAAhB,EAAsB;AACpBtC,YAAAA,OAAO,CAACC,IAAR,CAAa,6CAAb;AACA;AACD;;AACD,eAAKW,OAAL,CAAa2B,IAAb,CAAkB,IAAI9E,gBAAJ,CAAqB;AAAE8C,YAAAA,KAAK,EAAEiC,SAAT;AAAoBvB,YAAAA,OAAO,EAAE,IAAIN,KAAJ,CAAU2B,QAAV;AAA7B,WAArB,CAAlB;AACD;;AAlD4B,O,GAqD/B","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Component, _decorator } from 'cc';\r\nimport ComponentExtensionMethods from '../../Core/ComponentExtensionMethods';\r\nimport CubismUpdateController from '../../Framework/CubismUpdateController';\r\nimport CubismUpdateExecutionOrder from '../../Framework/CubismUpdateExecutionOrder';\r\nimport ICubismUpdatable from '../../Framework/ICubismUpdatable';\r\nimport CubismRenderer from '../CubismRenderer';\r\nimport CubismMaskMaskedJunction from './CubismMaskMaskedJunction';\r\nimport CubismMaskRenderer from './CubismMaskRenderer';\r\nimport CubismMaskTexture from './CubismMaskTexture';\r\nimport type CubismDrawable from '../../Core/CubismDrawable';\r\nimport type CubismMaskTile from './CubismMaskTile';\r\nimport type ICubismMaskTextureCommandSource from './ICubismMaskTextureCommandSource';\r\nimport type CubismMaskCommandBuffer from './CubismMaskCommandBuffer';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n// TODO: CubismDontMoveOnReimport\r\n/** Controls rendering of Cubism masks. */\r\n@ccclass('CubismMaskController')\r\n@executeInEditMode\r\nexport default class CubismMaskController\r\n  extends Component\r\n  implements ICubismMaskTextureCommandSource, ICubismUpdatable\r\n{\r\n  /** MaskTexture backing field. */\r\n  @property({ type: CubismMaskTexture, serializable: true, visible: false })\r\n  private _maskTexture: CubismMaskTexture | null = null;\r\n\r\n  /** Mask texture. */\r\n  @property({ type: CubismMaskTexture, visible: true, readonly: true })\r\n  public get maskTexture() {\r\n    // Fall back to global mask texture.\r\n    if (this._maskTexture == null) {\r\n      this._maskTexture = CubismMaskTexture.globalMaskTexture;\r\n    }\r\n    return this._maskTexture;\r\n  }\r\n  public set maskTexture(value) {\r\n    // Return early if same value given.\r\n    if (value == this._maskTexture) {\r\n      return;\r\n    }\r\n    this._maskTexture = value;\r\n    // Try switch mask textures.\r\n    this.onDestroy();\r\n    this.start();\r\n  }\r\n\r\n  /** CubismMaskRenderers. */\r\n  private _junctions: CubismMaskMaskedJunction[] | null = null;\r\n  private get junctions() {\r\n    return this._junctions;\r\n  }\r\n  private set junctions(value) {\r\n    this._junctions = value;\r\n  }\r\n\r\n  /** True if controller is revived. */\r\n  private get isRevived(): boolean {\r\n    return this.junctions != null;\r\n  }\r\n\r\n  /** Model has update controller component. */\r\n  @property({ serializable: true, visible: false })\r\n  private _hasUpdateController: boolean = false;\r\n  public get hasUpdateController() {\r\n    return this._hasUpdateController;\r\n  }\r\n  public set hasUpdateController(value) {\r\n    this._hasUpdateController = value;\r\n  }\r\n\r\n  /** Makes sure controller is initialized once. */\r\n  private tryRevive(): void {\r\n    if (this.isRevived) {\r\n      return;\r\n    }\r\n    this.forceRevive();\r\n  }\r\n\r\n  /** Initializes Junctions. */\r\n  private forceRevive(): void {\r\n    const model = ComponentExtensionMethods.findCubismModel(this);\r\n    if (model == null) {\r\n      console.warn('ComponentExtensionMethods.findCubismModel() failed.');\r\n      return;\r\n    }\r\n    const drawables = model.drawables;\r\n    if (drawables == null) {\r\n      console.warn('ComponentExtensionMethods.findCubismModel().drawables is null.');\r\n      return;\r\n    }\r\n    // Find mask pairs.\r\n    const pairs = new MasksMaskedsPairs();\r\n    for (var i = 0; i < drawables.length; i++) {\r\n      if (!drawables[i].isMasked) {\r\n        continue;\r\n      }\r\n      // Make sure no leftover null-entries are added as mask.\r\n      const masks = drawables[i].masks.filter((mask) => mask != null);\r\n      if (masks.length == 0) {\r\n        continue;\r\n      }\r\n      pairs.add(drawables[i], masks);\r\n    }\r\n\r\n    // Initialize junctions.\r\n    this.junctions = new Array<CubismMaskMaskedJunction>(pairs.entries.length);\r\n    for (var i = 0; i < this.junctions.length; ++i) {\r\n      // Create mask renderers for junction.\r\n      const masks = new Array<CubismMaskRenderer>(pairs.entries[i].masks.length);\r\n      for (var j = 0; j < masks.length; ++j) {\r\n        masks[j] = new CubismMaskRenderer().setMainRenderer(pairs.entries[i].masks[j]);\r\n      }\r\n      // Create junction.\r\n      if (this.maskTexture == null) {\r\n        console.warn('CubismMaskController.maskTexture is null.');\r\n        return;\r\n      }\r\n      this.junctions[i] = new CubismMaskMaskedJunction()\r\n        .setMasks(masks)\r\n        .setMaskeds(pairs.entries[i].maskeds)\r\n        .setMaskTexture(this.maskTexture);\r\n    }\r\n  }\r\n\r\n  /** Called by cubism update controller. Order to invoke OnLateUpdate. */\r\n  public get executionOrder(): number {\r\n    return CubismUpdateExecutionOrder.CUBISM_MASK_CONTROLLER;\r\n  }\r\n\r\n  /** Called by cubism update controller. Needs to invoke OnLateUpdate on Editing. */\r\n  public get needsUpdateOnEditing(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /** Called by cubism update controller. Updates {@link junctions}. */\r\n  public onLateUpdate(): void {\r\n    if (!this.enabled || !this.isRevived) {\r\n      return;\r\n    }\r\n    if (this.junctions == null) {\r\n      console.error('CubismMaskController.junctions is null.');\r\n      return;\r\n    }\r\n    for (let i = 0; i < this.junctions.length; i++) {\r\n      this.junctions[i].update();\r\n    }\r\n  }\r\n\r\n  /** ICubismUpdatable Binded callback function. */\r\n  public readonly bindedOnLateUpdate: ICubismUpdatable.CallbackFunction =\r\n    this.onLateUpdate.bind(this);\r\n  /** ICubismUpdatable metadata */\r\n  public readonly [ICubismUpdatable.SYMBOL]: typeof ICubismUpdatable.SYMBOL =\r\n    ICubismUpdatable.SYMBOL;\r\n\r\n  // #region Cocos Creator Event Handling\r\n\r\n  /** Initializes instance. */\r\n  protected start(): void {\r\n    // Fail silently.\r\n    if (this.maskTexture == null) {\r\n      return;\r\n    }\r\n    this.maskTexture.addSource(this);\r\n    // Get cubism update controller.\r\n    this.hasUpdateController = this.getComponent(CubismUpdateController) != null;\r\n  }\r\n\r\n  /** Called by Cocos Creator. */\r\n  protected lateUpdate(): void {\r\n    if (!this.hasUpdateController) {\r\n      this.onLateUpdate();\r\n    }\r\n  }\r\n\r\n  /** Finalizes instance. */\r\n  protected onDestroy(): void {\r\n    if (this.maskTexture == null) {\r\n      return;\r\n    }\r\n    this.maskTexture.removeSource(this);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region ICubismMaskDrawSource\r\n\r\n  /**\r\n   * Queries the number of tiles needed by the source.\r\n   * @returns The necessary number of tiles needed.\r\n   */\r\n  public getNecessaryTileCount(): number {\r\n    this.tryRevive();\r\n    const junctions = this.junctions;\r\n    if (junctions == null) {\r\n      console.warn('CubismMaskController.junctions is null.');\r\n      return 0;\r\n    }\r\n    return junctions.length;\r\n  }\r\n\r\n  /**\r\n   * Assigns the tiles.\r\n   * @param value Tiles to assign.\r\n   */\r\n  public setTiles(value: CubismMaskTile[]): void {\r\n    const junctions = this.junctions;\r\n    if (junctions == null) {\r\n      console.error('CubismMaskController.junctions is null.');\r\n      return;\r\n    }\r\n    for (let i = 0; i < junctions.length; i++) {\r\n      junctions[i].setMaskTile(value[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when source should instantly draw.\r\n   * @param buffer\r\n   */\r\n  public addToCommandBuffer(buffer: CubismMaskCommandBuffer): void {\r\n    const junctions = this.junctions;\r\n    if (junctions == null) {\r\n      console.error('CubismMaskController.junctions is null.');\r\n      return;\r\n    }\r\n    for (let i = 0; i < junctions.length; i++) {\r\n      junctions[i].addToCommandBuffer(buffer);\r\n    }\r\n  }\r\n}\r\n\r\n// #region Mask-Masked Pair\r\n\r\n/** Pair of masks and masked drawables. (struct) */\r\nexport class MasksMaskedsPair {\r\n  /** Mask drawables. */\r\n  public masks: CubismRenderer[];\r\n  /** Masked drawables. */\r\n  public maskeds: CubismRenderer[];\r\n\r\n  constructor(args: { masks?: CubismRenderer[]; maskeds?: CubismRenderer[] } = {}) {\r\n    this.masks = args.masks ?? new Array(0);\r\n    this.maskeds = args.maskeds ?? new Array(0);\r\n  }\r\n}\r\n\r\nexport class MasksMaskedsPairs {\r\n  /** List of MasksMaskedsPair */\r\n  public entries: MasksMaskedsPair[] = new Array<MasksMaskedsPair>();\r\n\r\n  /**\r\n   * Add MasksMaskedsPair to the list.\r\n   * @param masked\r\n   * @param masks\r\n   * @returns\r\n   */\r\n  public add(masked: CubismDrawable, masks: CubismDrawable[]): void {\r\n    // Try to add masked to existing mask compound.\r\n    for (let i = 0; i < this.entries.length; i++) {\r\n      let match = this.entries[i].masks.length == masks.length;\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      for (let j = 0; j < this.entries[i].masks.length; j++) {\r\n        if (this.entries[i].masks[j] != masks[j].getComponent(CubismRenderer)) {\r\n          match = false;\r\n          break;\r\n        }\r\n      }\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      const renderer = masked.getComponent(CubismRenderer);\r\n      if (renderer == null) {\r\n        console.warn('masked.getComponent(CubismRenderer) failed.');\r\n        return;\r\n      }\r\n      this.entries[i].maskeds.push(renderer);\r\n      return;\r\n    }\r\n    // Create new pair.\r\n    const renderers = new Array<CubismRenderer>(masks.length);\r\n    for (let i = 0; i < masks.length; i++) {\r\n      const renderer = masks[i].getComponent(CubismRenderer);\r\n      if (renderer == null) {\r\n        console.warn('masks[i].getComponent(CubismRenderer) failed.');\r\n        return;\r\n      }\r\n      renderers[i] = renderer;\r\n    }\r\n    const renderer = masked.getComponent(CubismRenderer);\r\n    if (renderer == null) {\r\n      console.warn('masked.getComponent(CubismRenderer) failed.');\r\n      return;\r\n    }\r\n    this.entries.push(new MasksMaskedsPair({ masks: renderers, maskeds: new Array(renderer) }));\r\n  }\r\n}\r\n\r\n// #endregion\r\n"]}