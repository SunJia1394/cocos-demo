{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/CubismParameterExtensionMethods.ts"],"names":["CubismParameterBlendMode","addToValue","parameter","value","weight","multiplyValueBy","blendToValue","self","mode","Additive","CubismParameterExtensionMethods","Multiply","blendToValueArray","i","length","buff"],"mappings":";;;;;;;;;;;AAQOA,MAAAA,wB;;;;;AARP;AACA;AACA;AACA;AACA;AACA;;;;AAOS,iBAASC,UAAT,CACLC,SADK,EAELC,KAFK,EAGLC,MAHK,EAIL;AAAA,cADAA,MACA;AADAA,YAAAA,MACA,GADiB,GACjB;AAAA;;AACA,cAAIF,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACD;;AAEDA,UAAAA,SAAS,CAACC,KAAV,IAAmBA,KAAK,GAAGC,MAA3B;AACD;;;;AAEM,iBAASC,eAAT,CACLH,SADK,EAELC,KAFK,EAGLC,MAHK,EAIL;AAAA,cADAA,MACA;AADAA,YAAAA,MACA,GADiB,GACjB;AAAA;;AACA,cAAIF,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACD;;AAEDA,UAAAA,SAAS,CAACC,KAAV,IAAmB,MAAM,CAACA,KAAK,GAAG,GAAT,IAAgBC,MAAzC;AACD;;;;AAEM,iBAASE,YAAT,CACLC,IADK,EAELC,IAFK,EAGLL,KAHK,EAIL;AACA,cAAII,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AAED,cAAIC,IAAI,IAAIR,wBAAwB,CAACS,QAArC,EAA+C;AAC7CC,YAAAA,+BAA+B,CAACT,UAAhC,CAA2CM,IAA3C,EAAiDJ,KAAjD;AAEA;AACD;;AAED,cAAIK,IAAI,IAAIR,wBAAwB,CAACW,QAArC,EAA+C;AAC7CD,YAAAA,+BAA+B,CAACL,eAAhC,CAAgDE,IAAhD,EAAsDJ,KAAtD;AAEA;AACD;;AAEDI,UAAAA,IAAI,CAACJ,KAAL,GAAaA,KAAb;AACD;;;;AAEM,iBAASS,iBAAT,CACLL,IADK,EAELC,IAFK,EAGLL,KAHK,EAIL;AACA,cAAII,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AAED,cAAIC,IAAI,IAAIR,wBAAwB,CAACS,QAArC,EAA+C;AAC7C,iBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,kBAAIN,IAAI,CAACM,CAAD,CAAJ,IAAW,IAAf,EAAqB;AACnBH,gBAAAA,+BAA+B,CAACT,UAAhC,CAA2CM,IAAI,CAACM,CAAD,CAA/C,EAAoDV,KAApD;AACD;AACF;;AAED;AACD;;AAED,cAAIK,IAAI,IAAIR,wBAAwB,CAACW,QAArC,EAA+C;AAC7C,iBAAK,IAAIE,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiC,EAAED,EAAnC,EAAsC;AACpC,kBAAIN,IAAI,CAACM,EAAD,CAAJ,IAAW,IAAf,EAAqB;AACnBH,gBAAAA,+BAA+B,CAACL,eAAhC,CAAgDE,IAAI,CAACM,EAAD,CAApD,EAAyDV,KAAzD;AACD;AACF;;AAED;AACD;;AAED,eAAK,IAAIU,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiC,EAAED,GAAnC,EAAsC;AACpC,gBAAME,IAAI,GAAGR,IAAI,CAACM,GAAD,CAAjB;;AAEA,gBAAIE,IAAI,IAAI,IAAZ,EAAkB;AAChBA,cAAAA,IAAI,CAACZ,KAAL,GAAaA,KAAb;AACD;AACF;AACF;;;SArFOO,+B,KAAAA,+B;;yBAuFKA,+B","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator } from 'cc';\r\nimport CubismParameterBlendMode from './CubismParameterBlendMode';\r\nimport type CubismParameter from '../Core/CubismParameter';\r\n\r\nnamespace CubismParameterExtensionMethods {\r\n  export function addToValue(\r\n    parameter: CubismParameter | null,\r\n    value: number,\r\n    weight: number = 1.0\r\n  ) {\r\n    if (parameter == null) {\r\n      return;\r\n    }\r\n\r\n    parameter.value += value * weight;\r\n  }\r\n\r\n  export function multiplyValueBy(\r\n    parameter: CubismParameter | null,\r\n    value: number,\r\n    weight: number = 1.0\r\n  ) {\r\n    if (parameter == null) {\r\n      return;\r\n    }\r\n\r\n    parameter.value *= 1.0 + (value - 1.0) * weight;\r\n  }\r\n\r\n  export function blendToValue(\r\n    self: CubismParameter | null,\r\n    mode: CubismParameterBlendMode,\r\n    value: number\r\n  ) {\r\n    if (self == null) {\r\n      return;\r\n    }\r\n\r\n    if (mode == CubismParameterBlendMode.Additive) {\r\n      CubismParameterExtensionMethods.addToValue(self, value);\r\n\r\n      return;\r\n    }\r\n\r\n    if (mode == CubismParameterBlendMode.Multiply) {\r\n      CubismParameterExtensionMethods.multiplyValueBy(self, value);\r\n\r\n      return;\r\n    }\r\n\r\n    self.value = value;\r\n  }\r\n\r\n  export function blendToValueArray(\r\n    self: Array<CubismParameter | null>,\r\n    mode: CubismParameterBlendMode,\r\n    value: number\r\n  ) {\r\n    if (self == null) {\r\n      return;\r\n    }\r\n\r\n    if (mode == CubismParameterBlendMode.Additive) {\r\n      for (let i = 0; i < self.length; ++i) {\r\n        if (self[i] != null) {\r\n          CubismParameterExtensionMethods.addToValue(self[i], value);\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (mode == CubismParameterBlendMode.Multiply) {\r\n      for (let i = 0; i < self.length; ++i) {\r\n        if (self[i] != null) {\r\n          CubismParameterExtensionMethods.multiplyValueBy(self[i], value);\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < self.length; ++i) {\r\n      const buff = self[i];\r\n\r\n      if (buff != null) {\r\n        buff.value = value;\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default CubismParameterExtensionMethods;\r\n"]}