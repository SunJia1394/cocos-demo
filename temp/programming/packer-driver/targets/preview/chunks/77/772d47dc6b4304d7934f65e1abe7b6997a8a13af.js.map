{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Expression/CubismExpressionData.ts"],"names":["Asset","CCFloat","Enum","_decorator","CubismParameterBlendMode","ccclass","property","SerializableExpressionParameter","serializable","type","constructor","args","id","value","blend","Override","copyWith","equals","other","strictEquals","CubismExpressionData","createInstance","json","expressionData","createInstance2","fadeInTime","fadeOutTime","parameters","Array","length","i","Additive","Multiply"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Asset, CCFloat, Enum, _decorator } from 'cc';\r\nimport CubismParameterBlendMode from '../CubismParameterBlendMode';\r\nimport type CubismExp3Json from '../Json/CubismExp3Json';\r\nimport type IStructLike from '../../IStructLike';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/** ExpressionParameter (struct) */\r\n@ccclass('CubismExpressionData.SerializableExpressionParameter')\r\nexport class SerializableExpressionParameter\r\n  implements IStructLike<SerializableExpressionParameter>\r\n{\r\n  /** Expression Parameter Id */\r\n  @property({ serializable: true })\r\n  public readonly id: string = '';\r\n\r\n  /** Expression Parameter Value */\r\n  @property({ type: CCFloat, serializable: true })\r\n  public readonly value: number = 0;\r\n\r\n  /** Expression Parameter Blend Mode */\r\n  @property({ type: Enum(CubismParameterBlendMode), serializable: true })\r\n  public readonly blend: CubismParameterBlendMode = CubismParameterBlendMode.Override;\r\n\r\n  public constructor(args: { id?: string; value?: number; blend?: CubismParameterBlendMode } = {}) {\r\n    this.id = args.id ?? '';\r\n    this.value = args.value ?? 0;\r\n    this.blend = args.blend ?? CubismParameterBlendMode.Override;\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      id?: string;\r\n      value?: number;\r\n      blend?: CubismParameterBlendMode;\r\n    } = {}\r\n  ): SerializableExpressionParameter {\r\n    return new SerializableExpressionParameter({\r\n      id: args.id ?? this.id,\r\n      value: args.value ?? this.value,\r\n      blend: args.blend ?? this.blend,\r\n    });\r\n  }\r\n\r\n  public equals(other: SerializableExpressionParameter): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  public strictEquals(other: SerializableExpressionParameter): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n@ccclass('CubismExpressionData')\r\nclass CubismExpressionData extends Asset {\r\n  /** Expression type. */\r\n  @property({ serializable: true })\r\n  public type: string = '';\r\n\r\n  /** Expression fade in time. */\r\n  @property({ type: CCFloat, serializable: true })\r\n  public fadeInTime: number = 0;\r\n\r\n  /** Expression fade out time. */\r\n  @property({ type: CCFloat, serializable: true })\r\n  public fadeOutTime: number = 0;\r\n\r\n  /** Expression Parameters */\r\n  @property({ type: SerializableExpressionParameter, serializable: true })\r\n  public parameters: SerializableExpressionParameter[] = new Array();\r\n\r\n  public static createInstance(json: CubismExp3Json): CubismExpressionData {\r\n    const expressionData = new CubismExpressionData();\r\n    return this.createInstance2(expressionData, json);\r\n  }\r\n\r\n  public static createInstance2(\r\n    expressionData: CubismExpressionData,\r\n    json: CubismExp3Json\r\n  ): CubismExpressionData {\r\n    expressionData.type = json.type;\r\n    expressionData.fadeInTime = json.fadeInTime;\r\n    expressionData.fadeOutTime = json.fadeOutTime;\r\n    expressionData.parameters = new Array(json.parameters.length);\r\n    for (let i = 0; i < json.parameters.length; i++) {\r\n      let blend: CubismParameterBlendMode;\r\n      switch (json.parameters[i].blend) {\r\n        case 'Add':\r\n          blend = CubismParameterBlendMode.Additive;\r\n          break;\r\n        case 'Multiply':\r\n          blend = CubismParameterBlendMode.Multiply;\r\n          break;\r\n        case 'Overwrite':\r\n          blend = CubismParameterBlendMode.Override;\r\n          break;\r\n        default:\r\n          blend = CubismParameterBlendMode.Additive;\r\n          break;\r\n      }\r\n      expressionData.parameters[i] = new SerializableExpressionParameter({\r\n        id: json.parameters[i].id,\r\n        value: json.parameters[i].value,\r\n        blend: blend,\r\n      });\r\n    }\r\n    return expressionData;\r\n  }\r\n}\r\nexport default CubismExpressionData;\r\n"]}