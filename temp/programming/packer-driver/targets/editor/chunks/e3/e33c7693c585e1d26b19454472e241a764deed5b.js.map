{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/MouthMovement/CubismAudioMouthInput.ts"],"names":["AudioSource","CCFloat","Component","Enum","math","_decorator","MathExtensions","CubismAudioSamplingQuality","CubismMouthController","ccclass","property","requireComponent","CubismAudioMouthInput","type","slide","range","_samples","_lastRms","velocityBuffer","_target","isInitializing","sampleRate","samples","value","lastRms","target","isInitialized","tryInitialize","initSamples","getComponent","audioInput","sampleRatePromise","getSampleRate","pcmPromise","getPCMData","pcm","Promise","all","update","deltaTime","gain","smoothing","trunc","sqrt","Math","currentTime","pos","length","samplingQuality","veryHigh","maximum","total","i","sample","getData","rms","clamp01","output","Float","smoothDamp","undefined","mouthOpening","onEnable","high"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { AudioPCMDataView, AudioSource, CCFloat, Component, Enum, math, _decorator } from 'cc';\r\nimport { MathExtensions } from '../../Utils';\r\nimport CubismAudioSamplingQuality from './CubismAudioSamplingQuality';\r\nimport CubismMouthController from './CubismMouthController';\r\nconst { ccclass, property, requireComponent } = _decorator;\r\n\r\n@ccclass('CubismAudioMouthInput')\r\n@requireComponent(CubismMouthController)\r\nexport default class CubismAudioMouthInput extends Component {\r\n  @property(AudioSource)\r\n  public audioInput: AudioSource | null = null;\r\n\r\n  @property({ type: Enum(CubismAudioSamplingQuality) })\r\n  public samplingQuality: CubismAudioSamplingQuality = CubismAudioSamplingQuality.high;\r\n\r\n  @property({ type: CCFloat, slide: true, range: [1.0, 10.0, 0.01] })\r\n  public gain: number = 1.0;\r\n\r\n  @property({ type: CCFloat, slide: true, range: [0.0, 1.0, 0.01] })\r\n  public smoothing: number = 0.0;\r\n\r\n  private _samples: AudioPCMDataView | null = null;\r\n  private get samples(): AudioPCMDataView | null {\r\n    return this._samples;\r\n  }\r\n  private set samples(value: AudioPCMDataView | null) {\r\n    this._samples = value;\r\n  }\r\n\r\n  private _lastRms: number = 0.0;\r\n  private get lastRms() {\r\n    return this._lastRms;\r\n  }\r\n  private set lastRms(value: number) {\r\n    this._lastRms = value;\r\n  }\r\n\r\n  private velocityBuffer: number = 0.0;\r\n\r\n  private _target: CubismMouthController | null = null;\r\n  private get target() {\r\n    return this._target;\r\n  }\r\n  private set target(value: CubismMouthController | null) {\r\n    this._target = value;\r\n  }\r\n\r\n  private isInitializing = false;\r\n  private get isInitialized(): boolean {\r\n    return this.samples != null;\r\n  }\r\n\r\n  private sampleRate: number = 0;\r\n\r\n  private tryInitialize() {\r\n    // Return early if already initialized.\r\n    if (this.isInitializing || this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    // Initialize samples data.\r\n    this.initSamples();\r\n\r\n    // Cache target.\r\n    this.target = this.getComponent(CubismMouthController);\r\n  }\r\n\r\n  private async initSamples() {\r\n    if (this.audioInput == null) {\r\n      return;\r\n    }\r\n    this.isInitializing = true;\r\n    const sampleRatePromise = this.audioInput.getSampleRate();\r\n    const pcmPromise = this.audioInput.getPCMData(0);\r\n    const { 0: sampleRate, 1: pcm } = await Promise.all([sampleRatePromise, pcmPromise]);\r\n    if (pcm != null) {\r\n      this.samples = pcm;\r\n      this.sampleRate = sampleRate > 0 ? sampleRate : 0;\r\n    }\r\n    this.isInitializing = false;\r\n  }\r\n\r\n  protected update(deltaTime: number) {\r\n    const { audioInput, samples, target, sampleRate, gain, smoothing } = this;\r\n\r\n    // 'Fail' silently.\r\n    if (audioInput == null || target == null || samples == null || sampleRate == 0) {\r\n      return;\r\n    }\r\n    const { trunc, sqrt } = Math;\r\n\r\n    const { currentTime } = audioInput;\r\n    const pos = trunc(currentTime * this.sampleRate);\r\n    let length = 256;\r\n    switch (this.samplingQuality) {\r\n      case CubismAudioSamplingQuality.veryHigh:\r\n        length = 256;\r\n        break;\r\n      case CubismAudioSamplingQuality.maximum:\r\n        length = 512;\r\n        break;\r\n      default:\r\n        length = 256;\r\n        break;\r\n    }\r\n\r\n    // Sample audio.\r\n    let total = 0.0;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const sample = samples.getData((pos + i) % samples.length);\r\n      total += sample * sample;\r\n    }\r\n\r\n    // Compute root mean square over samples.\r\n    let rms = sqrt(total / length) * gain;\r\n\r\n    // Clamp root mean square.\r\n    rms = math.clamp01(rms);\r\n\r\n    // Smooth rms.\r\n    const output = MathExtensions.Float.smoothDamp(\r\n      this.lastRms,\r\n      rms,\r\n      this.velocityBuffer,\r\n      smoothing * 0.1,\r\n      undefined,\r\n      deltaTime\r\n    );\r\n\r\n    rms = output[0];\r\n    this.velocityBuffer = output[1];\r\n\r\n    // Set rms as mouth opening and store it for next evaluation.\r\n    target.mouthOpening = rms;\r\n\r\n    this.lastRms = rms;\r\n  }\r\n\r\n  protected onEnable() {\r\n    this.tryInitialize();\r\n  }\r\n}\r\n"]}