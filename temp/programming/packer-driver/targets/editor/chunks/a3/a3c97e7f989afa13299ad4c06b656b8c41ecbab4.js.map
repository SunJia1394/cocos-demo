{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismDisplayInfo3Json.ts"],"names":["CubismDisplayInfo3Json","SerializableParameters","SerializableParameterGroups","SerializableParts","JsonParseUtils","asNumber","asString","constructor","version","parameters","Array","parameterGroups","parts","loadFrom","cdi3Json","json","parse","loadFromJson","Version","arrayedInstantiateFromJson","Parameters","instantiateFromJson","Parts","undefined","result","args","id","groupId","name","copyWith","groupid","equals","other","strictEquals","Id","GroupId","Name","DEFAULT"],"mappings":";;;8CAgBqBA,sB,EA8ERC,sB,EAuEAC,2B,EAuEAC,iB;;;;;;;;;;;;;;;;;;;;;;;AApONC,MAAAA,c;;;;;;AARP;AACA;AACA;AACA;AACA;AACA;;;OAIM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,O;;;AAEN;AACA;AACA;AACA;AACA;;yBACqBN,sB,GAAN,MAAMA,sBAAN,CAA6B;AAClCO,QAAAA,WAAW,GAAG;AAwDtB;;AAEA;AA1DsB,eA2DfC,OA3De,GA2DG,CA3DH;;AA6DtB;AA7DsB,eA8DfC,UA9De,GA8D6B,IAAIC,KAAJ,CAAkC,CAAlC,CA9D7B;;AAgEtB;AAhEsB,eAiEfC,eAjEe,GAkEpB,IAAID,KAAJ,CAAuC,CAAvC,CAlEoB;;AAoEtB;AApEsB,eAqEfE,KArEe,GAqEmB,IAAIF,KAAJ,CAA6B,CAA7B,CArEnB;AAAE;AAExB;AACF;AACA;AACA;AACA;;;AACwB,eAARG,QAAQ,CAACC,QAAD,EAAkD;AACtE,gBAAMC,IAAI,GAAG;AAAA;AAAA,gDAAeC,KAAf,CAAqBF,QAArB,CAAb;;AACA,cAAI,CAACC,IAAL,EAAW;AACT,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAKE,YAAL,CAAkBF,IAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4B,eAAZE,YAAY,CAACF,IAAD,EAA2C;AAAA;;AACnE,cAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,mBAAO,IAAP;AACD;;AACD,gBAAMP,OAAO,GAAGH,QAAQ,CAACU,IAAI,CAACG,OAAN,CAAxB;AACA,gBAAMP,eAAe,GAAG;AAAA;AAAA,gDAAeQ,0BAAf,CACtBJ,IAAI,CAACK,UADiB,EAEtBlB,2BAA2B,CAACmB,mBAFN,CAAxB;AAIA,gBAAMT,KAAK,GAAG;AAAA;AAAA,gDAAeO,0BAAf,CACZJ,IAAI,CAACO,KADO,EAEZnB,iBAAiB,CAACkB,mBAFN,CAAd;;AAIA,cAAIb,OAAO,KAAKe,SAAZ,IAAyBZ,eAAe,KAAKY,SAA7C,IAA0DX,KAAK,KAAKW,SAAxE,EAAmF;AACjF,mBAAO,IAAP;AACD;;AACD,gBAAMd,UAAU,4BACd;AAAA;AAAA,gDAAeU,0BAAf,CACEJ,IAAI,CAACK,UADP,EAEEnB,sBAAsB,CAACoB,mBAFzB,CADc,oCAIT,IAAIX,KAAJ,CAAU,CAAV,CAJP;AAKA,gBAAMc,MAAM,GAAG,IAAIxB,sBAAJ,EAAf;AACAwB,UAAAA,MAAM,CAAChB,OAAP,GAAiBA,OAAjB;AACAgB,UAAAA,MAAM,CAACb,eAAP,GAAyBA,eAAzB;AACAa,UAAAA,MAAM,CAACZ,KAAP,GAAeA,KAAf;AACAY,UAAAA,MAAM,CAACf,UAAP,GAAoBA,UAApB;AACA,iBAAOe,MAAP;AACD,SAvDyC,CAwE1C;;;AAxE0C,O,GA2E5C;;AAEA;;;wCACavB,sB,GAAN,MAAMA,sBAAN,CAA4E;AAQ1EM,QAAAA,WAAW,CAChBkB,IAIC,GAAG,EALY,EAMhB;AAAA;;AAbF;AAaE,eAZcC,EAYd;;AAXF;AAWE,eAVcC,OAUd;;AATF;AASE,eARcC,IAQd;AACA,eAAKF,EAAL,eAAUD,IAAI,CAACC,EAAf,uBAAqB,EAArB;AACA,eAAKC,OAAL,oBAAeF,IAAI,CAACE,OAApB,4BAA+B,EAA/B;AACA,eAAKC,IAAL,iBAAYH,IAAI,CAACG,IAAjB,yBAAyB,EAAzB;AACD;;AAEMC,QAAAA,QAAQ,CACbJ,IAIC,GAAG,EALS,EAMW;AAAA;;AACxB,iBAAO,IAAIxB,sBAAJ,CAA2B;AAChCyB,YAAAA,EAAE,eAAED,IAAI,CAACC,EAAP,wBAAa,KAAKA,EADY;AAEhCC,YAAAA,OAAO,mBAAEF,IAAI,CAACK,OAAP,4BAAkB,KAAKH,OAFE;AAGhCC,YAAAA,IAAI,iBAAEH,IAAI,CAACG,IAAP,0BAAe,KAAKA;AAHQ,WAA3B,CAAP;AAKD;;AAEMG,QAAAA,MAAM,CAACC,KAAD,EAAyC;AACpD,iBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKN,EAAL,IAAWM,KAAK,CAACN,EAAjB,IAAuB,KAAKC,OAAL,IAAgBK,KAAK,CAACL,OAA7C,IAAwD,KAAKC,IAAL,IAAaI,KAAK,CAACJ,IAF/E;AAGD;;AAEMK,QAAAA,YAAY,CAACD,KAAD,EAAyC;AAC1D,iBAAO,SAASA,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmC,eAAnBX,mBAAmB,CAACN,IAAD,EAAgD;AAC/E,cAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,mBAAOQ,SAAP;AACD;;AACD,gBAAMG,EAAE,GAAGpB,QAAQ,CAACS,IAAI,CAACmB,EAAN,CAAnB;AACA,gBAAMP,OAAO,GAAGrB,QAAQ,CAACS,IAAI,CAACoB,OAAN,CAAxB;AACA,gBAAMP,IAAI,GAAGtB,QAAQ,CAACS,IAAI,CAACqB,IAAN,CAArB;;AACA,cAAIV,EAAE,KAAKH,SAAP,IAAoBI,OAAO,KAAKJ,SAAhC,IAA6CK,IAAI,KAAKL,SAA1D,EAAqE;AACnE,mBAAOA,SAAP;AACD;;AACD,iBAAO,IAAItB,sBAAJ,CAA2B;AAChCyB,YAAAA,EAAE,EAAEA,EAD4B;AAEhCC,YAAAA,OAAO,EAAEA,OAFuB;AAGhCC,YAAAA,IAAI,EAAEA;AAH0B,WAA3B,CAAP;AAKD;;AAnEgF,O;AAsEnF;;;6CACa1B,2B,GAAN,MAAMA,2BAAN,CAAsF;AAQpFK,QAAAA,WAAW,CAChBkB,IAIC,GAAG,EALY,EAMhB;AAAA;;AAbF;AAaE,eAZcC,EAYd;;AAXF;AAWE,eAVcC,OAUd;;AATF;AASE,eARcC,IAQd;AACA,eAAKF,EAAL,gBAAUD,IAAI,CAACC,EAAf,wBAAqB,EAArB;AACA,eAAKC,OAAL,qBAAeF,IAAI,CAACE,OAApB,6BAA+B,EAA/B;AACA,eAAKC,IAAL,kBAAYH,IAAI,CAACG,IAAjB,0BAAyB,EAAzB;AACD;;AAEMC,QAAAA,QAAQ,CACbJ,IAIC,GAAG,EALS,EAMgB;AAAA;;AAC7B,iBAAO,IAAIvB,2BAAJ,CAAgC;AACrCwB,YAAAA,EAAE,eAAED,IAAI,CAACC,EAAP,wBAAa,KAAKA,EADiB;AAErCC,YAAAA,OAAO,oBAAEF,IAAI,CAACK,OAAP,6BAAkB,KAAKH,OAFO;AAGrCC,YAAAA,IAAI,iBAAEH,IAAI,CAACG,IAAP,0BAAe,KAAKA;AAHa,WAAhC,CAAP;AAKD;;AAEMG,QAAAA,MAAM,CAACC,KAAD,EAA8C;AACzD,iBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKN,EAAL,IAAWM,KAAK,CAACN,EAAjB,IAAuB,KAAKC,OAAL,IAAgBK,KAAK,CAACL,OAA7C,IAAwD,KAAKC,IAAL,IAAaI,KAAK,CAACJ,IAF/E;AAGD;;AAEMK,QAAAA,YAAY,CAACD,KAAD,EAA8C;AAC/D,iBAAO,SAASA,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmC,eAAnBX,mBAAmB,CAACN,IAAD,EAAqD;AACpF,cAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,mBAAOQ,SAAP;AACD;;AACD,gBAAMG,EAAE,GAAGpB,QAAQ,CAACS,IAAI,CAACmB,EAAN,CAAnB;AACA,gBAAMP,OAAO,GAAGrB,QAAQ,CAACS,IAAI,CAACoB,OAAN,CAAxB;AACA,gBAAMP,IAAI,GAAGtB,QAAQ,CAACS,IAAI,CAACqB,IAAN,CAArB;;AACA,cAAIV,EAAE,KAAKH,SAAP,IAAoBI,OAAO,KAAKJ,SAAhC,IAA6CK,IAAI,KAAKL,SAA1D,EAAqE;AACnE,mBAAOA,SAAP;AACD;;AACD,iBAAO,IAAIrB,2BAAJ,CAAgC;AACrCwB,YAAAA,EAAE,EAAEA,EADiC;AAErCC,YAAAA,OAAO,EAAEA,OAF4B;AAGrCC,YAAAA,IAAI,EAAEA;AAH+B,WAAhC,CAAP;AAKD;;AAnE0F,O;AAsE7F;;;mCACazB,iB,GAAN,MAAMA,iBAAN,CAAkE;AAMhEI,QAAAA,WAAW,CAChBkB,IAGC,GAAG,EAJY,EAKhB;AAAA;;AAVF;AAUE,eATcC,EASd;;AARF;AAQE,eAPcE,IAOd;AACA,eAAKF,EAAL,gBAAUD,IAAI,CAACC,EAAf,wBAAqB,EAArB;AACA,eAAKE,IAAL,kBAAYH,IAAI,CAACG,IAAjB,0BAAyB,EAAzB;AACD;;AAEMC,QAAAA,QAAQ,CACbJ,IAGC,GAAG,EAJS,EAKM;AAAA;;AACnB,iBAAO,IAAItB,iBAAJ,CAAsB;AAC3BuB,YAAAA,EAAE,eAAED,IAAI,CAACC,EAAP,wBAAa,KAAKA,EADO;AAE3BE,YAAAA,IAAI,iBAAEH,IAAI,CAACG,IAAP,0BAAe,KAAKA;AAFG,WAAtB,CAAP;AAID;;AAEMG,QAAAA,MAAM,CAACC,KAAD,EAAoC;AAC/C,iBAAO,SAASA,KAAT,GAAiB,IAAjB,GAAwB,KAAKN,EAAL,IAAWM,KAAK,CAACN,EAAjB,IAAuB,KAAKE,IAAL,IAAaI,KAAK,CAACJ,IAAzE;AACD;;AAEMK,QAAAA,YAAY,CAACD,KAAD,EAAoC;AACrD,iBAAO,SAASA,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACmC,eAAnBX,mBAAmB,CAACN,IAAD,EAA2C;AAC1E,cAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,mBAAOQ,SAAP;AACD;;AACD,gBAAMG,EAAE,GAAGpB,QAAQ,CAACS,IAAI,CAACmB,EAAN,CAAnB;AACA,gBAAMN,IAAI,GAAGtB,QAAQ,CAACS,IAAI,CAACqB,IAAN,CAArB;;AACA,cAAIV,EAAE,KAAKH,SAAP,IAAoBK,IAAI,KAAKL,SAAjC,EAA4C;AAC1C,mBAAOA,SAAP;AACD;;AACD,iBAAO,IAAIpB,iBAAJ,CAAsB;AAC3BuB,YAAAA,EAAE,EAAEA,EADuB;AAE3BE,YAAAA,IAAI,EAAEA;AAFqB,WAAtB,CAAP;AAID;;AAxDsE,O;;;AA2DhE,cAAMS,OAAO,qCAAG,IAAIpC,sBAAJ,EAAhB;SADQA,sB,sCAAAA,sB;;;AAIR,cAAMoC,OAAO,0CAAG,IAAInC,2BAAJ,EAAhB;SADQA,2B,2CAAAA,2B;;;AAIR,cAAMmC,OAAO,gCAAG,IAAIlC,iBAAJ,EAAhB;SADQA,iB,iCAAAA,iB,SAIjB","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport type IStructLike from '../../IStructLike';\r\nimport JsonParseUtils from './JsonParseUtils';\r\nconst { asNumber, asString } = JsonParseUtils;\r\n\r\n/**\r\n * Handles display info from cdi3.json.\r\n *\r\n * **Sealed class.**\r\n */\r\nexport default class CubismDisplayInfo3Json {\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Loads a cdi3.json.\r\n   * @param cdi3Json cdi3.json to deserialize.\r\n   * @returns Deserialized cdi3.json on success; null otherwise.\r\n   */\r\n  public static loadFrom(cdi3Json: string): CubismDisplayInfo3Json | null {\r\n    const json = JsonParseUtils.parse(cdi3Json);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n    return this.loadFromJson(json);\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Version\r\n   * - ParameterGroups\r\n   * - Parts\r\n   *\r\n   * **Optional properties**\r\n   * - Parameters\r\n   *\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static loadFromJson(json: any): CubismDisplayInfo3Json | null {\r\n    if (json == null) {\r\n      return null;\r\n    }\r\n    const version = asNumber(json.Version);\r\n    const parameterGroups = JsonParseUtils.arrayedInstantiateFromJson(\r\n      json.Parameters,\r\n      SerializableParameterGroups.instantiateFromJson\r\n    );\r\n    const parts = JsonParseUtils.arrayedInstantiateFromJson(\r\n      json.Parts,\r\n      SerializableParts.instantiateFromJson\r\n    );\r\n    if (version === undefined || parameterGroups === undefined || parts === undefined) {\r\n      return null;\r\n    }\r\n    const parameters =\r\n      JsonParseUtils.arrayedInstantiateFromJson(\r\n        json.Parameters,\r\n        SerializableParameters.instantiateFromJson\r\n      ) ?? new Array(0);\r\n    const result = new CubismDisplayInfo3Json();\r\n    result.version = version;\r\n    result.parameterGroups = parameterGroups;\r\n    result.parts = parts;\r\n    result.parameters = parameters;\r\n    return result;\r\n  }\r\n\r\n  // #region Json Data\r\n\r\n  /** Json file format version. */\r\n  public version: number = 0;\r\n\r\n  /** Array of model parameters. */\r\n  public parameters: Array<SerializableParameters> = new Array<SerializableParameters>(0);\r\n\r\n  /** Array of ParameterGroups. */\r\n  public parameterGroups: Array<SerializableParameterGroups> =\r\n    new Array<SerializableParameterGroups>(0);\r\n\r\n  /** Array of Parts. */\r\n  public parts: Array<SerializableParts> = new Array<SerializableParts>(0);\r\n\r\n  // #endregion\r\n}\r\n\r\n// #region Json Helpers\r\n\r\n/** (struct) */\r\nexport class SerializableParameters implements IStructLike<SerializableParameters> {\r\n  /** The ID of the parameter. */\r\n  public readonly id: string;\r\n  /** The Group ID of the parameter. */\r\n  public readonly groupId: string;\r\n  /** The Name of the parameter. */\r\n  public readonly name: string;\r\n\r\n  public constructor(\r\n    args: {\r\n      id?: string;\r\n      groupId?: string;\r\n      name?: string;\r\n    } = {}\r\n  ) {\r\n    this.id = args.id ?? '';\r\n    this.groupId = args.groupId ?? '';\r\n    this.name = args.name ?? '';\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      id?: string;\r\n      groupid?: string;\r\n      name?: string;\r\n    } = {}\r\n  ): SerializableParameters {\r\n    return new SerializableParameters({\r\n      id: args.id ?? this.id,\r\n      groupId: args.groupid ?? this.groupId,\r\n      name: args.name ?? this.name,\r\n    });\r\n  }\r\n\r\n  public equals(other: SerializableParameters): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.id == other.id && this.groupId == other.groupId && this.name == other.name;\r\n  }\r\n\r\n  public strictEquals(other: SerializableParameters): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Id\r\n   * - GroupId\r\n   * - Name\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static instantiateFromJson(json: any): SerializableParameters | undefined {\r\n    if (json == null) {\r\n      return undefined;\r\n    }\r\n    const id = asString(json.Id);\r\n    const groupId = asString(json.GroupId);\r\n    const name = asString(json.Name);\r\n    if (id === undefined || groupId === undefined || name === undefined) {\r\n      return undefined;\r\n    }\r\n    return new SerializableParameters({\r\n      id: id,\r\n      groupId: groupId,\r\n      name: name,\r\n    });\r\n  }\r\n}\r\n\r\n/** (struct) */\r\nexport class SerializableParameterGroups implements IStructLike<SerializableParameterGroups> {\r\n  /** The ID of the parameter. */\r\n  public readonly id: string;\r\n  /** The Group ID of the parameter. */\r\n  public readonly groupId: string;\r\n  /** The Name of the parameter. */\r\n  public readonly name: string;\r\n\r\n  public constructor(\r\n    args: {\r\n      id?: string;\r\n      groupId?: string;\r\n      name?: string;\r\n    } = {}\r\n  ) {\r\n    this.id = args.id ?? '';\r\n    this.groupId = args.groupId ?? '';\r\n    this.name = args.name ?? '';\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      id?: string;\r\n      groupid?: string;\r\n      name?: string;\r\n    } = {}\r\n  ): SerializableParameterGroups {\r\n    return new SerializableParameterGroups({\r\n      id: args.id ?? this.id,\r\n      groupId: args.groupid ?? this.groupId,\r\n      name: args.name ?? this.name,\r\n    });\r\n  }\r\n\r\n  public equals(other: SerializableParameterGroups): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.id == other.id && this.groupId == other.groupId && this.name == other.name;\r\n  }\r\n\r\n  public strictEquals(other: SerializableParameterGroups): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Id\r\n   * - GroupId\r\n   * - Name\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static instantiateFromJson(json: any): SerializableParameterGroups | undefined {\r\n    if (json == null) {\r\n      return undefined;\r\n    }\r\n    const id = asString(json.Id);\r\n    const groupId = asString(json.GroupId);\r\n    const name = asString(json.Name);\r\n    if (id === undefined || groupId === undefined || name === undefined) {\r\n      return undefined;\r\n    }\r\n    return new SerializableParameterGroups({\r\n      id: id,\r\n      groupId: groupId,\r\n      name: name,\r\n    });\r\n  }\r\n}\r\n\r\n/** (struct) */\r\nexport class SerializableParts implements IStructLike<SerializableParts> {\r\n  /** The ID of the part. */\r\n  public readonly id: string;\r\n  /** The Name of the part. */\r\n  public readonly name: string;\r\n\r\n  public constructor(\r\n    args: {\r\n      id?: string;\r\n      name?: string;\r\n    } = {}\r\n  ) {\r\n    this.id = args.id ?? '';\r\n    this.name = args.name ?? '';\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      id?: string;\r\n      name?: string;\r\n    } = {}\r\n  ): SerializableParts {\r\n    return new SerializableParts({\r\n      id: args.id ?? this.id,\r\n      name: args.name ?? this.name,\r\n    });\r\n  }\r\n\r\n  public equals(other: SerializableParts): boolean {\r\n    return this === other ? true : this.id == other.id && this.name == other.name;\r\n  }\r\n\r\n  public strictEquals(other: SerializableParts): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  /**\r\n   * **Required properties**\r\n   * - Id\r\n   * - Name\r\n   * @param json\r\n   * @returns\r\n   */\r\n  public static instantiateFromJson(json: any): SerializableParts | undefined {\r\n    if (json == null) {\r\n      return undefined;\r\n    }\r\n    const id = asString(json.Id);\r\n    const name = asString(json.Name);\r\n    if (id === undefined || name === undefined) {\r\n      return undefined;\r\n    }\r\n    return new SerializableParts({\r\n      id: id,\r\n      name: name,\r\n    });\r\n  }\r\n}\r\nexport namespace SerializableParameters {\r\n  export const DEFAULT = new SerializableParameters();\r\n}\r\nexport namespace SerializableParameterGroups {\r\n  export const DEFAULT = new SerializableParameterGroups();\r\n}\r\nexport namespace SerializableParts {\r\n  export const DEFAULT = new SerializableParts();\r\n}\r\n\r\n// #endregion\r\n"]}