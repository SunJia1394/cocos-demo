{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismTaskableModel.ts"],"names":["CubismTaskableModel","Model","ArrayExtensionMethods","CubismDynamicDrawableData","CubismTaskQueue","instantiate","moc","unmanagedModel","dynamicDrawableData","constructor","_unmanagedModel","_moc","_dynamicDrawableData","Array","_shouldReleaseUnmanaged","_state","TaskState","idle","createTaskableModel","unmanagedMoc","acquireUnmanagedMoc","console","assert","fromMoc","error","createData","value","isExecuting","state","enqueued","executing","didExecute","executed","shouldReleaseUnmanaged","tryReadParameters","parameters","readFromParameters","tryWriteParametersAndParts","parts","writeToModelFromParameters","writeToModelFromParts","update","enqueue","updateNow","execute","releaseUnmanaged","info","onReleaseUnmanaged","readFromArrayCubismDynamicDrawableData","warn","release","releaseUnmanagedMoc"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Model } from '../CubismCore';\r\nimport ArrayExtensionMethods from './ArrayExtensionMethods';\r\nimport CubismDynamicDrawableData from './CubismDynamicDrawableData';\r\nimport CubismTaskQueue from './CubismTaskQueue';\r\nimport type CubismMoc from './CubismMoc';\r\nimport type CubismParameter from './CubismParameter';\r\nimport type CubismPart from './CubismPart';\r\nimport type ICubismTask from './ICubismTask';\r\nimport type CubismModel from './CubismModel';\r\n\r\n/**\r\n * 'Atomic' {@link CubismModel} update task.\r\n *\r\n * **Sealed class**\r\n */\r\nexport default class CubismTaskableModel implements ICubismTask {\r\n  // #region Constructor\r\n\r\n  /**\r\n   * Initializes instance.\r\n   * @param moc Moc unmanaged model was instantiated from.\r\n   * @param unmanagedModel\r\n   * @param dynamicDrawableData\r\n   */\r\n  public static instantiate(\r\n    moc: CubismMoc,\r\n    unmanagedModel: Model,\r\n    dynamicDrawableData: CubismDynamicDrawableData[]\r\n  ) {\r\n    return new CubismTaskableModel(moc, unmanagedModel, dynamicDrawableData);\r\n  }\r\n\r\n  private constructor(\r\n    moc: CubismMoc,\r\n    unmanagedModel: Model,\r\n    dynamicDrawableData: CubismDynamicDrawableData[]\r\n  ) {\r\n    this._moc = moc;\r\n    this._unmanagedModel = unmanagedModel;\r\n    this._dynamicDrawableData = dynamicDrawableData;\r\n    this._shouldReleaseUnmanaged = false;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Factory Methods\r\n\r\n  /**\r\n   * Creates a CubismTaskableModel from a CubismMoc.\r\n   * @param moc Moc source.\r\n   * @returns Instance.\r\n   */\r\n  public static createTaskableModel(moc: CubismMoc): CubismTaskableModel | null {\r\n    // Instantiate unmanaged model.\r\n    const unmanagedMoc = moc.acquireUnmanagedMoc();\r\n    console.assert(unmanagedMoc != null);\r\n    const unmanagedModel = Model.fromMoc(unmanagedMoc!);\r\n    if (unmanagedModel == null) {\r\n      console.error('Model.fromMoc() faileed.');\r\n      return null;\r\n    }\r\n    const dynamicDrawableData = CubismDynamicDrawableData.createData(unmanagedModel);\r\n    return new CubismTaskableModel(moc, unmanagedModel, dynamicDrawableData);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  private _unmanagedModel: Model | null;\r\n  /**\r\n   * Handle to unmanaged model.\r\n   *\r\n   * CubismUnmanagedModel\r\n   */\r\n  public get unmanagedModel(): Model | null {\r\n    return this._unmanagedModel;\r\n  }\r\n  private set unmanagedModel(value) {\r\n    this._unmanagedModel = value;\r\n  }\r\n\r\n  private _moc: CubismMoc;\r\n  /** CubismMoc the model was instantiated from. */\r\n  public get moc(): CubismMoc {\r\n    return this._moc;\r\n  }\r\n  private set moc(value) {\r\n    this._moc = value;\r\n  }\r\n\r\n  private _dynamicDrawableData = new Array<CubismDynamicDrawableData>(0);\r\n  /** Buffer to write dynamic data to. */\r\n  public get dynamicDrawableData(): Array<CubismDynamicDrawableData> {\r\n    return this._dynamicDrawableData;\r\n  }\r\n  private set dynamicDrawableData(value) {\r\n    this._dynamicDrawableData = value;\r\n  }\r\n\r\n  /** True if task is currently executing. */\r\n  public get isExecuting(): boolean {\r\n    return this.state == TaskState.enqueued || this.state == TaskState.executing;\r\n  }\r\n\r\n  /** True if did run to completion at least once. */\r\n  public get didExecute(): boolean {\r\n    return this.state == TaskState.executed;\r\n  }\r\n\r\n  /** True if unmanaged model and moc should be released. */\r\n  private _shouldReleaseUnmanaged: boolean;\r\n  public get shouldReleaseUnmanaged(): boolean {\r\n    return this._shouldReleaseUnmanaged;\r\n  }\r\n  public set shouldReleaseUnmanaged(value: boolean) {\r\n    this._shouldReleaseUnmanaged = value;\r\n  }\r\n\r\n  /**\r\n   * Tries to read parameters into a buffer.\r\n   * @param parameters Buffer to write to.\r\n   * @returns true on success; false otherwise.\r\n   */\r\n  public tryReadParameters(parameters: Array<CubismParameter>): boolean {\r\n    if (this.unmanagedModel == null) {\r\n      console.error('CubismTaskableModel.tryReadParameters(): unmanagedModel is null.');\r\n      return false;\r\n    }\r\n    if (this.state == TaskState.executed) {\r\n      ArrayExtensionMethods.readFromParameters(parameters, this.unmanagedModel);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tries to write parameters to a buffer.\r\n   * @param parameters Buffer to read from.\r\n   * @param parts true on success; false otherwise.\r\n   */\r\n  public tryWriteParametersAndParts(\r\n    parameters: Array<CubismParameter>,\r\n    parts: Array<CubismPart>\r\n  ): boolean {\r\n    if (this.unmanagedModel == null) {\r\n      console.error('CubismTaskableModel.tryWriteParametersAndParts(): unmanagedModel is null.');\r\n      return false;\r\n    }\r\n\r\n    // シングルスレッド調整のため常にtrue\r\n    // if (this.state != TaskState.executing) {\r\n    ArrayExtensionMethods.writeToModelFromParameters(parameters, this.unmanagedModel);\r\n    ArrayExtensionMethods.writeToModelFromParts(parts, this.unmanagedModel);\r\n    return true;\r\n    // }\r\n    // return false;\r\n  }\r\n\r\n  /** Dispatches the task for (maybe async) execution. */\r\n  public update() {\r\n    if (this.state == TaskState.enqueued || this.state == TaskState.executing) {\r\n      return;\r\n    }\r\n\r\n    // Update state.\r\n    this.state = TaskState.enqueued;\r\n\r\n    CubismTaskQueue.enqueue(this);\r\n  }\r\n\r\n  /**\r\n   * Forces the task to run now to completion.\r\n   * @returns\r\n   */\r\n  public updateNow(): boolean {\r\n    if (this.state == TaskState.enqueued || this.state == TaskState.executing) {\r\n      return false;\r\n    }\r\n\r\n    // Update state.\r\n    this.state = TaskState.enqueued;\r\n\r\n    // Run execution directly.\r\n    this.execute();\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Releases unmanaged resource. */\r\n  public releaseUnmanaged(): void {\r\n    console.info('CubismTaskableModel.releaseUnmanaged()');\r\n    this.shouldReleaseUnmanaged = true;\r\n\r\n    if (this.state == TaskState.enqueued || this.state == TaskState.executing) {\r\n      return;\r\n    }\r\n\r\n    this.onReleaseUnmanaged();\r\n    this.shouldReleaseUnmanaged = false;\r\n  }\r\n\r\n  /** Runs the task. */\r\n  public execute(): void {\r\n    if (this.unmanagedModel == null) {\r\n      console.error('CubismTaskableModel.unmanagedModel is null.');\r\n      return;\r\n    }\r\n\r\n    this.state = TaskState.executing;\r\n\r\n    // Update native backend.\r\n    this.unmanagedModel.update();\r\n\r\n    // Get results.\r\n    ArrayExtensionMethods.readFromArrayCubismDynamicDrawableData(\r\n      this._dynamicDrawableData,\r\n      this.unmanagedModel\r\n    );\r\n\r\n    this.state = TaskState.executed;\r\n\r\n    // Release native if requested.\r\n    if (this.shouldReleaseUnmanaged) {\r\n      this.onReleaseUnmanaged();\r\n    }\r\n  }\r\n\r\n  /** Actually releases native resource(s). */\r\n  private onReleaseUnmanaged(): void {\r\n    if (this.unmanagedModel == null) {\r\n      console.warn('CubismTaskableModel.unmanagedModel is null.');\r\n      return;\r\n    }\r\n\r\n    this.unmanagedModel.release();\r\n    this.moc.releaseUnmanagedMoc();\r\n    this.unmanagedModel = null;\r\n  }\r\n\r\n  // #region Threading\r\n\r\n  private _state: TaskState = TaskState.idle;\r\n  /** Internal state. */\r\n  private get state() {\r\n    return this._state;\r\n  }\r\n  private set state(value) {\r\n    this._state = value;\r\n  }\r\n  // #endregion\r\n}\r\n\r\n/** Task states. */\r\nenum TaskState {\r\n  /** Idle state. */\r\n  idle,\r\n  /** Waiting-for-execution state. */\r\n  enqueued,\r\n  /** Executing state. */\r\n  executing,\r\n  /** Executed state. */\r\n  executed,\r\n}\r\n"]}