{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/HarmonicMotion/CubismHarmonicMotionParameter.ts"],"names":["_decorator","Component","Enum","CCInteger","CCFloat","game","math","CubismHarmonicMotionDirection","CubismParameter","ccclass","property","CubismHarmonicMotionParameter","type","serializable","visible","slide","range","_maximumValue","_minimumValue","_valueRange","_t","isInitialized","Math","abs","valueRange","EPSILON","initialize","parameter","getComponent","maximumValue","minimumValue","value","t","play","channelTimescales","deltaTime","channel","duration","evaluate","origin","normalizedOrigin","normalizedRange","outputArray","clamp","originIndex","rangeIndex","sin","PI","direction","Left","Right","Centric","neverCheck"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component, Enum, CCInteger, CCFloat, game, math } from 'cc';\r\nimport CubismHarmonicMotionDirection from './CubismHarmonicMotionDirection';\r\nimport CubismParameter from '../../Core/CubismParameter';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Holds data for controlling the output of simple harmonic motions.\r\n *\r\n * This type of motion can be very useful for faking breathing, for example.\r\n *\r\n * **Sealed class**\r\n */\r\n@ccclass('CubismHarmonicMotionParameter')\r\nexport default class CubismHarmonicMotionParameter extends Component {\r\n  /** Timescale channel. */\r\n  @property({ type: CCInteger, serializable: true, visible: true })\r\n  public channel: number = 0;\r\n\r\n  /** Motion direction. */\r\n  @property({ type: Enum(CubismHarmonicMotionDirection), serializable: true, visible: true })\r\n  public direction: CubismHarmonicMotionDirection = CubismHarmonicMotionDirection.Left;\r\n\r\n  /**\r\n   * Normalized origin of motion.\r\n   *\r\n   * The actual origin used for evaluating the motion depends limits of the {@link CubismParameter}.\r\n   */\r\n  @property({\r\n    type: CCFloat,\r\n    slide: true,\r\n    range: [0.0, 1.0, 0.01],\r\n    serializable: true,\r\n    visible: true,\r\n  })\r\n  public normalizedOrigin: number = 0.5;\r\n\r\n  /**\r\n   * Normalized range of motion.\r\n   *\r\n   * The actual origin used for evaluating the motion depends limits of the {@link CubismParameter}.\r\n   */\r\n  @property({\r\n    type: CCFloat,\r\n    slide: true,\r\n    range: [0.0, 1.0, 0.01],\r\n    serializable: true,\r\n    visible: true,\r\n  })\r\n  public normalizedRange: number = 0.5;\r\n\r\n  /** Duration of one motion cycle in seconds. */\r\n  @property({\r\n    type: CCFloat,\r\n    slide: true,\r\n    range: [0.01, 10.0, 0.01],\r\n    serializable: true,\r\n    visible: true,\r\n  })\r\n  public duration: number = 3.0;\r\n\r\n  /** true if this is initialized. */\r\n  private get isInitialized(): boolean {\r\n    return Math.abs(this.valueRange) >= math.EPSILON;\r\n  }\r\n\r\n  /** Initializes instance. */\r\n  private initialize() {\r\n    // Initialize value fields.\r\n    const parameter = this.getComponent(CubismParameter);\r\n\r\n    if (parameter === null) {\r\n      return;\r\n    }\r\n\r\n    this.maximumValue = parameter.maximumValue;\r\n    this.minimumValue = parameter.minimumValue;\r\n    this.valueRange = this.maximumValue - this.minimumValue;\r\n  }\r\n\r\n  //#region Interface for Controller\r\n\r\n  private _maximumValue: number = 0;\r\n  /** Cached {@link CubismParameter.maximumValue}. */\r\n  private get maximumValue() {\r\n    return this._maximumValue;\r\n  }\r\n  private set maximumValue(value: number) {\r\n    this._maximumValue = value;\r\n  }\r\n\r\n  private _minimumValue: number = 0;\r\n  /** Cached {@link CubismParameter.minimumValue}. */\r\n  private get minimumValue() {\r\n    return this._minimumValue;\r\n  }\r\n  private set minimumValue(value: number) {\r\n    this._minimumValue = value;\r\n  }\r\n\r\n  private _valueRange: number = 0;\r\n  /** Range of {@link maximumValue} and {@link minimumValue}. */\r\n  private get valueRange() {\r\n    return this._valueRange;\r\n  }\r\n  private set valueRange(value: number) {\r\n    this._valueRange = value;\r\n  }\r\n\r\n  private _t: number = 0;\r\n  /** Current time. */\r\n  private get t() {\r\n    return this._t;\r\n  }\r\n  private set t(value: number) {\r\n    this._t = value;\r\n  }\r\n\r\n  /** Proceeds time. */\r\n  public play(channelTimescales: number[]) {\r\n    this.t += game.deltaTime * channelTimescales[this.channel];\r\n\r\n    // Make sure time stays within duration.\r\n    while (this.t > this.duration) {\r\n      this.t -= this.duration;\r\n    }\r\n  }\r\n\r\n  /** Evaluates the parameter. */\r\n  public evaluate(): number {\r\n    // Lazily initialize.\r\n    if (!this.isInitialized) {\r\n      this.initialize();\r\n    }\r\n\r\n    // Restore origin and range.\r\n    let origin = this.minimumValue + this.normalizedOrigin * this.valueRange;\r\n    let range = this.normalizedRange * this.valueRange;\r\n\r\n    // Clamp the range so that it stays within the limits.\r\n    const outputArray = this.clamp(origin, range);\r\n\r\n    const originIndex = 0;\r\n    const rangeIndex = 1;\r\n    origin = outputArray[originIndex];\r\n    range = outputArray[rangeIndex];\r\n\r\n    // Return result.\r\n    return origin + range * Math.sin((this.t * (2 * Math.PI)) / this.duration);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Helper Methods\r\n\r\n  /**\r\n   * Clamp origin and range based on {@link direction}.\r\n   * @param origin Origin to clamp.\r\n   * @param range Range to clamp.\r\n   * @returns\r\n   */\r\n  private clamp(origin: number, range: number): [number, number] {\r\n    switch (this.direction) {\r\n      case CubismHarmonicMotionDirection.Left: {\r\n        if (origin - range >= this.minimumValue) {\r\n          range /= 2;\r\n          origin -= range;\r\n        } else {\r\n          range = (origin - this.minimumValue) / 2.0;\r\n          origin = this.minimumValue + range;\r\n          this.normalizedRange = (range * 2.0) / this.valueRange;\r\n        }\r\n        break;\r\n      }\r\n      case CubismHarmonicMotionDirection.Right: {\r\n        if (origin + range <= this.maximumValue) {\r\n          range /= 2.0;\r\n          origin += range;\r\n        } else {\r\n          range = (this.maximumValue - origin) / 2.0;\r\n          origin = this.maximumValue - range;\r\n          this.normalizedRange = (range * 2.0) / this.valueRange;\r\n        }\r\n        break;\r\n      }\r\n      case CubismHarmonicMotionDirection.Centric:\r\n        break;\r\n      default: {\r\n        // Nothing to do.\r\n        const neverCheck: never = this.direction;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Clamp both range and NormalizedRange.\r\n    if (origin - range < this.minimumValue) {\r\n      range = origin - this.minimumValue;\r\n      this.normalizedRange = range / this.valueRange;\r\n    } else if (origin + range > this.maximumValue) {\r\n      range = this.maximumValue - origin;\r\n      this.normalizedRange = range / this.valueRange;\r\n    }\r\n\r\n    return [origin, range];\r\n  }\r\n}\r\n"]}