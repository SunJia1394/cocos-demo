{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskTilePool.ts"],"names":["CubismMaskTilePool","CubismMaskTile","subdivisions","_subdivisions","value","slots","_slots","constructor","channels","Array","Math","pow","acquireTiles","count","result","i","allocationSuccessful","j","length","toTile","returnTiles","tiles","toIndex","index","trunc","tileCounts","tilesPerRow","tileSize","channel","currentTilePosition","column","rowId","row","size","tile"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport CubismMaskTile from './CubismMaskTile';\r\n\r\n/** Virtual pool allocator for CubismMaskTiles. */\r\nexport default class CubismMaskTilePool {\r\n  private _subdivisions: number = 0;\r\n\r\n  /** Level of subdivisions. */\r\n  private get subdivisions() {\r\n    return this._subdivisions;\r\n  }\r\n  private set subdivisions(value) {\r\n    this._subdivisions = value;\r\n  }\r\n\r\n  private _slots: boolean[] = new Array(0);\r\n  /**\r\n   * Pool slots.\r\n   *\r\n   * true slots are in use, false are available slots.\r\n   */\r\n  private get slots() {\r\n    return this._slots;\r\n  }\r\n  private set slots(value) {\r\n    this._slots = value;\r\n  }\r\n\r\n  // #region Ctors\r\n\r\n  /**\r\n   * Initializes instance.\r\n   * @param subdivisions Number of CubismMaskTexture subdivisions.\r\n   * @param channels Number of CubismMaskTexture color channels.\r\n   */\r\n  public constructor(subdivisions: number, channels: number) {\r\n    this.subdivisions = subdivisions;\r\n    this.slots = new Array<boolean>(Math.pow(4, subdivisions) * channels);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * Acquires tiles.\r\n   * @param count Number of tiles to acquire.\r\n   * @returns Acquired tiles on success; null otherwise.\r\n   */\r\n  public acquireTiles(count: number): Array<CubismMaskTile> | null {\r\n    const result = new Array<CubismMaskTile>(count);\r\n    // Populate container.\r\n    for (let i = 0; i < count; i++) {\r\n      let allocationSuccessful = false;\r\n      for (let j = 0; j < this.slots.length; j++) {\r\n        // Skip occupied slots.\r\n        if (this.slots[j]) {\r\n          continue;\r\n        }\r\n        // Generate tile.\r\n        result[i] = this.toTile(j);\r\n        // Flag slot as occupied.\r\n        this.slots[j] = true;\r\n        // Flag allocation as successful.\r\n        allocationSuccessful = true;\r\n        break;\r\n      }\r\n      // Return as soon as one allocation fails.\r\n      if (!allocationSuccessful) {\r\n        return null;\r\n      }\r\n    }\r\n    // Return on success.\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Releases tiles.\r\n   * @param tiles Tiles to release.\r\n   */\r\n  public returnTiles(tiles: CubismMaskTile[]): void {\r\n    // Flag slots as available.\r\n    for (var i = 0; i < tiles.length; i++) {\r\n      this.slots[this.toIndex(tiles[i])] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts from index to CubismMaskTile.\r\n   * @param index Index to convert.\r\n   * @returns Mask tile matching index.\r\n   */\r\n  private toTile(index: number): CubismMaskTile {\r\n    const { trunc, pow } = Math;\r\n    const tileCounts = trunc(pow(4, this.subdivisions - 1));\r\n    const tilesPerRow = trunc(pow(2, this.subdivisions - 1));\r\n    const tileSize = 1 / tilesPerRow;\r\n    const channel = trunc(index / tileCounts);\r\n    const currentTilePosition = index - channel * tileCounts;\r\n    const column = trunc(currentTilePosition / tilesPerRow);\r\n    const rowId = currentTilePosition % tilesPerRow;\r\n    return new CubismMaskTile({\r\n      channel: channel,\r\n      column: column,\r\n      row: rowId,\r\n      size: tileSize,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Converts from <see cref=\"CubismMaskTile\"/> to index.\r\n   * @param tile Tile to convert.\r\n   * @returns Tile index.\r\n   */\r\n  private toIndex(tile: CubismMaskTile): number {\r\n    const { trunc, pow } = Math;\r\n    const tileCounts = trunc(pow(4, this.subdivisions - 1));\r\n    const tilesPerRow = trunc(pow(2, this.subdivisions - 1));\r\n    return trunc(tile.channel * tileCounts + tile.column * tilesPerRow + tile.row);\r\n  }\r\n}\r\n"]}