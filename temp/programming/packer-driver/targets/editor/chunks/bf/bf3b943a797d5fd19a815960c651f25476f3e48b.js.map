{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskCommandBuffer.ts"],"names":["CubismMaskCommandBufferMetadata","Component","Camera","MeshRenderer","CCObject","director","Node","renderer","_decorator","math","Layers","CubismMaskTexture","EDITOR","ccclass","executeInEditMode","disallowMultiple","requireComponent","CubismMaskCommandBuffer","_camera","instance","_instance","initialize","sources","_sources","value","buffer","_buffer","containsSources","length","proxyName","proxy","persistRootNodes","_persistRootNodes","key","obj","Reflect","get","name","removePersistRootNode","addPersistRootNode","addComponent","console","assert","hideFlags","PROXY_HIDE_FLAGS","addSource","source","includes","push","removeSource","index","i","refreshCommandBuffer","warn","renderers","getComponentsInChildren","meta","metadataPropertySymbol","enabled","addToCommandBuffer","camera","onLoad","info","getComponent","priority","Number","MIN_SAFE_INTEGER","node","layer","userLayer19","Enum","projection","scene","CameraProjection","ORTHO","visibility","clearFlags","ClearFlag","SOLID_COLOR","clearColor","Color","orthoHeight","near","far","cce","targetTexture","globalMaskTexture","getTextureReference","error","lateUpdate","dt","getScene","renderScene","Array","Map","Symbol","for","cubismRenderer","meshRenderer","Flags","DontSave","EditorOnly","DontDestroy","HideInHierarchy"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  Component,\r\n  Camera,\r\n  MeshRenderer,\r\n  CCObject,\r\n  director,\r\n  Node,\r\n  renderer,\r\n  _decorator,\r\n  math,\r\n  Layers,\r\n} from 'cc';\r\nimport CubismMaskTexture from './CubismMaskTexture';\r\nimport type CubismRenderer from '../CubismRenderer';\r\nimport type ICubismMaskCommandSource from './ICubismMaskCommandSource';\r\nimport { EDITOR } from 'cc/env';\r\nconst { ccclass, executeInEditMode, disallowMultiple, requireComponent } = _decorator;\r\n\r\n/** Singleton buffer for Cubism mask related draw commands. */\r\n@ccclass('CubismMaskCommandBuffer')\r\n@disallowMultiple\r\n@requireComponent([Camera])\r\n@executeInEditMode\r\nexport default class CubismMaskCommandBuffer extends Component {\r\n  private static _instance: CubismMaskCommandBuffer | null = null;\r\n  public static get instance(): CubismMaskCommandBuffer {\r\n    if (!CubismMaskCommandBuffer._instance) {\r\n      CubismMaskCommandBuffer.initialize();\r\n    }\r\n    return CubismMaskCommandBuffer._instance!;\r\n  }\r\n\r\n  private static _sources: ICubismMaskCommandSource[] = new Array<ICubismMaskCommandSource>();\r\n\r\n  /** Draw command sources. */\r\n  private static get sources() {\r\n    return this._sources;\r\n  }\r\n  private static set sources(value) {\r\n    this._sources = value;\r\n  }\r\n\r\n  private static _buffer: Map<CubismRenderer, MeshRenderer> = new Map();\r\n\r\n  /** Command buffer. */\r\n  public static get buffer() {\r\n    return this._buffer;\r\n  }\r\n  private static set buffer(value) {\r\n    this._buffer = value;\r\n  }\r\n\r\n  /** True if Sources are empty. */\r\n  private static get containsSources(): boolean {\r\n    return this.sources.length > 0;\r\n  }\r\n\r\n  /** Makes sure class is initialized for static usage. */\r\n  private static initialize(): void {\r\n    // Initialize containers.\r\n\r\n    // Spawn update proxy.\r\n    const proxyName: string = 'cubism_MaskCommandBuffer';\r\n    let proxy: Node | null = null;\r\n    // @ts-ignore\r\n    const persistRootNodes: object = director._persistRootNodes;\r\n    if (EDITOR) {\r\n      for (const key in persistRootNodes) {\r\n        const obj = Reflect.get(persistRootNodes, key) as Node;\r\n        if (obj.name == proxyName) {\r\n          director.removePersistRootNode(obj);\r\n        }\r\n      }\r\n    }\r\n    for (const key in persistRootNodes) {\r\n      const obj = Reflect.get(persistRootNodes, key);\r\n      if (obj.name == proxyName) {\r\n        proxy = obj;\r\n        break;\r\n      }\r\n    }\r\n    if (proxy == null) {\r\n      proxy = new Node(proxyName);\r\n      director.addPersistRootNode(proxy);\r\n      CubismMaskCommandBuffer._instance = proxy.addComponent(CubismMaskCommandBuffer);\r\n      console.assert(CubismMaskCommandBuffer._instance);\r\n    }\r\n    proxy.hideFlags = PROXY_HIDE_FLAGS;\r\n  }\r\n\r\n  /**\r\n   * Registers a new draw command source.\r\n   * @param source Source to add.\r\n   */\r\n  public static addSource(source: ICubismMaskCommandSource): void {\r\n    // Make sure singleton is initialized.\r\n    CubismMaskCommandBuffer.initialize();\r\n\r\n    // Prevent same source from being added twice.\r\n    if (this.sources.includes(source)) {\r\n      return;\r\n    }\r\n\r\n    // Add source and force refresh.\r\n    this.sources.push(source);\r\n  }\r\n\r\n  /**\r\n   * Deregisters a draw command source.\r\n   * @param source Source to remove.\r\n   */\r\n  public static removeSource(source: ICubismMaskCommandSource): void {\r\n    // Make sure singleton is initialized.\r\n    CubismMaskCommandBuffer.initialize();\r\n\r\n    // Remove source and force refresh.\r\n    let index = 0;\r\n    for (let i = 0; i < this.sources.length; i++) {\r\n      if (this.sources[i] != source) {\r\n        this.sources[index] = this.sources[i];\r\n        index++;\r\n      }\r\n    }\r\n    this.sources.length = index;\r\n  }\r\n  public static readonly metadataPropertySymbol: symbol = Symbol.for(\r\n    'CubismMaskCommandBufferMetadata'\r\n  );\r\n\r\n  /** Forces the command buffer to be refreshed. */\r\n  private static refreshCommandBuffer(): void {\r\n    // Clear buffer.\r\n    if (!CubismMaskCommandBuffer.instance) {\r\n      console.warn(`CubismMaskCommandBuffer.instance is null.`);\r\n      return;\r\n    }\r\n    const renderers = CubismMaskCommandBuffer.instance.getComponentsInChildren(MeshRenderer);\r\n    for (let i = 0; i < renderers.length; i++) {\r\n      const meta: CubismMaskCommandBufferMetadata | undefined = Reflect.get(\r\n        renderers[i],\r\n        CubismMaskCommandBuffer.metadataPropertySymbol\r\n      );\r\n      if (meta) {\r\n        meta.enabled = false;\r\n      }\r\n    }\r\n\r\n    // Enqueue sources.\r\n    for (let i = 0; i < this.sources.length; i++) {\r\n      this.sources[i].addToCommandBuffer(CubismMaskCommandBuffer.instance);\r\n    }\r\n\r\n    for (let i = 0; i < renderers.length; i++) {\r\n      const meta: CubismMaskCommandBufferMetadata | undefined = Reflect.get(\r\n        renderers[i],\r\n        CubismMaskCommandBuffer.metadataPropertySymbol\r\n      );\r\n      if (meta) {\r\n        renderers[i].enabled = meta.enabled;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _camera: Camera | null = null;\r\n  public get camera(): Camera {\r\n    return this._camera!;\r\n  }\r\n\r\n  // #region Cocos Creator Event Handling\r\n  protected onLoad() {\r\n    console.info('CubismMaskCommandBuffer.onLoad()');\r\n    let camera = this.getComponent(Camera);\r\n    if (camera == null) {\r\n      camera = this.addComponent(Camera);\r\n    }\r\n    console.assert(camera);\r\n    camera = camera!;\r\n    camera.priority = Number.MIN_SAFE_INTEGER;\r\n    this.node.layer = userLayer19 | (EDITOR ? Layers.Enum.EDITOR : 0);\r\n    camera.projection = renderer.scene.CameraProjection.ORTHO;\r\n    camera.visibility = userLayer19 | (EDITOR ? Layers.Enum.EDITOR : 0);\r\n    camera.clearFlags = Camera.ClearFlag.SOLID_COLOR;\r\n    camera.clearColor = new math.Color(0, 0, 0, 0);\r\n    camera.orthoHeight = 1;\r\n    camera.near = -0.5;\r\n    camera.far = 0.5;\r\n\r\n    // TODO: HACK\r\n    // Ignore SceneView camera\r\n    if (EDITOR) {\r\n      // @ts-ignore\r\n      cce.Camera._camera.visibility &= ~userLayer19;\r\n    }\r\n\r\n    const targetTexture = CubismMaskTexture.globalMaskTexture?.getTextureReference() ?? null;\r\n    if (targetTexture == null) {\r\n      console.error(\r\n        'CubismMaskCommandBuffer.onLoad(): CubismMaskTexture.globalMaskTexture is null.'\r\n      );\r\n      return;\r\n    }\r\n    camera.targetTexture = targetTexture;\r\n    console.assert(camera.targetTexture);\r\n    this._camera = camera;\r\n  }\r\n\r\n  /** Executes Buffer. */\r\n  protected lateUpdate(dt: number): void {\r\n    const scene = director.getScene();\r\n    if (scene == null) {\r\n      console.error('director.getScene() failed.');\r\n      return;\r\n    }\r\n    if (scene.renderScene == null) {\r\n      console.error('director.getScene().renderScene is null.');\r\n      return;\r\n    }\r\n\r\n    if (!CubismMaskCommandBuffer.containsSources) {\r\n      return;\r\n    }\r\n\r\n    // Refresh and execute buffer.\r\n    CubismMaskCommandBuffer.refreshCommandBuffer();\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport class CubismMaskCommandBufferMetadata {\r\n  enabled: boolean = false;\r\n  cubismRenderer: CubismRenderer | null = null;\r\n  meshRenderer: MeshRenderer | null = null;\r\n}\r\n\r\nconst userLayer19 = 0x00080000; // 0x00080000\r\n\r\nconst PROXY_HIDE_FLAGS =\r\n  CCObject.Flags.DontSave |\r\n  CCObject.Flags.EditorOnly |\r\n  CCObject.Flags.DontDestroy |\r\n  CCObject.Flags.HideInHierarchy;\r\n"]}