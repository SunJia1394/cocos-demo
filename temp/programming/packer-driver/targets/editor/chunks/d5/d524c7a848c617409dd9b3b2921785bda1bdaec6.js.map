{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismBuiltinPickers.ts"],"names":["CubismBuiltinMaterials","materialPicker","_sender","drawable","isDoubleSided","blendAdditive","isMasked","isInverted","getUnlitAdditiveMaskedInverted","getUnlitAdditiveMasked","getUnlitAdditive","multiplyBlend","getUnlitMultiplyMaskedInverted","getUnlitMultiplyMasked","getUnlitMultiply","getUnlitMaskedInverted","getUnlitMasked","getUnlit","getUnlitAdditiveMaskedInvertedCulling","getUnlitAdditiveMaskedCulling","getUnlitAdditiveCulling","getUnlitMultiplyMaskedInvertedCulling","getUnlitMultiplyMaskedCulling","getUnlitMultiplyCulling","getUnlitMaskedInvertedCulling","getUnlitMaskedCulling","getUnlitCulling","texturePicker","sender","getTexture","textureIndex","CubismBuiltinPickers"],"mappings":";;;;;;;;;;;AAOOA,MAAAA,sB;;;;AAPP;AACA;AACA;AACA;AACA;AACA;;;;;;AAeS,iBAASC,cAAT,CACLC,OADK,EAELC,QAFK,EAGqB;AAC1B,cAAIA,QAAQ,CAACC,aAAb,EAA4B;AAC1B,gBAAID,QAAQ,CAACE,aAAb,EAA4B;AAC1B,qBAAOF,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACQ,8BAAvB,EADF,GAEER,sBAAsB,CAACS,sBAAvB,EAHC,GAIHT,sBAAsB,CAACU,gBAAvB,EAJJ;AAKD;;AAED,gBAAIP,QAAQ,CAACQ,aAAb,EAA4B;AAC1B,qBAAOR,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACY,8BAAvB,EADF,GAEEZ,sBAAsB,CAACa,sBAAvB,EAHC,GAIHb,sBAAsB,CAACc,gBAAvB,EAJJ;AAKD;;AAED,mBAAOX,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACe,sBAAvB,EADF,GAEEf,sBAAsB,CAACgB,cAAvB,EAHC,GAIHhB,sBAAsB,CAACiB,QAAvB,EAJJ;AAKD;;AAED,cAAId,QAAQ,CAACE,aAAb,EAA4B;AAC1B,mBAAOF,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACkB,qCAAvB,EADF,GAEElB,sBAAsB,CAACmB,6BAAvB,EAHC,GAIHnB,sBAAsB,CAACoB,uBAAvB,EAJJ;AAKD;;AAED,cAAIjB,QAAQ,CAACQ,aAAb,EAA4B;AAC1B,mBAAOR,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACqB,qCAAvB,EADF,GAEErB,sBAAsB,CAACsB,6BAAvB,EAHC,GAIHtB,sBAAsB,CAACuB,uBAAvB,EAJJ;AAKD;;AAED,iBAAOpB,QAAQ,CAACG,QAAT,GACHH,QAAQ,CAACI,UAAT,GACEP,sBAAsB,CAACwB,6BAAvB,EADF,GAEExB,sBAAsB,CAACyB,qBAAvB,EAHC,GAIHzB,sBAAsB,CAAC0B,eAAvB,EAJJ;AAKD;;;;AAQM,iBAASC,aAAT,CACLC,MADK,EAELzB,QAFK,EAGsB;AAC3B,iBAAOyB,MAAM,CAACC,UAAP,CAAkB1B,QAAQ,CAAC2B,YAA3B,CAAP;AACD;;;SArEOC,oB,KAAAA,oB;;yBAuEKA,oB","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport CubismBuiltinMaterials from '../../Rendering/CubismBuiltinMaterials';\r\nimport type { Material, Texture2D } from 'cc';\r\nimport type CubismModel3Json from './CubismModel3Json';\r\nimport type CubismDrawable from '../../Core/CubismDrawable';\r\n\r\n/** Default pickers. */\r\nnamespace CubismBuiltinPickers {\r\n  /**\r\n   * Builtin Material picker.\r\n   * @param sender Event source.\r\n   * @param drawable Drawable to map to.\r\n   * @returns Mapped texture.\r\n   */\r\n  export function materialPicker(\r\n    _sender: CubismModel3Json,\r\n    drawable: CubismDrawable\r\n  ): Promise<Material | null> {\r\n    if (drawable.isDoubleSided) {\r\n      if (drawable.blendAdditive) {\r\n        return drawable.isMasked\r\n          ? drawable.isInverted\r\n            ? CubismBuiltinMaterials.getUnlitAdditiveMaskedInverted()\r\n            : CubismBuiltinMaterials.getUnlitAdditiveMasked()\r\n          : CubismBuiltinMaterials.getUnlitAdditive();\r\n      }\r\n\r\n      if (drawable.multiplyBlend) {\r\n        return drawable.isMasked\r\n          ? drawable.isInverted\r\n            ? CubismBuiltinMaterials.getUnlitMultiplyMaskedInverted()\r\n            : CubismBuiltinMaterials.getUnlitMultiplyMasked()\r\n          : CubismBuiltinMaterials.getUnlitMultiply();\r\n      }\r\n\r\n      return drawable.isMasked\r\n        ? drawable.isInverted\r\n          ? CubismBuiltinMaterials.getUnlitMaskedInverted()\r\n          : CubismBuiltinMaterials.getUnlitMasked()\r\n        : CubismBuiltinMaterials.getUnlit();\r\n    }\r\n\r\n    if (drawable.blendAdditive) {\r\n      return drawable.isMasked\r\n        ? drawable.isInverted\r\n          ? CubismBuiltinMaterials.getUnlitAdditiveMaskedInvertedCulling()\r\n          : CubismBuiltinMaterials.getUnlitAdditiveMaskedCulling()\r\n        : CubismBuiltinMaterials.getUnlitAdditiveCulling();\r\n    }\r\n\r\n    if (drawable.multiplyBlend) {\r\n      return drawable.isMasked\r\n        ? drawable.isInverted\r\n          ? CubismBuiltinMaterials.getUnlitMultiplyMaskedInvertedCulling()\r\n          : CubismBuiltinMaterials.getUnlitMultiplyMaskedCulling()\r\n        : CubismBuiltinMaterials.getUnlitMultiplyCulling();\r\n    }\r\n\r\n    return drawable.isMasked\r\n      ? drawable.isInverted\r\n        ? CubismBuiltinMaterials.getUnlitMaskedInvertedCulling()\r\n        : CubismBuiltinMaterials.getUnlitMaskedCulling()\r\n      : CubismBuiltinMaterials.getUnlitCulling();\r\n  }\r\n\r\n  /**\r\n   * Builtin Texture2D picker.\r\n   * @param sender Event source.\r\n   * @param drawable Drawable to map to.\r\n   * @returns Mapped texture.\r\n   */\r\n  export function texturePicker(\r\n    sender: CubismModel3Json,\r\n    drawable: CubismDrawable\r\n  ): Promise<Texture2D | null> {\r\n    return sender.getTexture(drawable.textureIndex);\r\n  }\r\n}\r\nexport default CubismBuiltinPickers;\r\n"]}