{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/CubismRenderer.ts"],"names":["SwapInfo","CCFloat","CCInteger","Component","director","Enum","math","Mesh","MeshRenderer","Texture2D","_decorator","CubismDrawable","CubismShaderVariables","CubismSortingMode","CubismMeshPrimitive","EditorUtils","isImporter","ccclass","property","requireComponent","executeInEditMode","onControllerSortingOrderDidChange","Symbol","for","onControllerSortingModeDidChange","onControllerDepthOffsetDidChange","CubismRendererInEditorSymbols","CubismRenderer","type","serializable","visible","readonly","_lastIsUseUserMultiplyColor","_lastIsUseUserScreenColor","_lastMultiplyColor","Color","WHITE","_lastScreenColor","_meshes","makeEmpty","_frontMesh","_backMesh","_meshRenderer","_drawable","_renderController","_lastSwap","DEFAULT","_thisSwap","localSortingOrder","_localSortingOrder","value","applySorting","color","_color","equals","applyVertexColors","overwriteFlagForDrawableMultiplyColors","_isOverwrittenDrawableMultiplyColors","lastIsUseUserMultiplyColor","overwriteFlagForDrawableScreenColor","_isOverwrittenDrawableScreenColor","lastIsUseUserScreenColor","multiplyColor","renderController","overwriteFlagForModelMultiplyColors","_multiplyColor","drawable","clone","lastMultiplyColor","screenColor","overwriteFlagForModelScreenColors","_screenColor","BLACK","lastScreenColor","material","meshRenderer","mainTexture","_mainTexture","applyMainTexture","meshes","frontMesh","backMesh","mesh","sortingMode","_sortingMode","sortingOrder","_sortingOrder","renderOrder","_renderOrder","depthOffset","_depthOffset","opacity","_opacity","vertexColors","_vertexColors","lastSwap","thisSwap","swapMeshes","setColors","resetSwapInfoFlags","scene","getScene","console","error","renderScene","createMesh","updateVisibility","didBecomeVisible","enabled","didBecomeInvisible","resetVisibilityFlags","updateRenderOrder","newRenderOrder","resetRenderOrderFlag","onControllerSortingLayerDidChange","newSortingLayer","newSortingMode","applyComponentProperty","node","uuid","then","newSortingOrder","newDepthOffset","onDrawableOpacityDidChange","newOpacity","onDrawableRenderOrderDidChange","setNewRenderOrder","onDrawableVertexPositionsDidChange","newVertexPositions","setPositions","setNewVertexPositions","onDrawableVisiblityDidChange","newVisibility","becomeVisible","becomeInvisible","onMaskPropertiesDidChange","newMaskProperties","maskTex","texture","getTextureReference","maskTile","tile","toVec4","maskTransform","transform","getMaterialInstance","setProperty","maskTexture","onModelOpacityDidChange","newModelOpacity","modelOpacity","sortByOrder","priority","backToFrontOrder","position","Vec3","ZERO","_priorityInEditor","offset","backToFrontZ","r","g","b","a","i","length","setNewVertexColors","applyMultiplyColor","renderer","tryInitializeMultiplyColor","applyScreenColor","tryInitializeScreenColor","tryInitializeMeshRenderer","getComponent","addComponent","receiveShadow","shadowCastingMode","tryInitializeMesh","vertexCount","primitive","generateMeshPrimitive","tryInitializeVertexColor","Array","tryInitializeMainTexture","tryInitialize","copyWith","newVertexColors","onDestroy","EPSILON","constructor","args","other","strictEquals"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  CCFloat,\r\n  CCInteger,\r\n  Component,\r\n  director,\r\n  Enum,\r\n  Material,\r\n  math,\r\n  Mesh,\r\n  MeshRenderer,\r\n  Texture2D,\r\n  _decorator,\r\n} from 'cc';\r\nimport CubismDrawable from '../Core/CubismDrawable';\r\nimport CubismShaderVariables from '../Rendering/CubismShaderVariables';\r\nimport CubismSortingMode from '../Rendering/CubismSortingMode';\r\nimport CubismMaskProperties from '../Rendering/Masking/CubismMaskProperties';\r\nimport CubismMeshPrimitive from './CubismMeshPrimitive';\r\nimport { EditorUtils, isImporter } from '../Utils';\r\nimport type IStructLike from '../IStructLike';\r\nimport CubismRenderController from './CubismRenderController';\r\nconst { ccclass, property, requireComponent, executeInEditMode } = _decorator;\r\n\r\nexport namespace CubismRendererInEditorSymbols {\r\n  export const onControllerSortingOrderDidChange = Symbol.for('onControllerSortingOrderDidChange');\r\n  export const onControllerSortingModeDidChange = Symbol.for('onControllerSortingModeDidChange');\r\n  export const onControllerDepthOffsetDidChange = Symbol.for('onControllerDepthOffsetDidChange');\r\n}\r\n\r\n/** Wrapper for drawing CubismDrawables. */\r\n@ccclass('CubismRenderer')\r\n@requireComponent(MeshRenderer)\r\n@executeInEditMode\r\nexport default class CubismRenderer extends Component {\r\n  //#region LocalSortingOrder\r\n  /** LocalSortingOrder backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: false })\r\n  private _localSortingOrder: number = 0;\r\n\r\n  /** Local sorting order. */\r\n  @property({ type: CCInteger, visible: true })\r\n  public get localSortingOrder() {\r\n    return this._localSortingOrder;\r\n  }\r\n  public set localSortingOrder(value) {\r\n    // Return early if same value given.\r\n    if (value == this._localSortingOrder) {\r\n      return;\r\n    }\r\n\r\n    // Store value.\r\n    this._localSortingOrder = value;\r\n\r\n    // Apply it.\r\n    this.applySorting();\r\n  }\r\n  //#endregion\r\n\r\n  //#region Color\r\n  /** Color backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _color: Readonly<math.Color> = math.Color.WHITE.clone();\r\n\r\n  /** Color. */\r\n  @property({ visible: true })\r\n  public get color(): Readonly<math.Color> {\r\n    return this._color;\r\n  }\r\n  public set color(value: Readonly<math.Color>) {\r\n    // Return early if same value given.\r\n    if (this._color.equals(value)) {\r\n      return;\r\n    }\r\n\r\n    // Store value.\r\n    this._color = value;\r\n\r\n    // Apply color.\r\n    this.applyVertexColors();\r\n  }\r\n  //#endregion\r\n\r\n  //#region OverwriteFlagForDrawableMultiplyColors\r\n  /** {@link overwriteFlagForDrawableMultiplyColors} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _isOverwrittenDrawableMultiplyColors: boolean = false;\r\n\r\n  /** Whether to overwrite with multiply color from the model. */\r\n  public get overwriteFlagForDrawableMultiplyColors(): boolean {\r\n    return this._isOverwrittenDrawableMultiplyColors;\r\n  }\r\n  public set overwriteFlagForDrawableMultiplyColors(value: boolean) {\r\n    this._isOverwrittenDrawableMultiplyColors = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region LastIsUseUserMultiplyColor\r\n  public _lastIsUseUserMultiplyColor: boolean = false;\r\n\r\n  /** Last {@link overwriteFlagForDrawableMultiplyColors}. */\r\n  public get lastIsUseUserMultiplyColor(): boolean {\r\n    return this._lastIsUseUserMultiplyColor;\r\n  }\r\n  public set lastIsUseUserMultiplyColor(value: boolean) {\r\n    this._lastIsUseUserMultiplyColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region OverwriteFlagForDrawableScreenColor\r\n  /** {@link overwriteFlagForDrawableScreenColor} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _isOverwrittenDrawableScreenColor: boolean = false;\r\n\r\n  /** Whether to overwrite with screen color from the model. */\r\n  public get overwriteFlagForDrawableScreenColor(): boolean {\r\n    return this._isOverwrittenDrawableScreenColor;\r\n  }\r\n  public set overwriteFlagForDrawableScreenColor(value: boolean) {\r\n    this._isOverwrittenDrawableScreenColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region LastIsUseUserScreenColor\r\n  public _lastIsUseUserScreenColor: boolean = false;\r\n\r\n  /** Last {@link overwriteFlagForDrawableScreenColors}. */\r\n  public get lastIsUseUserScreenColor(): boolean {\r\n    return this._lastIsUseUserScreenColor;\r\n  }\r\n  public set lastIsUseUserScreenColor(value: boolean) {\r\n    this._lastIsUseUserScreenColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region MultiplyColor\r\n  /** {@link MultiplyColor} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _multiplyColor: Readonly<math.Color> = math.Color.WHITE.clone();\r\n\r\n  public get multiplyColor(): Readonly<math.Color> {\r\n    if (\r\n      this.overwriteFlagForDrawableMultiplyColors ||\r\n      this.renderController?.overwriteFlagForModelMultiplyColors\r\n    ) {\r\n      return this._multiplyColor;\r\n    }\r\n    return this.drawable?.multiplyColor ?? math.Color.WHITE;\r\n  }\r\n  public set multiplyColor(value: Readonly<math.Color>) {\r\n    // Return early if same value given.\r\n    if (this._multiplyColor.equals(value)) {\r\n      return;\r\n    }\r\n    // Store value.\r\n    this._multiplyColor = value != null ? value : math.Color.WHITE.clone();\r\n  }\r\n  //#endregion\r\n\r\n  //#region LastMultiplyColor\r\n  public _lastMultiplyColor: Readonly<math.Color> = math.Color.WHITE;\r\n  /** Last Drawable Multiply Color. */\r\n  public get lastMultiplyColor(): Readonly<math.Color> {\r\n    return this._lastMultiplyColor;\r\n  }\r\n  public set lastMultiplyColor(value: Readonly<math.Color>) {\r\n    this._lastMultiplyColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ScreenColor\r\n  /** {@link ScreenColor} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _screenColor: Readonly<math.Color> = new math.Color(0, 0, 0, 0);\r\n  /** Drawable Screen Color. */\r\n  public get screenColor(): Readonly<math.Color> {\r\n    if (\r\n      this.overwriteFlagForDrawableScreenColor ||\r\n      this.renderController?.overwriteFlagForModelScreenColors\r\n    ) {\r\n      return this._screenColor;\r\n    }\r\n    return this.drawable?.screenColor ?? new math.Color(0, 0, 0, 0);\r\n  }\r\n  public set screenColor(value: Readonly<math.Color>) {\r\n    // Return early if same value given.\r\n    if (this._screenColor.equals(value)) {\r\n      return;\r\n    }\r\n    // Store value.\r\n    this._screenColor = value != null ? value : math.Color.BLACK;\r\n  }\r\n  //#endregion\r\n\r\n  //#region LastScreenColor\r\n  private _lastScreenColor: Readonly<math.Color> = new math.Color(0, 0, 0, 0);\r\n  /** Last Drawable Screen Color. */\r\n  public get lastScreenColor(): Readonly<math.Color> {\r\n    return this._lastScreenColor;\r\n  }\r\n  public set lastScreenColor(value: Readonly<math.Color>) {\r\n    this._lastScreenColor = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Material\r\n  /** Material. */\r\n  // @property({ type: Material, visible: true })\r\n  public get material(): Material | null {\r\n    return this.meshRenderer?.material ?? null;\r\n  }\r\n  public set material(value: Material | null) {\r\n    if (this.meshRenderer != null) {\r\n      this.meshRenderer.material = value;\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region MainTexture\r\n  /** MainTexture backing field. */\r\n  @property({ type: Texture2D, serializable: true, visible: false })\r\n  private _mainTexture: Texture2D | null = null;\r\n\r\n  /** MeshRenderer's main texture. */\r\n  @property({ type: Texture2D, visible: true })\r\n  public get mainTexture(): Texture2D | null {\r\n    return this._mainTexture;\r\n  }\r\n  public set mainTexture(value: Texture2D | null) {\r\n    // Return early if same value given and main texture is valid.\r\n    if (this._mainTexture == value) {\r\n      return;\r\n    }\r\n\r\n    // Store value.\r\n    this._mainTexture = value;\r\n\r\n    // Apply it.\r\n    this.applyMainTexture();\r\n  }\r\n  //#endregion\r\n\r\n  //#region Meshes\r\n  // @property({ serializable: false, visible: false })\r\n  private _meshes: [CubismMeshPrimitive, CubismMeshPrimitive] = [\r\n    CubismMeshPrimitive.makeEmpty(),\r\n    CubismMeshPrimitive.makeEmpty(),\r\n  ];\r\n  /**\r\n   * Meshes.\r\n   *\r\n   * Double buffering dynamic meshes increases performance on mobile, so we double-buffer them here.\r\n   */\r\n  private get meshes() {\r\n    return this._meshes;\r\n  }\r\n  private set meshes(value) {\r\n    this._meshes = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region FrontMesh\r\n  // @property({ serializable: false, visible: false })\r\n  private _frontMesh: number = 0;\r\n  /** Index of front buffer mesh. */\r\n  private get frontMesh() {\r\n    return this._frontMesh;\r\n  }\r\n  private set frontMesh(value) {\r\n    this._frontMesh = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region BackMesh\r\n  // @property({ serializable: false, visible: false })\r\n  private _backMesh: number = 0;\r\n  /** Index of back buffer mesh. */\r\n  private get backMesh() {\r\n    return this._backMesh;\r\n  }\r\n  private set backMesh(value) {\r\n    this._backMesh = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Mesh\r\n  /** Mesh */\r\n  @property({ type: Mesh, visible: true, readonly: true })\r\n  public get mesh() {\r\n    return this.meshes[this.frontMesh];\r\n  }\r\n  //#endregion\r\n\r\n  //#region MeshRenderer\r\n  /** MeshRenderer backing field. */\r\n  // @property({ serializable: false, visible: false })\r\n  private _meshRenderer: MeshRenderer | null = null;\r\n  public get meshRenderer(): MeshRenderer | null {\r\n    return this._meshRenderer;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Drawable\r\n  /** {@link CubismDrawable} */\r\n  private _drawable: CubismDrawable | null = null;\r\n\r\n  /** {@link CubismRenderController} */\r\n  private get drawable(): CubismDrawable | null {\r\n    return this._drawable;\r\n  }\r\n  private set drawable(value: CubismDrawable | null) {\r\n    this._drawable = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region RenderController\r\n  private _renderController: CubismRenderController | null = null;\r\n\r\n  /** {@link CubismRenderController} */\r\n  private get renderController(): CubismRenderController | null {\r\n    return this._renderController;\r\n  }\r\n  private set renderController(value: CubismRenderController | null) {\r\n    this._renderController = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Interface For CubismRenderController\r\n\r\n  //#region SortingMode\r\n  /** SortingMode backing field. */\r\n  @property({ type: Enum(CubismSortingMode), serializable: true, visible: false })\r\n  private _sortingMode: CubismSortingMode = CubismSortingMode.backToFrontZ;\r\n\r\n  /** Sorting mode. */\r\n  @property({ type: Enum(CubismSortingMode), visible: false })\r\n  private get sortingMode() {\r\n    return this._sortingMode;\r\n  }\r\n  private set sortingMode(value) {\r\n    this._sortingMode = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region SortingOrder\r\n  /** SortingOrder backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: false })\r\n  private _sortingOrder: number = 0;\r\n  /** Sorting mode. */\r\n  private get sortingOrder() {\r\n    return this._sortingOrder;\r\n  }\r\n  private set sortingOrder(value) {\r\n    this._sortingOrder = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region RenderOrder\r\n  /** RenderOrder backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: false })\r\n  private _renderOrder: number = 0;\r\n\r\n  /** Sorting mode. */\r\n  private get renderOrder() {\r\n    return this._renderOrder;\r\n  }\r\n  private set renderOrder(value) {\r\n    this._renderOrder = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region DepthOffset\r\n  /** DepthOffset backing field. */\r\n  @property({ type: CCFloat, serializable: true, visible: false })\r\n  private _depthOffset: number = math.EPSILON;\r\n  /** Offset to apply in case of depth sorting. */\r\n  private get depthOffset() {\r\n    return this._depthOffset;\r\n  }\r\n  private set depthOffset(value) {\r\n    this._depthOffset = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region Opacity\r\n  /** Opacity backing field. */\r\n  @property({ type: CCFloat, serializable: true, visible: false })\r\n  private _opacity: number = 0;\r\n  /** Opacity. */\r\n  private get opacity(): number {\r\n    return this._opacity;\r\n  }\r\n  private set opacity(value: number) {\r\n    this._opacity = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region CertexColors\r\n  @property({ serializable: true, visible: false })\r\n  private _vertexColors: math.Color[] | null = null;\r\n  /** Buffer for vertex colors. */\r\n  private get vertexColors(): math.Color[] | null {\r\n    return this._vertexColors;\r\n  }\r\n  private set vertexColors(value: math.Color[] | null) {\r\n    this._vertexColors = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region LastSwap\r\n  // @property({ serializable: false, visible: false })\r\n  private _lastSwap: SwapInfo = SwapInfo.DEFAULT;\r\n  /** Allows tracking of what vertex data was updated last swap. */\r\n  private get lastSwap() {\r\n    return this._lastSwap;\r\n  }\r\n  private set lastSwap(value) {\r\n    this._lastSwap = value;\r\n  }\r\n  //#endregion\r\n\r\n  //#region ThisSwap\r\n  // @property({ serializable: false, visible: false })\r\n  private _thisSwap: SwapInfo = SwapInfo.DEFAULT;\r\n  /** Allows tracking of what vertex data will be swapped. */\r\n  private get thisSwap() {\r\n    return this._thisSwap;\r\n  }\r\n  private set thisSwap(value) {\r\n    this._thisSwap = value;\r\n  }\r\n  //#endregion\r\n\r\n  /** Editor Inspector 表示用 */\r\n  @property({ type: CCFloat, serializable: true })\r\n  private _priorityInEditor: number = 0;\r\n\r\n  /**\r\n   * Swaps mesh buffers.\r\n   *\r\n   * Make sure to manually call this method in case you changed the Color.\r\n   */\r\n  public swapMeshes() {\r\n    // Perform internal swap.\r\n    this.backMesh = this.frontMesh;\r\n    this.frontMesh = this.frontMesh == 0 ? 1 : 0;\r\n\r\n    let mesh = this.meshes[this.frontMesh];\r\n\r\n    // Update colors.\r\n    if (this.vertexColors != null) {\r\n      mesh.setColors(this.vertexColors);\r\n    }\r\n\r\n    // Update swap info.\r\n    this.lastSwap = this.thisSwap;\r\n\r\n    this.resetSwapInfoFlags();\r\n\r\n    // Importer動作処理の場合は実行しない。\r\n    if (isImporter()) {\r\n      return;\r\n    }\r\n    const scene = director.getScene();\r\n    if (scene == null) {\r\n      console.error('CubismRenderer.swapMeshes(): director.getScene() failed.');\r\n      return;\r\n    }\r\n    const renderScene = scene.renderScene;\r\n    if (renderScene == null) {\r\n      console.error('CubismRenderer.swapMeshes(): renderScene is null.');\r\n      return;\r\n    }\r\n    if (this.meshRenderer == null) {\r\n      console.error('CubismRenderer.swapMeshes(): meshRenderer is null.');\r\n      return;\r\n    }\r\n    this.meshRenderer.mesh = mesh.createMesh();\r\n  }\r\n\r\n  /** Updates visibility. */\r\n  public updateVisibility() {\r\n    if (this.meshRenderer) {\r\n      if (this.lastSwap.didBecomeVisible) {\r\n        this.meshRenderer.enabled = true;\r\n      } else if (this.lastSwap.didBecomeInvisible) {\r\n        this.meshRenderer.enabled = false;\r\n      }\r\n    }\r\n    this.resetVisibilityFlags();\r\n  }\r\n\r\n  /** Updates render order. */\r\n  public updateRenderOrder() {\r\n    if (this.lastSwap.newRenderOrder) {\r\n      this.applySorting();\r\n    }\r\n\r\n    this.resetRenderOrderFlag();\r\n  }\r\n\r\n  /**\r\n   * Updates sorting layer.\r\n   * @param newSortingLayer New sorting layer.\r\n   */\r\n  public onControllerSortingLayerDidChange(newSortingLayer: number): void {\r\n    // TODO: meshRenderer.sortingLayerID\r\n    // this.meshRenderer.sortingLayerID = newSortingLayer;\r\n  }\r\n\r\n  /**\r\n   * Updates sorting mode.\r\n   * @param newSortingMode New sorting mode.\r\n   */\r\n  public onControllerSortingModeDidChange(newSortingMode: CubismSortingMode): void {\r\n    this.sortingMode = newSortingMode;\r\n    this.applySorting();\r\n  }\r\n\r\n  /** In editor method. */\r\n  [CubismRendererInEditorSymbols.onControllerSortingModeDidChange](\r\n    newSortingMode: CubismSortingMode\r\n  ) {\r\n    EditorUtils.applyComponentProperty(\r\n      this.node.uuid,\r\n      this.uuid,\r\n      'sortingMode',\r\n      newSortingMode,\r\n      'Enum'\r\n    ).then(() => this.applySorting());\r\n  }\r\n\r\n  /**\r\n   * Updates sorting order.\r\n   * @param newSortingOrder New sorting order.\r\n   */\r\n  public onControllerSortingOrderDidChange(newSortingOrder: number): void {\r\n    this.sortingOrder = newSortingOrder;\r\n    this.applySorting();\r\n  }\r\n\r\n  /** In editor method. */\r\n  [CubismRendererInEditorSymbols.onControllerSortingOrderDidChange](newSortingOrder: number) {\r\n    EditorUtils.applyComponentProperty(\r\n      this.node.uuid,\r\n      this.uuid,\r\n      'sortingOrder',\r\n      newSortingOrder,\r\n      'Float'\r\n    ).then(() => this.applySorting());\r\n  }\r\n\r\n  /**\r\n   * Updates depth offset.\r\n   * @param newDepthOffset\r\n   */\r\n  public onControllerDepthOffsetDidChange(newDepthOffset: number): void {\r\n    this.depthOffset = newDepthOffset;\r\n\r\n    this.applySorting();\r\n  }\r\n\r\n  /** In editor method. */\r\n  [CubismRendererInEditorSymbols.onControllerDepthOffsetDidChange](newDepthOffset: number) {\r\n    EditorUtils.applyComponentProperty(\r\n      this.node.uuid,\r\n      this.uuid,\r\n      'depthOffset',\r\n      newDepthOffset,\r\n      'Float'\r\n    ).then(() => this.applySorting());\r\n  }\r\n\r\n  /**\r\n   * Sets the opacity.\r\n   * @param newOpacity New opacity.\r\n   */\r\n  public onDrawableOpacityDidChange(newOpacity: number): void {\r\n    this.opacity = newOpacity;\r\n\r\n    this.applyVertexColors();\r\n  }\r\n\r\n  /**\r\n   * Updates render order.\r\n   * @param newRenderOrder New render order.\r\n   */\r\n  public onDrawableRenderOrderDidChange(newRenderOrder: number): void {\r\n    this.renderOrder = newRenderOrder;\r\n\r\n    this.setNewRenderOrder();\r\n  }\r\n\r\n  /**\r\n   * Sets the UnityEngine.Mesh.vertices.\r\n   * @param newVertexPositions Vertex positions to set.\r\n   */\r\n  public onDrawableVertexPositionsDidChange(newVertexPositions: readonly math.Vec3[]): void {\r\n    const mesh = this.mesh;\r\n\r\n    // Apply positions and update bounds.\r\n    mesh.setPositions(newVertexPositions);\r\n\r\n    // Set swap flag.\r\n    this.setNewVertexPositions();\r\n  }\r\n\r\n  /**\r\n   * Sets visibility.\r\n   * @param newVisibility New visibility.\r\n   */\r\n  public onDrawableVisiblityDidChange(newVisibility: boolean): void {\r\n    // Set swap flag if visible.\r\n    if (newVisibility) {\r\n      this.becomeVisible();\r\n    } else {\r\n      this.becomeInvisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets mask properties.\r\n   * @param newMaskProperties Value to set.\r\n   */\r\n  public onMaskPropertiesDidChange(newMaskProperties: CubismMaskProperties): void {\r\n    const maskTex = newMaskProperties.texture?.getTextureReference() ?? null;\r\n    const maskTile = newMaskProperties.tile.toVec4();\r\n    const maskTransform = newMaskProperties.transform.toVec4();\r\n\r\n    const meshRenderer = this.meshRenderer;\r\n    if (meshRenderer == null) {\r\n      console.error('CubismRenderer.onMaskPropertiesDidChange(): meshRenderer is null.');\r\n      return;\r\n    }\r\n    const material = meshRenderer.getMaterialInstance(0);\r\n    if (material == null) {\r\n      console.error('CubismRenderer.onMaskPropertiesDidChange(): material is null.');\r\n      return;\r\n    }\r\n    material.setProperty(CubismShaderVariables.maskTexture, maskTex);\r\n    material.setProperty(CubismShaderVariables.maskTile, maskTile);\r\n    material.setProperty(CubismShaderVariables.maskTransform, maskTransform);\r\n  }\r\n\r\n  /**\r\n   * Sets model opacity.\r\n   * @param newModelOpacity Opacity to set.\r\n   */\r\n  public onModelOpacityDidChange(newModelOpacity: number): void {\r\n    // Write property.\r\n    this.meshRenderer?.material?.setProperty(CubismShaderVariables.modelOpacity, newModelOpacity);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /** Applies main texture for rendering. */\r\n  private applyMainTexture() {\r\n    // Importer動作処理の場合は実行しない。\r\n    if (isImporter()) {\r\n      return;\r\n    }\r\n    const meshRenderer = this.meshRenderer;\r\n    if (meshRenderer == null) {\r\n      console.error('CubismRenderer.applyMainTexture(): meshRenderer is null.');\r\n      return;\r\n    }\r\n    let material = meshRenderer.getMaterialInstance(0);\r\n    if (material == null) {\r\n      console.error('CubismRenderer.applyMainTexture(): material is null.');\r\n      return;\r\n    }\r\n    material.setProperty(CubismShaderVariables.mainTexture, this.mainTexture);\r\n  }\r\n\r\n  /** Applies sorting. */\r\n  private applySorting(): void {\r\n    if (this.meshRenderer == null) {\r\n      console.error('CubismRenderer.applySorting(): this.meshRenderer is null.');\r\n      return;\r\n    }\r\n    // Sort by order.\r\n    if (CubismSortingMode.sortByOrder(this.sortingMode)) {\r\n      this.meshRenderer.priority =\r\n        this.sortingOrder +\r\n        (this.sortingMode == CubismSortingMode.backToFrontOrder\r\n          ? this.renderOrder + this.localSortingOrder\r\n          : -(this.renderOrder + this.localSortingOrder));\r\n      this.node.position = math.Vec3.ZERO;\r\n      this._priorityInEditor = this.meshRenderer.priority;\r\n      return;\r\n    }\r\n    // Sort by depth.\r\n    let offset =\r\n      this.sortingMode == CubismSortingMode.backToFrontZ ? this.depthOffset : -this.depthOffset;\r\n    this.meshRenderer.priority = this.sortingOrder + this.localSortingOrder;\r\n    this._priorityInEditor = this.meshRenderer.priority;\r\n    this.node.position = new math.Vec3(0, 0, this.renderOrder * offset);\r\n  }\r\n\r\n  /** Uploads mesh vertex colors. */\r\n  public applyVertexColors(): void {\r\n    const vertexColors = this.vertexColors;\r\n    if (vertexColors == null) {\r\n      console.error('applyVertexColors -> this.vertexColors is null.');\r\n      return;\r\n    }\r\n    let color = this.color;\r\n    color = new math.Color(color.r, color.g, color.b, color.a * this.opacity);\r\n\r\n    for (let i = 0; i < vertexColors.length; i++) {\r\n      vertexColors[i] = color;\r\n    }\r\n\r\n    // Set swap flag.\r\n    this.setNewVertexColors();\r\n  }\r\n\r\n  /** Uploads diffuse colors. */\r\n  public applyMultiplyColor(): void {\r\n    if (isImporter()) {\r\n      return;\r\n    }\r\n    // Write property.\r\n    const renderer = this.meshRenderer;\r\n    if (renderer) {\r\n      const material = renderer.getMaterialInstance(0);\r\n      material?.setProperty(CubismShaderVariables.multiplyColor, this.multiplyColor);\r\n    }\r\n  }\r\n\r\n  /** Initializes the main texture if possible. */\r\n  private tryInitializeMultiplyColor(): void {\r\n    this.lastIsUseUserMultiplyColor = false;\r\n\r\n    this.lastMultiplyColor = this.multiplyColor;\r\n\r\n    this.applyMultiplyColor();\r\n  }\r\n\r\n  /** Uploads tint colors. */\r\n  public applyScreenColor(): void {\r\n    if (isImporter()) {\r\n      return;\r\n    }\r\n    // Write property.\r\n    const renderer = this.meshRenderer;\r\n    if (renderer) {\r\n      const material = renderer.getMaterialInstance(0);\r\n      material?.setProperty(CubismShaderVariables.screenColor, this.screenColor);\r\n    }\r\n  }\r\n\r\n  /** Initializes the main texture if possible. */\r\n  private tryInitializeScreenColor(): void {\r\n    this.lastIsUseUserScreenColor = false;\r\n\r\n    this.lastScreenColor = this.screenColor;\r\n\r\n    this.applyScreenColor();\r\n  }\r\n\r\n  /** Initializes the mesh renderer. */\r\n  private tryInitializeMeshRenderer(): void {\r\n    if (this._meshRenderer == null) {\r\n      this._meshRenderer = this.getComponent(MeshRenderer) ?? this.addComponent(MeshRenderer);\r\n\r\n      // Lazily add component.\r\n      if (this._meshRenderer != null) {\r\n        // TODO: Unity における HideFlags.HideInInspector はどれか？\r\n        // this._meshRenderer.hideFlags = CCObject.Flags.; // HideFlags.HideInInspector\r\n        this._meshRenderer.receiveShadow = 0; // false\r\n        this._meshRenderer.shadowCastingMode = 0; // false\r\n        // this._meshRenderer.lightProbeUsage = LightProbeUsage.BlendProbes;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes the mesh if necessary. */\r\n  private tryInitializeMesh(): void {\r\n    // Only create mesh if necessary.\r\n    // HACK 'Mesh.vertex > 0' makes sure mesh is recreated in case of runtime instantiation.\r\n    if (this.mesh.vertexCount > 0) {\r\n      return;\r\n    }\r\n\r\n    // Create mesh for attached drawable.\r\n    const drawable = this.getComponent(CubismDrawable);\r\n    if (drawable == null) {\r\n      console.error('CubismRenderer.tryInitializeMesh(): getComponent(CubismDrawable) failed.');\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      const primitive = drawable.generateMeshPrimitive();\r\n      if (primitive == null) {\r\n        console.error('CubismRenderer.tryInitializeMesh(): generateMeshPrimitive() failed.');\r\n        continue;\r\n      }\r\n\r\n      // Store mesh.\r\n      this.meshes[i] = primitive;\r\n    }\r\n  }\r\n\r\n  /** Initializes vertex colors. */\r\n  private tryInitializeVertexColor(): void {\r\n    const mesh = this.mesh;\r\n    this.vertexColors = new Array<math.Color>(mesh.vertexCount);\r\n    for (let i = 0; i < this.vertexColors.length; i++) {\r\n      const color = this._color;\r\n      this.vertexColors[i] = new math.Color(color.r, color.g, color.b, color.a * this.opacity);\r\n    }\r\n  }\r\n\r\n  /** Initializes the main texture if possible. */\r\n  private tryInitializeMainTexture(): void {\r\n    if (this.mainTexture == null) {\r\n      this.mainTexture = null;\r\n    }\r\n    this.applyMainTexture();\r\n  }\r\n\r\n  /** Initializes the mesh renderer. */\r\n  public tryInitialize(renderController: CubismRenderController): void {\r\n    this.drawable = this.getComponent(CubismDrawable);\r\n    this.renderController = renderController;\r\n\r\n    this.tryInitializeMeshRenderer();\r\n\r\n    this.tryInitializeMesh();\r\n    this.tryInitializeVertexColor();\r\n    this.tryInitializeMainTexture();\r\n    this.tryInitializeMultiplyColor();\r\n    this.tryInitializeScreenColor();\r\n\r\n    this.applySorting();\r\n  }\r\n\r\n  //#region Swap Info\r\n\r\n  /** Sets NewVertexPositions. */\r\n  private setNewVertexPositions(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({ newVertexPositions: true });\r\n  }\r\n\r\n  /** Sets NewVertexColors. */\r\n  private setNewVertexColors(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({ newVertexColors: true });\r\n  }\r\n\r\n  /** Sets DidBecomeVisible on visible. */\r\n  private becomeVisible(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({ didBecomeVisible: true });\r\n  }\r\n\r\n  /** Sets DidBecomeInvisible on invisible. */\r\n  private becomeInvisible(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({ didBecomeInvisible: true });\r\n  }\r\n\r\n  /** Sets SetNewRenderOrder. */\r\n  private setNewRenderOrder(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({ newRenderOrder: true });\r\n  }\r\n\r\n  /** Resets flags. */\r\n  private resetSwapInfoFlags(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({\r\n      newRenderOrder: false,\r\n      newVertexPositions: false,\r\n      didBecomeVisible: false,\r\n      didBecomeInvisible: false,\r\n    });\r\n  }\r\n\r\n  /** Reset visibility flags. */\r\n  private resetVisibilityFlags(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({\r\n      didBecomeVisible: false,\r\n      didBecomeInvisible: false,\r\n    });\r\n  }\r\n\r\n  /** Reset render order flag. */\r\n  private resetRenderOrderFlag(): void {\r\n    this.thisSwap = this.thisSwap.copyWith({\r\n      newRenderOrder: false,\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Cocos Creator Events Handling\r\n\r\n  /** Finalizes instance. */\r\n  protected onDestroy(): void {\r\n    // for (let i = 0; i < this.meshes.length; i++) {\r\n    //   DestroyImmediate(this.meshes[i]);\r\n    // }\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\n/** Allows tracking of {@link Mesh} data changed on a swap. (struct) */\r\nclass SwapInfo implements IStructLike<SwapInfo> {\r\n  /** Vertex positions were changed. */\r\n  public readonly newVertexPositions: boolean;\r\n  /** Vertex colors were changed. */\r\n  public readonly newVertexColors: boolean;\r\n  /** Visibility were changed to visible. */\r\n  public readonly didBecomeVisible: boolean;\r\n  /** Visibility were changed to invisible. */\r\n  public readonly didBecomeInvisible: boolean;\r\n  /** Render order were changed. */\r\n  public readonly newRenderOrder: boolean;\r\n\r\n  public constructor(\r\n    args: {\r\n      newVertexPositions?: boolean;\r\n      newVertexColors?: boolean;\r\n      didBecomeVisible?: boolean;\r\n      didBecomeInvisible?: boolean;\r\n      newRenderOrder?: boolean;\r\n    } = {}\r\n  ) {\r\n    this.newVertexPositions = args.newVertexPositions ?? false;\r\n    this.newVertexColors = args.newVertexColors ?? false;\r\n    this.didBecomeVisible = args.didBecomeVisible ?? false;\r\n    this.didBecomeInvisible = args.didBecomeInvisible ?? false;\r\n    this.newRenderOrder = args.newRenderOrder ?? false;\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      newVertexPositions?: boolean;\r\n      newVertexColors?: boolean;\r\n      didBecomeVisible?: boolean;\r\n      didBecomeInvisible?: boolean;\r\n      newRenderOrder?: boolean;\r\n    } = {}\r\n  ): SwapInfo {\r\n    return new SwapInfo({\r\n      newVertexPositions: args.newVertexPositions ?? this.newVertexPositions,\r\n      newVertexColors: args.newVertexColors ?? this.newVertexColors,\r\n      didBecomeVisible: args.didBecomeVisible ?? this.didBecomeVisible,\r\n      didBecomeInvisible: args.didBecomeInvisible ?? this.didBecomeInvisible,\r\n      newRenderOrder: args.newRenderOrder ?? this.newRenderOrder,\r\n    });\r\n  }\r\n\r\n  public equals(other: SwapInfo): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.newVertexPositions == other.newVertexPositions &&\r\n          this.newVertexColors == other.newVertexColors &&\r\n          this.didBecomeVisible == other.didBecomeVisible &&\r\n          this.didBecomeInvisible == other.didBecomeInvisible &&\r\n          this.newRenderOrder == other.newRenderOrder;\r\n  }\r\n\r\n  public strictEquals(other: SwapInfo): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\nnamespace SwapInfo {\r\n  export const DEFAULT = new SwapInfo();\r\n}\r\n"]}