{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskRenderer.ts"],"names":["CubismMaskRenderer","math","MeshRenderer","Node","renderer","CubismDrawable","CubismShaderVariables","CubismMaskCommandBuffer","CubismMaskCommandBufferMetadata","CubismResources","userLayer19","mainRenderer","_mainRenderer","value","maskMaterial","_maskMaterial","maskCullingMaterial","_maskCullingMaterial","isCulling","_isCulling","meshBounds","mesh","calculateBounds","constructor","_maskTile","Vec4","ZERO","clone","_maskTransform","getMaskMaterial","getMaskCullingMaterial","setMainRenderer","node","getComponent","isDoubleSided","setMaskTile","toVec4","setMaskTransform","addToCommandBuffer","buffer","console","error","mainTexture","meshRenderer","material","assert","sym","metadataPropertySymbol","findRenderer","renderers","i","length","meta","Reflect","get","cubismRenderer","undefined","instance","warn","maskRenderers","getComponentsInChildren","name","addChild","layer","addComponent","setMaterial","set","maskRenderer","getMaterial","MaterialInstance","parent","setProperty","maskTile","maskTransform","setMaterialInstance","createMesh","enabled"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Material, math, MeshRenderer, Node, renderer } from 'cc';\r\nimport CubismDrawable from '../../Core/CubismDrawable';\r\nimport CubismShaderVariables from '../CubismShaderVariables';\r\nimport CubismMaskCommandBuffer, {\r\n  CubismMaskCommandBufferMetadata,\r\n} from './CubismMaskCommandBuffer';\r\nimport type CubismRenderer from '../CubismRenderer';\r\nimport type CubismMaskTile from './CubismMaskTile';\r\nimport type CubismMaskTransform from './CubismMaskTransform';\r\nimport { CubismBounds as Bounds } from '../../Core/CubismGeometry';\r\nimport CubismResources from '../../Framework/CubismResources';\r\n\r\nconst userLayer19 = 0x00080000; // 0x00080000\r\n\r\n/**\r\n * Renders out a single Cubism mask.\r\n *\r\n * Note that - depending on the model - multiple CubismMaskRenderer might be assigned to a single CubismDrawable.\r\n */\r\nexport default class CubismMaskRenderer {\r\n  /** Mask properties. */\r\n  private _maskTile: Readonly<math.Vec4> = math.Vec4.ZERO.clone();\r\n\r\n  /** Mask properties. */\r\n  private _maskTransform: Readonly<math.Vec4> = math.Vec4.ZERO.clone();\r\n\r\n  private _mainRenderer: CubismRenderer | null = null;\r\n  /** Main renderer. */\r\n  private get mainRenderer() {\r\n    return this._mainRenderer;\r\n  }\r\n  private set mainRenderer(value) {\r\n    this._mainRenderer = value;\r\n  }\r\n\r\n  private _maskMaterial: Material | null = null;\r\n  /** Mask material. */\r\n  private get maskMaterial() {\r\n    return this._maskMaterial;\r\n  }\r\n  private set maskMaterial(value) {\r\n    this._maskMaterial = value;\r\n  }\r\n\r\n  private _maskCullingMaterial: Material | null = null;\r\n  /** Mask culling material. */\r\n  private get maskCullingMaterial() {\r\n    return this._maskCullingMaterial;\r\n  }\r\n  private set maskCullingMaterial(value) {\r\n    this._maskCullingMaterial = value;\r\n  }\r\n\r\n  private _isCulling: boolean = false;\r\n  /** Culling setting. */\r\n  private get isCulling() {\r\n    return this._isCulling;\r\n  }\r\n  private set isCulling(value) {\r\n    this._isCulling = value;\r\n  }\r\n\r\n  /** Bounds of {@link CubismRenderer.mesh}. */\r\n  public get meshBounds(): Bounds {\r\n    const mesh = this._mainRenderer!.mesh;\r\n    return mesh.calculateBounds();\r\n  }\r\n\r\n  // #region Ctors\r\n\r\n  /** Initializes fields. */\r\n  public constructor() {\r\n    this.maskMaterial = CubismResources.getMaskMaterial();\r\n    this.maskCullingMaterial = CubismResources.getMaskCullingMaterial();\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Interface For CubismMaskMaskedJunction\r\n\r\n  /**\r\n   * Sets the CubismRenderer to reference.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMainRenderer(value: CubismRenderer): CubismMaskRenderer {\r\n    this.mainRenderer = value;\r\n\r\n    this.isCulling = !this.mainRenderer.node.getComponent(CubismDrawable)?.isDoubleSided;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets CubismMaskTile.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMaskTile(value: CubismMaskTile): CubismMaskRenderer {\r\n    this._maskTile = value.toVec4();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets CubismMaskTransform.\r\n   * @param value Value to set.\r\n   * @returns Instance.\r\n   */\r\n  public setMaskTransform(value: CubismMaskTransform): CubismMaskRenderer {\r\n    this._maskTransform = value.toVec4();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enqueues\r\n   * @param buffer\r\n   * @returns Buffer to enqueue in.\r\n   */\r\n  public addToCommandBuffer(buffer: CubismMaskCommandBuffer): void {\r\n    // Lazily fetch drawable texture and mesh.\r\n    const mainRenderer = this.mainRenderer;\r\n    if (mainRenderer == null) {\r\n      console.error('CubismMaskRenderer.addToCommandBuffer(): mainRenderer is null.');\r\n      return;\r\n    }\r\n    let mainTexture = mainRenderer.mainTexture;\r\n    let mesh = mainRenderer.mesh;\r\n    if (mainTexture == null) {\r\n      console.error('CubismMaskRenderer.addToCommandBuffer(): mainRenderer.mainTexture is null.');\r\n      return;\r\n    }\r\n    if (mesh == null) {\r\n      console.error('CubismMaskRenderer.addToCommandBuffer(): mainRenderer.mesh is null.');\r\n      return;\r\n    }\r\n\r\n    if (mainRenderer.meshRenderer == null) {\r\n      console.error('CubismMaskRenderer.addToCommandBuffer(): mainRenderer.meshRenderer is null.');\r\n      return;\r\n    }\r\n    if (mainRenderer.meshRenderer.material == null) {\r\n      console.error(\r\n        'CubismMaskRenderer.addToCommandBuffer(): mainRenderer.meshRenderer.material is null.'\r\n      );\r\n      return;\r\n    }\r\n    console.assert(this.maskMaterial);\r\n\r\n    const sym = CubismMaskCommandBuffer.metadataPropertySymbol;\r\n    function findRenderer(renderers: MeshRenderer[]) {\r\n      for (let i = 0; i < renderers.length; i++) {\r\n        const meta: CubismMaskCommandBufferMetadata | undefined = Reflect.get(renderers[i], sym);\r\n        if (meta && meta.cubismRenderer == mainRenderer) {\r\n          return meta;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n    if (!CubismMaskCommandBuffer.instance) {\r\n      console.warn(`CubismMaskCommandBuffer.instance is null.`);\r\n      return;\r\n    }\r\n    const maskRenderers = CubismMaskCommandBuffer.instance.getComponentsInChildren(MeshRenderer);\r\n    let meta: CubismMaskCommandBufferMetadata | undefined = findRenderer(maskRenderers);\r\n    if (!meta) {\r\n      meta = new CubismMaskCommandBufferMetadata();\r\n      const isCulling = !mainRenderer.node.getComponent(CubismDrawable)?.isDoubleSided;\r\n      const node = new Node(mainRenderer.node.name);\r\n      buffer.node.addChild(node);\r\n      node.layer = userLayer19;\r\n      meta.cubismRenderer = mainRenderer;\r\n      meta.meshRenderer = node.addComponent(MeshRenderer);\r\n      const maskMaterial = isCulling ? this.maskMaterial! : this.maskMaterial!;\r\n      meta.meshRenderer.setMaterial(maskMaterial, 0);\r\n      CubismMaskCommandBuffer.buffer.set(mainRenderer, meta.meshRenderer);\r\n    }\r\n    const maskRenderer = meta.meshRenderer!;\r\n    const maskMaterial = maskRenderer.getMaterial(0);\r\n    console.assert(maskMaterial);\r\n\r\n    const material = new renderer.MaterialInstance({ parent: maskMaterial! });\r\n    material.setProperty(CubismShaderVariables.mainTexture, mainTexture);\r\n    material.setProperty(CubismShaderVariables.maskTile, this._maskTile);\r\n    material.setProperty(CubismShaderVariables.maskTransform, this._maskTransform);\r\n    maskRenderer.setMaterialInstance(material, 0);\r\n    console.assert(maskRenderer);\r\n    maskRenderer.mesh = mesh.createMesh();\r\n    meta.enabled = true;\r\n    Reflect.set(maskRenderer, sym, meta);\r\n    maskRenderer.enabled = true;\r\n  }\r\n  // #endregion;\r\n}\r\n"]}