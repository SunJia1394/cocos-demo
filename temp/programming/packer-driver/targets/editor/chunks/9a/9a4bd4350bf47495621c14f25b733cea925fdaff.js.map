{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Raycasting/CubismRaycastHit.ts"],"names":["CubismRaycastHit","Vector3","CubismVector3","constructor","args","drawable","distance","localPosition","worldPosition","ZERO","copyWith","undefined","equals","other","strictEquals"],"mappings":";;;0BAYqBA,gB;;;;;;;;AAJKC,MAAAA,O,gBAAjBC,a;;;;AART;AACA;AACA;AACA;AACA;AACA;;;AAMA;yBACqBF,gB,GAAN,MAAMA,gBAAN,CAAgE;AAatEG,QAAAA,WAAW,CAChBC,IAKC,GAAG,EANY,EAOhB;AAAA;;AAnBF;AAmBE,eAlBcC,QAkBd;;AAhBF;AAgBE,eAfcC,QAed;;AAbF;AAaE,eAZcC,aAYd;;AAVF;AAUE,eATcC,aASd;AACA,eAAKH,QAAL,qBAAgBD,IAAI,CAACC,QAArB,6BAAiC,IAAjC;AACA,eAAKC,QAAL,qBAAgBF,IAAI,CAACE,QAArB,6BAAiC,CAAjC;AACA,eAAKC,aAAL,0BAAqBH,IAAI,CAACG,aAA1B,kCAA2CN,OAAO,CAACQ,IAAnD;AACA,eAAKD,aAAL,0BAAqBJ,IAAI,CAACI,aAA1B,kCAA2CP,OAAO,CAACQ,IAAnD;AACD;;AAEMC,QAAAA,QAAQ,CACbN,IAKC,GAAG,EANS,EAOK;AAAA;;AAClB,iBAAO,IAAIJ,gBAAJ,CAAqB;AAC1BK,YAAAA,QAAQ,EAAED,IAAI,CAACC,QAAL,KAAkBM,SAAlB,GAA8BP,IAAI,CAACC,QAAnC,GAA8C,KAAKA,QADnC;AAE1BC,YAAAA,QAAQ,qBAAEF,IAAI,CAACE,QAAP,8BAAmB,KAAKA,QAFN;AAG1BC,YAAAA,aAAa,0BAAEH,IAAI,CAACG,aAAP,mCAAwB,KAAKA,aAHhB;AAI1BC,YAAAA,aAAa,0BAAEJ,IAAI,CAACI,aAAP,mCAAwB,KAAKA;AAJhB,WAArB,CAAP;AAMD;;AACMI,QAAAA,MAAM,CAACC,KAAD,EAAmC;AAC9C,iBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKR,QAAL,KAAkBQ,KAAK,CAACR,QAAxB,IACE,KAAKC,QAAL,IAAiBO,KAAK,CAACP,QADzB,IAEE,KAAKC,aAAL,CAAmBK,MAAnB,CAA0BC,KAAK,CAACN,aAAhC,CAFF,IAGE,KAAKC,aAAL,CAAmBI,MAAnB,CAA0BC,KAAK,CAACL,aAAhC,CALN;AAMD;;AACMM,QAAAA,YAAY,CAACD,KAAD,EAAmC;AACpD,iBAAO,SAASA,KAAhB;AACD;;AApD4E,O","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport CubismDrawable from '../../Core/CubismDrawable';\r\nimport { CubismVector3 as Vector3 } from '../../Core/CubismVector';\r\nimport type IStructLike from '../../IStructLike';\r\n\r\n/** Contains raycast information. */\r\nexport default class CubismRaycastHit implements IStructLike<CubismRaycastHit> {\r\n  /** The hit {@link CubismDrawable} */\r\n  public readonly drawable: CubismDrawable | null;\r\n\r\n  /** The distance the ray traveled until it hit the {@link CubismDrawable}. */\r\n  public readonly distance: number;\r\n\r\n  /** The hit position local to the {@link CubismDrawable}. */\r\n  public readonly localPosition: Vector3;\r\n\r\n  /** The hit position in world coordinates. */\r\n  public readonly worldPosition: Vector3;\r\n\r\n  public constructor(\r\n    args: {\r\n      drawable?: CubismDrawable | null;\r\n      distance?: number;\r\n      localPosition?: Vector3;\r\n      worldPosition?: Vector3;\r\n    } = {}\r\n  ) {\r\n    this.drawable = args.drawable ?? null;\r\n    this.distance = args.distance ?? 0;\r\n    this.localPosition = args.localPosition ?? Vector3.ZERO;\r\n    this.worldPosition = args.worldPosition ?? Vector3.ZERO;\r\n  }\r\n\r\n  public copyWith(\r\n    args: {\r\n      drawable?: CubismDrawable | null;\r\n      distance?: number;\r\n      localPosition?: Vector3;\r\n      worldPosition?: Vector3;\r\n    } = {}\r\n  ): CubismRaycastHit {\r\n    return new CubismRaycastHit({\r\n      drawable: args.drawable !== undefined ? args.drawable : this.drawable,\r\n      distance: args.distance ?? this.distance,\r\n      localPosition: args.localPosition ?? this.localPosition,\r\n      worldPosition: args.worldPosition ?? this.worldPosition,\r\n    });\r\n  }\r\n  public equals(other: CubismRaycastHit): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.drawable === other.drawable &&\r\n          this.distance == other.distance &&\r\n          this.localPosition.equals(other.localPosition) &&\r\n          this.worldPosition.equals(other.worldPosition);\r\n  }\r\n  public strictEquals(other: CubismRaycastHit): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n"]}