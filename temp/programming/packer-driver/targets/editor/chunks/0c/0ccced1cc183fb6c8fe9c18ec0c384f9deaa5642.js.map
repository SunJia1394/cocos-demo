{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/ComponentExtensionMethods.ts"],"names":["getComponentsMany","self","classConstructor","components","Array","i","length","range","getComponents","concat","addComponentEach","node","addComponent","console","assert","ComponentExtensionMethods"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAKS,iBAASA,iBAAT,CACLC,IADK,EAELC,gBAFK,EAGL;AACA,cAAIC,UAAoB,GAAG,IAAIC,KAAJ,EAA3B;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,kBAAME,KAAK,GAAGN,IAAI,CAACI,CAAD,CAAJ,CAAQG,aAAR,CAAsBN,gBAAtB,CAAd,CADoC,CAGpC;;AACA,gBAAIK,KAAK,CAACD,MAAN,IAAgB,CAApB,EAAuB;AACrB;AACD;;AAEDH,YAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkBF,KAAlB,CAAb;AACD;;AAED,iBAAOJ,UAAP;AACD;;;;AAQM,iBAASO,gBAAT,CACLT,IADK,EAELC,gBAFK,EAGL;AACA,gBAAMC,UAAU,GAAG,IAAIC,KAAJ,CAAaH,IAAI,CAACK,MAAlB,CAAnB;;AAEA,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpCF,YAAAA,UAAU,CAACE,CAAD,CAAV,GAAgBJ,IAAI,CAACI,CAAD,CAAJ,CAAQM,IAAR,CAAaC,YAAb,CAA0BV,gBAA1B,CAAhB;AACAW,YAAAA,OAAO,CAACC,MAAR,CAAeX,UAAU,CAACE,CAAD,CAAzB;AACD;;AAED,iBAAOF,UAAP;AACD;;;SAvCOY,yB,KAAAA,yB;;yBAyCKA,yB","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport type { Component, __private } from 'cc';\r\n\r\nnamespace ComponentExtensionMethods {\r\n  export function getComponentsMany<T extends Component>(\r\n    self: Component[],\r\n    classConstructor: __private._types_globals__Constructor<T>\r\n  ) {\r\n    let components: Array<T> = new Array();\r\n\r\n    for (let i = 0; i < self.length; i++) {\r\n      const range = self[i].getComponents(classConstructor);\r\n\r\n      // Skip empty ranges.\r\n      if (range.length == 0) {\r\n        continue;\r\n      }\r\n\r\n      components = components.concat(range);\r\n    }\r\n\r\n    return components;\r\n  }\r\n\r\n  /**\r\n   * Adds a component to multiple objects.\r\n   * @param self Array of objects.\r\n   * @param classConstructor\r\n   * @returns Added components.\r\n   */\r\n  export function addComponentEach<T extends Component>(\r\n    self: Component[],\r\n    classConstructor: __private._types_globals__Constructor<T>\r\n  ) {\r\n    const components = new Array<T>(self.length);\r\n\r\n    for (let i = 0; i < self.length; ++i) {\r\n      components[i] = self[i].node.addComponent(classConstructor);\r\n      console.assert(components[i]);\r\n    }\r\n\r\n    return components;\r\n  }\r\n}\r\nexport default ComponentExtensionMethods;\r\n"]}