{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/CubismPhysics3Json.ts"],"names":["CubismPhysics3Json","js","math","CubismPhysicsOutput","CubismPhysicsParticle","CubismPhysicsSourceComponent","CubismPhysicsInput","CubismPhysicsNormalization","CubismPhysicsNormalizationTuplet","CubismPhysicsRig","CubismPhysicsSubRig","JsonParseUtils","ArrayExtensions","asBoolean","asNumber","asString","constructor","version","meta","SerializableMeta","physicsSettings","loadFrom","physics3Json","json","parse","loadFromJson","loadFromJsonAsset","physics3JsonAsset","SerializablePhysicsSettings","result","isNumber","Version","Meta","instantiateFromJson","Array","isArray","PhysicsSettings","arrayedInstantiateFromJson","toRig","instance","gravity","Vec2","effectiveForces","x","y","wind","length","physicsSettingCount","console","warn","trace","fps","subRigs","i","subRig","physicsSetting","input","readInput","output","readOutput","vertices","particles","readParticles","normalization","readNormalization","source","dataArray","sourceId","id","angleScale","scaleOfTranslation","ZERO","weight","type","sourceComponent","X","purse","isInverted","reflect","destinationId","destination","particleIndex","vertexIndex","translationScale","scale","valueBelowMinimum","valueExceededMaximum","initialPosition","position","mobility","delay","acceleration","radius","lastPosition","lastGravity","force","velocity","maximum","minimum","defaultValue","default","angle","SerializableVector2","args","clone","copyWith","undefined","Y","equals","other","strictEquals","SerializableNormalizationValue","Minimum","Default","Maximum","SerializableParameter","target","Target","Id","SerializableInput","DEFAULT","isEquals","a","b","Source","Weight","Type","Reflect","SerializableOutput","Destination","VertexIndex","Scale","SerializableVertex","Position","Mobility","Delay","Acceleration","Radius","SerializableNormalization","Angle","asArray","Input","Output","Vertices","Normalization","totalInputCount","totalOutputCount","totalVertexCount","SerializableEffectiveForces","PhysicsSettingCount","TotalInputCount","TotalOutputCount","vertexCount","VertexCount","EffectiveForces","Fps","Gravity","Wind"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { js, JsonAsset, math } from 'cc';\r\nimport CubismPhysicsOutput from '../Physics/CubismPhysicsOutput';\r\nimport CubismPhysicsParticle from '../Physics/CubismPhysicsParticle';\r\nimport CubismPhysicsSourceComponent from '../Physics/CubismPhysicsSourceComponent';\r\nimport CubismPhysicsInput from '../Physics/CubismPhysicsInput';\r\nimport CubismPhysicsNormalization, {\r\n  CubismPhysicsNormalizationTuplet,\r\n} from '../Physics/CubismPhysicsNormalization';\r\nimport CubismPhysicsRig from '../Physics/CubismPhysicsRig';\r\nimport CubismPhysicsSubRig from '../Physics/CubismPhysicsSubRig';\r\nimport JsonParseUtils from './JsonParseUtils';\r\nimport type IStructLike from '../../IStructLike';\r\nimport { ArrayExtensions } from '../../Utils';\r\nconst { asBoolean, asNumber, asString } = JsonParseUtils;\r\n\r\n/** **Sealed class.** */\r\nclass CubismPhysics3Json {\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Loads a physics3.json asset.\r\n   * @param physics3Json physics3.json to deserialize.\r\n   * @returns Deserialized physics3.json on success; null otherwise.\r\n   */\r\n  public static loadFrom(physics3Json: string): CubismPhysics3Json | null {\r\n    const json = JsonParseUtils.parse(physics3Json);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n    return CubismPhysics3Json.loadFromJson(json);\r\n  }\r\n\r\n  /**\r\n   * Loads a physics3.json asset.\r\n   * @param physics3JsonAsset motion3.json to deserialize.\r\n   * @returns Deserialized physics3.json on success; null otherwise.\r\n   */\r\n  public static loadFromJsonAsset(physics3JsonAsset: JsonAsset): CubismPhysics3Json | null {\r\n    if (physics3JsonAsset.json == null) {\r\n      return null;\r\n    }\r\n    return CubismPhysics3Json.loadFromJson(physics3JsonAsset.json);\r\n  }\r\n\r\n  public static loadFromJson(json: any): CubismPhysics3Json | null {\r\n    const { SerializableMeta, SerializablePhysicsSettings } = CubismPhysics3Json;\r\n    let result = new CubismPhysics3Json();\r\n    if (!js.isNumber(json.Version)) {\r\n      return null;\r\n    }\r\n    result.version = json.Version;\r\n    if (json.Meta != null) {\r\n      const meta = SerializableMeta.instantiateFromJson(json.Meta);\r\n      if (meta != null) {\r\n        result.meta = meta;\r\n      }\r\n    }\r\n    if (Array.isArray(json.PhysicsSettings)) {\r\n      const physicsSettings = JsonParseUtils.arrayedInstantiateFromJson(\r\n        json.PhysicsSettings as Array<any>,\r\n        SerializablePhysicsSettings.instantiateFromJson\r\n      );\r\n      if (physicsSettings != null) {\r\n        result.physicsSettings = physicsSettings;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public toRig(): CubismPhysicsRig {\r\n    let instance = new CubismPhysicsRig();\r\n    instance.gravity = new math.Vec2(\r\n      this.meta.effectiveForces.gravity.x,\r\n      this.meta.effectiveForces.gravity.y\r\n    );\r\n    instance.wind = new math.Vec2(\r\n      this.meta.effectiveForces.wind.x,\r\n      this.meta.effectiveForces.wind.y\r\n    );\r\n\r\n    if (this.physicsSettings != null) {\r\n      if (this.physicsSettings.length != this.meta.physicsSettingCount) {\r\n        console.warn('PhysicsSettings.Length and Meta.PhysicsSettingCount are unequaled.');\r\n        console.warn(\r\n          'physicsSettings.length: %d, this.meta.physicsSettingCount: %d',\r\n          this.physicsSettings.length,\r\n          this.meta.physicsSettingCount\r\n        );\r\n        console.warn(this.physicsSettings);\r\n      }\r\n      console.trace();\r\n      instance.fps = this.meta.fps;\r\n\r\n      instance.subRigs = new Array<CubismPhysicsSubRig | null>(this.physicsSettings.length);\r\n\r\n      for (var i = 0; i < instance.subRigs.length; i++) {\r\n        const subRig = new CubismPhysicsSubRig();\r\n        const physicsSetting = this.physicsSettings[i];\r\n\r\n        if (physicsSetting.input != null) {\r\n          subRig.input = this.readInput(physicsSetting.input);\r\n        }\r\n        if (physicsSetting.output != null) {\r\n          subRig.output = this.readOutput(physicsSetting.output);\r\n        }\r\n        if (physicsSetting.vertices != null) {\r\n          subRig.particles = this.readParticles(physicsSetting.vertices);\r\n        }\r\n        if (physicsSetting.normalization != null) {\r\n          subRig.normalization = this.readNormalization(physicsSetting.normalization);\r\n        }\r\n\r\n        instance.subRigs[i] = subRig;\r\n      }\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  private readInput(source: CubismPhysics3Json.SerializableInput[]): CubismPhysicsInput[] {\r\n    let dataArray = new Array<CubismPhysicsInput>(source.length);\r\n    for (let i = 0; i < dataArray.length; i++) {\r\n      dataArray[i] = new CubismPhysicsInput();\r\n      dataArray[i].sourceId = source[i].source.id;\r\n      dataArray[i].angleScale = 0.0;\r\n      dataArray[i].scaleOfTranslation = math.Vec2.ZERO;\r\n      dataArray[i].weight = source[i].weight;\r\n      if (source[i].type == null) {\r\n        console.warn('source[' + i + '].type is null.');\r\n        dataArray[i].sourceComponent = CubismPhysicsSourceComponent.X;\r\n      } else {\r\n        dataArray[i].sourceComponent =\r\n          CubismPhysicsSourceComponent.purse(source[i].type!) ?? CubismPhysicsSourceComponent.X;\r\n      }\r\n      dataArray[i].isInverted = source[i].reflect;\r\n    }\r\n    return dataArray;\r\n  }\r\n\r\n  private readOutput(source: CubismPhysics3Json.SerializableOutput[]): CubismPhysicsOutput[] {\r\n    let dataArray = new Array<CubismPhysicsOutput>(source.length);\r\n    for (var i = 0; i < dataArray.length; i++) {\r\n      dataArray[i] = new CubismPhysicsOutput();\r\n      dataArray[i].destinationId = source[i].destination.id;\r\n      dataArray[i].particleIndex = source[i].vertexIndex;\r\n      dataArray[i].translationScale = math.Vec2.ZERO;\r\n      dataArray[i].angleScale = source[i].scale;\r\n      dataArray[i].weight = source[i].weight;\r\n      if (source[i].type == null) {\r\n        console.warn('source[' + i + '].type is null.');\r\n        dataArray[i].sourceComponent = CubismPhysicsSourceComponent.X;\r\n      } else {\r\n        dataArray[i].sourceComponent =\r\n          CubismPhysicsSourceComponent.purse(source[i].type!) ?? CubismPhysicsSourceComponent.X;\r\n      }\r\n      dataArray[i].isInverted = source[i].reflect;\r\n      dataArray[i].valueBelowMinimum = 0.0;\r\n      dataArray[i].valueExceededMaximum = 0.0;\r\n    }\r\n    return dataArray;\r\n  }\r\n\r\n  private readParticles(source: CubismPhysics3Json.SerializableVertex[]): CubismPhysicsParticle[] {\r\n    let dataArray = new Array<CubismPhysicsParticle>(source.length);\r\n    for (var i = 0; i < dataArray.length; i++) {\r\n      dataArray[i] = new CubismPhysicsParticle({\r\n        initialPosition: new math.Vec2(source[i].position.x, source[i].position.y),\r\n        mobility: source[i].mobility,\r\n        delay: source[i].delay,\r\n        acceleration: source[i].acceleration,\r\n        radius: source[i].radius,\r\n        position: math.Vec2.ZERO,\r\n        lastPosition: math.Vec2.ZERO,\r\n        lastGravity: new math.Vec2(0, 1), // DOWN\r\n        force: math.Vec2.ZERO,\r\n        velocity: math.Vec2.ZERO,\r\n      });\r\n    }\r\n    return dataArray;\r\n  }\r\n\r\n  private readNormalization(\r\n    source: CubismPhysics3Json.SerializableNormalization\r\n  ): CubismPhysicsNormalization {\r\n    return new CubismPhysicsNormalization({\r\n      position: new CubismPhysicsNormalizationTuplet({\r\n        maximum: source.position.maximum,\r\n        minimum: source.position.minimum,\r\n        defaultValue: source.position.default,\r\n      }),\r\n      angle: new CubismPhysicsNormalizationTuplet({\r\n        maximum: source.angle.maximum,\r\n        minimum: source.angle.minimum,\r\n        defaultValue: source.angle.default,\r\n      }),\r\n    });\r\n  }\r\n\r\n  //#region Json Data\r\n\r\n  /** Json file format version. */\r\n  public version: number = 0;\r\n\r\n  /** Additional data describing physics. */\r\n  public meta = new CubismPhysics3Json.SerializableMeta();\r\n\r\n  /** TODO Document. */\r\n  public physicsSettings: CubismPhysics3Json.SerializablePhysicsSettings[] | null = null;\r\n\r\n  //#endregion\r\n}\r\n\r\n//#region Json Helpers\r\n\r\nnamespace CubismPhysics3Json {\r\n  /** 2-component vector. (struct) */\r\n  export class SerializableVector2 implements IStructLike<SerializableVector2> {\r\n    public readonly x: number;\r\n    public readonly y: number;\r\n\r\n    public constructor(args: { x?: number; y?: number } = {}) {\r\n      this.x = args.x ?? 0;\r\n      this.y = args.y ?? 0;\r\n    }\r\n\r\n    public clone(): SerializableVector2 {\r\n      return new SerializableVector2({ x: this.x, y: this.y });\r\n    }\r\n\r\n    public copyWith(x?: number, y?: number): SerializableVector2 {\r\n      return new SerializableVector2({ x: x ?? this.x, y: y ?? this.y });\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - X\r\n     * - Y\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableVector2 | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const x = asNumber(json.X);\r\n      const y = asNumber(json.Y);\r\n      if (x === undefined || y === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableVector2({ x: x, y: y });\r\n    }\r\n\r\n    public equals(other: SerializableVector2): boolean {\r\n      return this === other ? true : this.x == other.x && this.y == other.y;\r\n    }\r\n\r\n    public strictEquals(other: SerializableVector2): boolean {\r\n      return this === other;\r\n    }\r\n  }\r\n\r\n  /** Normalized values. (struct) */\r\n  export class SerializableNormalizationValue\r\n    implements IStructLike<SerializableNormalizationValue>\r\n  {\r\n    /** Minimum of normalization. */\r\n    public readonly minimum: number;\r\n    /** Center of normalization range. */\r\n    public readonly default: number;\r\n    /** Maximum of normalization. */\r\n    public readonly maximum: number;\r\n\r\n    public constructor(args: { minimum?: number; defaultValue?: number; maximum?: number } = {}) {\r\n      this.minimum = args.minimum ?? 0;\r\n      this.default = args.defaultValue ?? 0;\r\n      this.maximum = args.maximum ?? 0;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        minimum?: number;\r\n        defaultValue?: number;\r\n        maximum?: number;\r\n      } = {}\r\n    ): SerializableNormalizationValue {\r\n      return new SerializableNormalizationValue({\r\n        minimum: args.minimum ?? this.minimum,\r\n        defaultValue: args.defaultValue ?? this.default,\r\n        maximum: args.maximum ?? this.maximum,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializableNormalizationValue): boolean {\r\n      return this === other\r\n        ? true\r\n        : this.minimum == other.minimum &&\r\n            this.default == other.default &&\r\n            this.maximum == other.maximum;\r\n    }\r\n\r\n    public strictEquals(other: SerializableNormalizationValue): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Minimum\r\n     * - Default\r\n     * - Maximum\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableNormalizationValue | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const minimum = asNumber(json.Minimum);\r\n      const defaultValue = asNumber(json.Default);\r\n      const maximum = asNumber(json.Maximum);\r\n      if (minimum === undefined || defaultValue === undefined || maximum === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableNormalizationValue({\r\n        minimum: minimum,\r\n        defaultValue: defaultValue,\r\n        maximum: maximum,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Target parameter of model. (struct) */\r\n  export class SerializableParameter implements IStructLike<SerializableParameter> {\r\n    /** Target type. */\r\n    public readonly target: string;\r\n    /** Parameter ID. */\r\n    public readonly id: string;\r\n\r\n    public constructor(args: { target?: string; id?: string } = {}) {\r\n      this.target = args.target ?? '';\r\n      this.id = args.id ?? '';\r\n    }\r\n\r\n    public equals(other: SerializableParameter): boolean {\r\n      return this === other ? true : this.target == other.target && this.id == other.id;\r\n    }\r\n\r\n    public strictEquals(other: SerializableParameter): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public copyWith(args: { target?: string; id?: string } = {}): SerializableParameter {\r\n      return new SerializableParameter({\r\n        target: args.target !== undefined ? args.target : this.target,\r\n        id: args.id !== undefined ? args.id : this.id,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Target\r\n     * - Id\r\n     * - Maximum\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any) {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const target = asString(json.Target);\r\n      const id = asString(json.Id);\r\n      if (target === undefined || id === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableParameter({\r\n        target: target,\r\n        id: id,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** TODO Document. (struct) */\r\n  export class SerializableInput implements IStructLike<SerializableInput> {\r\n    /** Target parameter. */\r\n    public readonly source: SerializableParameter;\r\n    /** Influence ratio of each kind. */\r\n    public readonly weight: number;\r\n    /** Type of source. */\r\n    public readonly type: string;\r\n    /** TODO Document. */\r\n    public readonly reflect: boolean;\r\n\r\n    public constructor(\r\n      args: {\r\n        source?: SerializableParameter;\r\n        weight?: number;\r\n        type?: string;\r\n        reflect?: boolean;\r\n      } = {}\r\n    ) {\r\n      this.source = args.source != null ? args.source : SerializableParameter.DEFAULT;\r\n      this.weight = args.weight ?? 0;\r\n      this.type = args.type ?? '';\r\n      this.reflect = args.reflect ?? false;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        source?: SerializableParameter;\r\n        weight?: number;\r\n        type?: string;\r\n        reflect?: boolean;\r\n      } = {}\r\n    ): SerializableInput {\r\n      return new SerializableInput({\r\n        source: args.source ?? this.source,\r\n        weight: args.weight ?? this.weight,\r\n        type: args.type ?? this.type,\r\n        reflect: args.reflect ?? this.reflect,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializableInput): boolean {\r\n      return (\r\n        this === other ||\r\n        (this.source.equals(other.source) &&\r\n          this.weight == other.weight &&\r\n          this.type == other.type &&\r\n          this.reflect == other.reflect)\r\n      );\r\n    }\r\n\r\n    public strictEquals(other: SerializableInput): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public static isEquals(a: SerializableInput, b: SerializableInput) {\r\n      return a.equals(b);\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Source\r\n     * - Weight\r\n     * - Type\r\n     * - Reflect\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableInput | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const source = SerializableParameter.instantiateFromJson(json.Source);\r\n      const weight = asNumber(json.Weight);\r\n      const type = asString(json.Type);\r\n      const reflect = asBoolean(json.Reflect);\r\n      if (\r\n        source === undefined ||\r\n        weight === undefined ||\r\n        type === undefined ||\r\n        reflect === undefined\r\n      ) {\r\n        return undefined;\r\n      }\r\n      return new SerializableInput({\r\n        source: source,\r\n        weight: weight,\r\n        type: type,\r\n        reflect: reflect,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** TODO Document. (struct) */\r\n  export class SerializableOutput implements IStructLike<SerializableOutput> {\r\n    /** Target parameter. */\r\n    public readonly destination: SerializableParameter;\r\n    /** Index of referenced vertex. */\r\n    public readonly vertexIndex: number;\r\n    /** Scale. */\r\n    public readonly scale: number;\r\n    /** Influence ratio of each kind. */\r\n    public readonly weight: number;\r\n    /** Type of destination. */\r\n    public readonly type: string;\r\n    /** TODO Document. */\r\n    public readonly reflect: boolean;\r\n\r\n    public constructor(\r\n      args: {\r\n        destination?: SerializableParameter;\r\n        vertexIndex?: number;\r\n        scale?: number;\r\n        weight?: number;\r\n        type?: string;\r\n        reflect?: boolean;\r\n      } = {}\r\n    ) {\r\n      this.destination = args.destination ?? SerializableParameter.DEFAULT;\r\n      this.vertexIndex = args.vertexIndex ?? 0;\r\n      this.scale = args.scale ?? 0;\r\n      this.weight = args.weight ?? 0;\r\n      this.type = args.type ?? '';\r\n      this.reflect = args.reflect ?? false;\r\n    }\r\n\r\n    public equals(other: SerializableOutput): boolean {\r\n      return (\r\n        this === other ||\r\n        (this.destination.equals(other.destination) &&\r\n          this.vertexIndex == other.vertexIndex &&\r\n          this.scale == other.scale &&\r\n          this.weight == other.weight &&\r\n          this.type == other.type &&\r\n          this.reflect == other.reflect)\r\n      );\r\n    }\r\n\r\n    public strictEquals(other: SerializableOutput): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        destination?: SerializableParameter;\r\n        vertexIndex?: number;\r\n        scale?: number;\r\n        weight?: number;\r\n        type?: string;\r\n        reflect?: boolean;\r\n      } = {}\r\n    ): SerializableOutput {\r\n      return new SerializableOutput({\r\n        destination: args.destination ?? this.destination,\r\n        vertexIndex: args.vertexIndex ?? this.vertexIndex,\r\n        scale: args.scale ?? this.scale,\r\n        weight: args.weight ?? this.weight,\r\n        type: args.type ?? this.type,\r\n        reflect: args.reflect ?? this.reflect,\r\n      });\r\n    }\r\n\r\n    public static isEquals(a: SerializableOutput, b: SerializableOutput) {\r\n      return a.equals(b);\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Destination\r\n     * - VertexIndex\r\n     * - Scale\r\n     * - Weight\r\n     * - Type\r\n     * - Reflect\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableOutput | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const destination = SerializableParameter.instantiateFromJson(json.Destination);\r\n      const vertexIndex = asNumber(json.VertexIndex);\r\n      const scale = asNumber(json.Scale);\r\n      const weight = asNumber(json.Weight);\r\n      const type = asString(json.Type);\r\n      const reflect = asBoolean(json.Reflect);\r\n      if (\r\n        destination === undefined ||\r\n        vertexIndex === undefined ||\r\n        scale === undefined ||\r\n        weight === undefined ||\r\n        type === undefined ||\r\n        reflect === undefined\r\n      ) {\r\n        return undefined;\r\n      }\r\n      return new SerializableOutput({\r\n        destination: destination,\r\n        vertexIndex: vertexIndex,\r\n        scale: scale,\r\n        weight: weight,\r\n        type: type,\r\n        reflect: reflect,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Single vertex. (struct) */\r\n  export class SerializableVertex implements IStructLike<SerializableVertex> {\r\n    /** Default position. */\r\n    public position: SerializableVector2;\r\n    /** Mobility. */\r\n    public mobility: number;\r\n    /** Delay ratio. */\r\n    public delay: number;\r\n    /** Acceleration. */\r\n    public acceleration: number;\r\n    /** Length. */\r\n    public radius: number;\r\n\r\n    public constructor(\r\n      args: {\r\n        position?: SerializableVector2;\r\n        mobility?: number;\r\n        delay?: number;\r\n        acceleration?: number;\r\n        radius?: number;\r\n      } = {}\r\n    ) {\r\n      this.position = args.position ?? SerializableVector2.DEFAULT;\r\n      this.mobility = args.mobility ?? 0;\r\n      this.delay = args.delay ?? 0;\r\n      this.acceleration = args.acceleration ?? 0;\r\n      this.radius = args.radius ?? 0;\r\n    }\r\n\r\n    public equals(other: SerializableVertex): boolean {\r\n      return (\r\n        this === other ||\r\n        (this.position.equals(other.position) &&\r\n          this.mobility == other.mobility &&\r\n          this.delay == other.delay &&\r\n          this.acceleration == other.acceleration &&\r\n          this.radius == other.radius)\r\n      );\r\n    }\r\n\r\n    public strictEquals(other: SerializableVertex): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        position?: SerializableVector2;\r\n        mobility?: number;\r\n        delay?: number;\r\n        acceleration?: number;\r\n        radius?: number;\r\n      } = {}\r\n    ): SerializableVertex {\r\n      return new SerializableVertex({\r\n        position: args.position?.clone() ?? this.position.clone(),\r\n        mobility: args.mobility ?? this.mobility,\r\n        delay: args.delay ?? this.delay,\r\n        acceleration: args.acceleration ?? this.acceleration,\r\n        radius: args.radius ?? this.radius,\r\n      });\r\n    }\r\n\r\n    public static isEquals(a: SerializableVertex, b: SerializableVertex) {\r\n      return a.equals(b);\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Position\r\n     * - Mobility\r\n     * - Delay\r\n     * - Acceleration\r\n     * - Radius\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableVertex | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const position = SerializableVector2.instantiateFromJson(json.Position);\r\n      const mobility = asNumber(json.Mobility);\r\n      const delay = asNumber(json.Delay);\r\n      const acceleration = asNumber(json.Acceleration);\r\n      const radius = asNumber(json.Radius);\r\n      if (\r\n        position === undefined ||\r\n        mobility === undefined ||\r\n        delay === undefined ||\r\n        acceleration === undefined ||\r\n        radius === undefined\r\n      ) {\r\n        return undefined;\r\n      }\r\n      return new SerializableVertex({\r\n        position: position,\r\n        mobility: mobility,\r\n        delay: delay,\r\n        acceleration: acceleration,\r\n        radius: radius,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Parameter(input value normalized). (struct) */\r\n  export class SerializableNormalization implements IStructLike<SerializableNormalization> {\r\n    /** Normalization value of position. */\r\n    public readonly position: SerializableNormalizationValue;\r\n    /** Normalization value of angle. */\r\n    public readonly angle: SerializableNormalizationValue;\r\n\r\n    public constructor(\r\n      args: {\r\n        position?: SerializableNormalizationValue;\r\n        angle?: SerializableNormalizationValue;\r\n      } = {}\r\n    ) {\r\n      this.position = args.position ?? SerializableNormalizationValue.DEFAULT;\r\n      this.angle = args.angle ?? SerializableNormalizationValue.DEFAULT;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        position?: SerializableNormalizationValue;\r\n        angle?: SerializableNormalizationValue;\r\n      } = {}\r\n    ): SerializableNormalization {\r\n      return new SerializableNormalization({\r\n        position: args.position ?? this.position,\r\n        angle: args.angle ?? this.angle,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializableNormalization): boolean {\r\n      return (\r\n        this === other || (this.position.equals(other.position) && this.angle.equals(other.angle))\r\n      );\r\n    }\r\n\r\n    public strictEquals(other: SerializableNormalization): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Position\r\n     * - Angle\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableNormalization | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const position = SerializableNormalizationValue.instantiateFromJson(json.Position);\r\n      const angle = SerializableNormalizationValue.instantiateFromJson(json.Angle);\r\n      if (position === undefined || angle === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableNormalization({\r\n        position: position,\r\n        angle: angle,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Setting of physics calculation. (struct) */\r\n  export class SerializablePhysicsSettings implements IStructLike<SerializablePhysicsSettings> {\r\n    /** TODO Document. */\r\n    public readonly id: string;\r\n    /** Input array. */\r\n    public readonly input: SerializableInput[];\r\n    /** Output array. */\r\n    public readonly output: SerializableOutput[];\r\n    /** Vertices. */\r\n    public readonly vertices: SerializableVertex[];\r\n    /** Normalization parameter of using input. */\r\n    public readonly normalization: SerializableNormalization;\r\n\r\n    public constructor(\r\n      args: {\r\n        id?: string;\r\n        input?: SerializableInput[];\r\n        output?: SerializableOutput[];\r\n        vertices?: SerializableVertex[];\r\n        normalization?: SerializableNormalization;\r\n      } = {}\r\n    ) {\r\n      this.id = args.id ?? '';\r\n      this.input = args.input ?? new Array();\r\n      this.output = args.output ?? new Array();\r\n      this.vertices = args.vertices ?? new Array();\r\n      this.normalization = args.normalization ?? SerializableNormalization.DEFAULT;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        id?: string;\r\n        input?: SerializableInput[];\r\n        output?: SerializableOutput[];\r\n        vertices?: SerializableVertex[];\r\n        normalization?: SerializableNormalization;\r\n      } = {}\r\n    ): SerializablePhysicsSettings {\r\n      return new SerializablePhysicsSettings({\r\n        id: args.id ?? this.id,\r\n        input: args.input ?? this.input,\r\n        output: args.output ?? this.output,\r\n        vertices: args.vertices ?? this.vertices,\r\n        normalization: args.normalization ?? this.normalization,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializablePhysicsSettings): boolean {\r\n      const { isEquals } = ArrayExtensions;\r\n      return (\r\n        this === other ||\r\n        (this.id == other.id &&\r\n          isEquals(SerializableInput.isEquals, this.input, other.input) &&\r\n          isEquals(SerializableOutput.isEquals, this.output, other.output) &&\r\n          isEquals(SerializableVertex.isEquals, this.vertices, other.vertices) &&\r\n          this.normalization.equals(other.normalization))\r\n      );\r\n    }\r\n\r\n    public strictEquals(other: SerializablePhysicsSettings): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Id\r\n     * - Input\r\n     * - Vertices\r\n     * - Output\r\n     * - Normalization\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializablePhysicsSettings | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const { asString, asArray } = JsonParseUtils;\r\n\r\n      const id = asString(json.Id);\r\n      const input = JsonParseUtils.arrayedInstantiateFromJson(\r\n        json.Input,\r\n        SerializableInput.instantiateFromJson\r\n      );\r\n      const output = JsonParseUtils.arrayedInstantiateFromJson(\r\n        json.Output,\r\n        SerializableOutput.instantiateFromJson\r\n      );\r\n      const vertices = JsonParseUtils.arrayedInstantiateFromJson(\r\n        json.Vertices,\r\n        SerializableVertex.instantiateFromJson\r\n      );\r\n      const normalization = SerializableNormalization.instantiateFromJson(json.Normalization);\r\n      if (\r\n        id === undefined ||\r\n        input === undefined ||\r\n        output === undefined ||\r\n        vertices === undefined ||\r\n        normalization === undefined\r\n      ) {\r\n        return undefined;\r\n      }\r\n      return new SerializablePhysicsSettings({\r\n        id: id,\r\n        input: input,\r\n        output: output,\r\n        vertices: vertices,\r\n        normalization: normalization,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Additional data describing physics. (struct) */\r\n  export class SerializableMeta implements IStructLike<SerializableMeta> {\r\n    /** Number of physics settings. */\r\n    public readonly physicsSettingCount: number;\r\n    /** Total number of input parameters. */\r\n    public readonly totalInputCount: number;\r\n    /** Total number of output parameters. */\r\n    public readonly totalOutputCount: number;\r\n    /** Total number of vertices. */\r\n    public readonly totalVertexCount: number;\r\n    /** TODO Document. */\r\n    public readonly effectiveForces: SerializableEffectiveForces;\r\n    /**\r\n     * [Optional] Fps of physics operations.\r\n     * If the value is not set to Json, it will change according to the application's operating FPS.\r\n     */\r\n    public readonly fps: number;\r\n\r\n    public constructor(\r\n      args: {\r\n        physicsSettingCount?: number;\r\n        totalInputCount?: number;\r\n        totalOutputCount?: number;\r\n        totalVertexCount?: number;\r\n        effectiveForces?: SerializableEffectiveForces;\r\n        fps?: number;\r\n      } = {}\r\n    ) {\r\n      this.physicsSettingCount = args.physicsSettingCount ?? 0;\r\n      this.totalInputCount = args.totalInputCount ?? 0;\r\n      this.totalOutputCount = args.totalOutputCount ?? 0;\r\n      this.totalVertexCount = args.totalVertexCount ?? 0;\r\n      this.effectiveForces = args.effectiveForces ?? SerializableEffectiveForces.DEFAULT;\r\n      this.fps = args.fps ?? 0;\r\n    }\r\n\r\n    public copyWith(\r\n      args: {\r\n        physicsSettingCount?: number;\r\n        totalInputCount?: number;\r\n        totalOutputCount?: number;\r\n        totalVertexCount?: number;\r\n        effectiveForces?: SerializableEffectiveForces;\r\n        fps?: number;\r\n      } = {}\r\n    ): SerializableMeta {\r\n      return new SerializableMeta({\r\n        physicsSettingCount: args.physicsSettingCount ?? this.physicsSettingCount,\r\n        totalInputCount: args.totalInputCount ?? this.totalInputCount,\r\n        totalOutputCount: args.totalOutputCount ?? this.totalOutputCount,\r\n        totalVertexCount: args.totalVertexCount ?? this.totalVertexCount,\r\n        effectiveForces: args.effectiveForces ?? this.effectiveForces,\r\n        fps: args.fps ?? this.fps,\r\n      });\r\n    }\r\n\r\n    public equals(other: SerializableMeta): boolean {\r\n      return this === other\r\n        ? true\r\n        : this.physicsSettingCount == other.physicsSettingCount &&\r\n            this.totalInputCount == other.totalInputCount &&\r\n            this.totalOutputCount == other.totalOutputCount &&\r\n            this.totalVertexCount == other.totalVertexCount &&\r\n            this.effectiveForces.equals(other.effectiveForces) &&\r\n            this.fps == other.fps;\r\n    }\r\n\r\n    public strictEquals(other: SerializableMeta): boolean {\r\n      return this === other;\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - PhysicsSettingCount\r\n     * - TotalInputCount\r\n     * - TotalOutputCount\r\n     * - VertexCount\r\n     * - EffectiveForces\r\n     * - PhysicsDictionary (for Unity 未実装)\r\n     *\r\n     * **Optional properties**\r\n     * - Fps (for Unity 未実装)\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableMeta | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const physicsSettingCount = asNumber(json.PhysicsSettingCount);\r\n      const totalInputCount = asNumber(json.TotalInputCount);\r\n      const totalOutputCount = asNumber(json.TotalOutputCount);\r\n      const vertexCount = asNumber(json.VertexCount);\r\n      const effectiveForces = SerializableEffectiveForces.instantiateFromJson(json.EffectiveForces);\r\n      if (\r\n        physicsSettingCount === undefined ||\r\n        totalInputCount === undefined ||\r\n        totalOutputCount === undefined ||\r\n        vertexCount === undefined ||\r\n        effectiveForces === undefined\r\n      ) {\r\n        return undefined;\r\n      }\r\n      const fps = asNumber(json.Fps);\r\n\r\n      return new SerializableMeta({\r\n        physicsSettingCount: physicsSettingCount,\r\n        totalInputCount: totalInputCount,\r\n        totalOutputCount: totalOutputCount,\r\n        totalVertexCount: vertexCount,\r\n        effectiveForces: effectiveForces,\r\n        fps: fps,\r\n      });\r\n    }\r\n  }\r\n\r\n  /** TODO Document. (struct) */\r\n  export class SerializableEffectiveForces implements IStructLike<SerializableEffectiveForces> {\r\n    /** Gravity. */\r\n    public readonly gravity: SerializableVector2;\r\n    /** Wind. (Not in use) */\r\n    public readonly wind: SerializableVector2;\r\n\r\n    public constructor(args: { gravity?: SerializableVector2; wind?: SerializableVector2 } = {}) {\r\n      this.gravity = args.gravity ?? SerializableVector2.DEFAULT;\r\n      this.wind = args.wind ?? SerializableVector2.DEFAULT;\r\n    }\r\n\r\n    public copyWith(\r\n      args: { gravity?: SerializableVector2; wind?: SerializableVector2 } = {}\r\n    ): SerializableEffectiveForces {\r\n      return new SerializableEffectiveForces({\r\n        gravity: args.gravity ?? this.gravity,\r\n        wind: args.wind ?? this.wind,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * **Required properties**\r\n     * - Gravity\r\n     * - Wind\r\n     * @param json\r\n     * @returns\r\n     */\r\n    public static instantiateFromJson(json: any): SerializableEffectiveForces | undefined {\r\n      if (json == null) {\r\n        return undefined;\r\n      }\r\n      const gravity = SerializableVector2.instantiateFromJson(json.Gravity);\r\n      const wind = SerializableVector2.instantiateFromJson(json.Wind);\r\n      if (gravity === undefined || wind === undefined) {\r\n        return undefined;\r\n      }\r\n      return new SerializableEffectiveForces({ gravity: gravity, wind: wind });\r\n    }\r\n\r\n    public equals(other: SerializableEffectiveForces): boolean {\r\n      return this === other || (this.gravity.equals(other.gravity) && this.wind.equals(other.wind));\r\n    }\r\n\r\n    public strictEquals(other: SerializableEffectiveForces): boolean {\r\n      return this === other;\r\n    }\r\n  }\r\n\r\n  export namespace SerializableVector2 {\r\n    export const DEFAULT = new SerializableVector2();\r\n  }\r\n\r\n  export namespace SerializableEffectiveForces {\r\n    export const DEFAULT = new SerializableEffectiveForces();\r\n  }\r\n\r\n  export namespace SerializableMeta {\r\n    export const DEFAULT = new SerializableMeta();\r\n  }\r\n\r\n  export namespace SerializableNormalizationValue {\r\n    export const DEFAULT = new SerializableNormalizationValue();\r\n  }\r\n\r\n  export namespace SerializableParameter {\r\n    export const DEFAULT = new SerializableParameter();\r\n  }\r\n\r\n  export namespace SerializableInput {\r\n    export const DEFAULT = new SerializableInput();\r\n  }\r\n\r\n  export namespace SerializableVertex {\r\n    export const DEFAULT = new SerializableVertex();\r\n  }\r\n\r\n  export namespace SerializableNormalization {\r\n    export const DEFAULT = new SerializableNormalization();\r\n  }\r\n\r\n  export namespace SerializablePhysicsSettings {\r\n    export const DEFAULT = new SerializablePhysicsSettings();\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\nexport default CubismPhysics3Json;\r\n"]}