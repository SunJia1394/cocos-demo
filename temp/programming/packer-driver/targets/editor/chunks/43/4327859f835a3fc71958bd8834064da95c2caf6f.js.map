{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsNormalization.ts"],"names":["_decorator","property","ccclass","CubismPhysicsNormalizationTuplet","serializable","constructor","args","maximum","minimum","default","defaultValue","equals","other","strictEquals","copyWith","CubismPhysicsNormalization","type","position","angle","DEFAULT"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator } from 'cc';\r\nimport type IStructLike from '../../IStructLike';\r\nconst { property, ccclass } = _decorator;\r\n\r\n/** Normalization tuplet. (struct) */\r\n@ccclass('CubismPhysicsNormalizationTuplet')\r\nexport class CubismPhysicsNormalizationTuplet\r\n  implements IStructLike<CubismPhysicsNormalizationTuplet>\r\n{\r\n  /** Normalized maximum value. */\r\n  @property({ serializable: true })\r\n  public readonly maximum: number = 0;\r\n\r\n  /** Normalized minimum value. */\r\n  @property({ serializable: true })\r\n  public readonly minimum: number = 0;\r\n\r\n  /** Normalized default value. */\r\n  @property({ serializable: true })\r\n  public readonly default: number = 0;\r\n\r\n  public constructor(args: { maximum?: number; minimum?: number; defaultValue?: number } = {}) {\r\n    this.maximum = args.maximum ?? 0;\r\n    this.minimum = args.minimum ?? 0;\r\n    this.default = args.defaultValue ?? 0;\r\n  }\r\n\r\n  public equals(other: CubismPhysicsNormalizationTuplet): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.default == other.default &&\r\n          this.maximum == other.maximum &&\r\n          this.minimum == this.minimum;\r\n  }\r\n\r\n  public strictEquals(other: CubismPhysicsNormalizationTuplet): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  public copyWith(\r\n    args: { maximum?: number; minimum?: number; defaultValue?: number } = {}\r\n  ): CubismPhysicsNormalizationTuplet {\r\n    return new CubismPhysicsNormalizationTuplet({\r\n      maximum: args.maximum ?? this.maximum,\r\n      minimum: args.minimum ?? this.minimum,\r\n      defaultValue: args.defaultValue ?? this.default,\r\n    });\r\n  }\r\n}\r\n\r\n/** Normalization parameters of physics. (struct) */\r\n@ccclass('CubismPhysicsNormalization')\r\nclass CubismPhysicsNormalization implements IStructLike<CubismPhysicsNormalization> {\r\n  /** Normalized position. */\r\n  @property({ type: CubismPhysicsNormalizationTuplet, serializable: true })\r\n  public readonly position: CubismPhysicsNormalizationTuplet;\r\n\r\n  /** Normalized angle. */\r\n  @property({ type: CubismPhysicsNormalizationTuplet, serializable: true })\r\n  public readonly angle: CubismPhysicsNormalizationTuplet;\r\n\r\n  public constructor(\r\n    args: {\r\n      position?: CubismPhysicsNormalizationTuplet;\r\n      angle?: CubismPhysicsNormalizationTuplet;\r\n    } = {}\r\n  ) {\r\n    this.position = args.position ?? new CubismPhysicsNormalizationTuplet();\r\n    this.angle = args.angle ?? new CubismPhysicsNormalizationTuplet();\r\n  }\r\n\r\n  public equals(other: CubismPhysicsNormalization): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.angle.equals(other.angle) && this.position.equals(other.position);\r\n  }\r\n  public strictEquals(other: CubismPhysicsNormalization): boolean {\r\n    return this === other;\r\n  }\r\n  public copyWith(\r\n    args: {\r\n      position?: CubismPhysicsNormalizationTuplet;\r\n      angle?: CubismPhysicsNormalizationTuplet;\r\n    } = {}\r\n  ): CubismPhysicsNormalization {\r\n    return new CubismPhysicsNormalization({\r\n      position: args.position ?? this.position,\r\n      angle: args.angle ?? this.angle,\r\n    });\r\n  }\r\n}\r\n\r\nnamespace CubismPhysicsNormalization {\r\n  export const DEFAULT = new CubismPhysicsNormalization();\r\n}\r\nexport default CubismPhysicsNormalization;\r\n\r\nexport namespace CubismPhysicsNormalizationTuplet {\r\n  export const DEFAULT = new CubismPhysicsNormalizationTuplet();\r\n}\r\n"]}