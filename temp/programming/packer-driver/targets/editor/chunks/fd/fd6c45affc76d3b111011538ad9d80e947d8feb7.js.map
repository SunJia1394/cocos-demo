{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismParameter.ts"],"names":["_decorator","Component","Node","CCFloat","ccclass","property","executeInEditMode","CubismParameter","serializable","visible","type","readonly","_unmanagedParameters","_model","createParameters","model","root","parameters","buffer","Array","count","i","length","proxy","addComponent","addChild","reset","unmanagedParameters","value","unmanagedIndex","_unmanagedIndex","id","ids","minimumValue","minimumValues","maximumValue","maximumValues","defaultValue","defaultValues","valueInEditor","forceUpdateNow","revive","index","node","name"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component, Node, CCFloat } from 'cc';\r\nimport type { Model, Parameters } from '../CubismCore';\r\nimport type CubismModel from './CubismModel';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n// TODO: CubismDontMoveOnReimport\r\n/**\r\n * Single {@link CubismModel} parameter.\r\n *\r\n * **Sealed class**\r\n */\r\n@ccclass('CubismParameter')\r\n@executeInEditMode\r\nexport default class CubismParameter extends Component {\r\n  //#region Factory Methods\r\n\r\n  /**\r\n   * Creates drawables for a {@link CubismModel}.\r\n   * @param model Handle to unmanaged model.\r\n   * @returns Drawables root.\r\n   */\r\n  public static createParameters(model: Model): Node {\r\n    const root = new Node('Parameters');\r\n\r\n    // Create parameters.\r\n    const parameters = model.parameters;\r\n    const buffer = new Array<CubismParameter | null>(parameters!.count);\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      const proxy = new Node();\r\n      buffer[i] = proxy.addComponent(CubismParameter);\r\n      root.addChild(proxy);\r\n      buffer[i]!.reset(model, i);\r\n    }\r\n    return root;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  private _unmanagedParameters: Parameters | null = null;\r\n  /** Unmanaged parameters from unmanaged model. */\r\n  private get unmanagedParameters(): Parameters | null {\r\n    return this._unmanagedParameters;\r\n  }\r\n  private set unmanagedParameters(value: Parameters | null) {\r\n    this._unmanagedParameters = value;\r\n  }\r\n\r\n  /** {@link unmanagedIndex} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _unmanagedIndex: number = -1;\r\n\r\n  /** Position in unmanaged arrays. */\r\n  public get unmanagedIndex(): number {\r\n    return this._unmanagedIndex;\r\n  }\r\n  private set unmanagedIndex(value: number) {\r\n    this._unmanagedIndex = value;\r\n  }\r\n\r\n  /** Copy of Id. */\r\n  public get id(): string {\r\n    return this.unmanagedParameters?.ids[this.unmanagedIndex] ?? '';\r\n  }\r\n\r\n  /** Minimum value. */\r\n  get minimumValue(): number {\r\n    return this.unmanagedParameters?.minimumValues[this.unmanagedIndex] ?? 0;\r\n  }\r\n\r\n  /** Maximum value. */\r\n  get maximumValue(): number {\r\n    return this.unmanagedParameters?.maximumValues[this.unmanagedIndex] ?? 0;\r\n  }\r\n\r\n  /** Default value. */\r\n  get defaultValue(): number {\r\n    return this.unmanagedParameters?.defaultValues[this.unmanagedIndex] ?? 0;\r\n  }\r\n\r\n  /** Current value. */\r\n  @property({ type: CCFloat, serializable: true, visible: true, readonly: false })\r\n  public value: number = 0;\r\n\r\n  /** Editor Only, For operation from inspector. */\r\n  private _model: CubismModel | null = null;\r\n\r\n  /** Editor Only, For operation from inspector. */\r\n  @property({ type: CCFloat, visible: true, readonly: false })\r\n  private set valueInEditor(value: number) {\r\n    if (this.value !== value) {\r\n      this.value = value;\r\n      this._model?.forceUpdateNow();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revives the instance.\r\n   * @param model Handle to unmanaged model.\r\n   */\r\n  public revive(model: Model): void {\r\n    this.unmanagedParameters = model.parameters ?? null;\r\n  }\r\n\r\n  /**\r\n   * Restores instance to initial state.\r\n   * @param model Handle to unmanaged model.\r\n   * @param index Position in unmanaged arrays.\r\n   */\r\n  private reset(model: Model, index: number): void {\r\n    this.revive(model);\r\n    this.unmanagedIndex = index;\r\n    this.node.name = this.id;\r\n    this.value = this.defaultValue;\r\n  }\r\n}\r\n"]}