{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskTile.ts"],"names":["CubismMaskTile","math","toVec4","Vec4","channel","column","row","size","constructor","args","copyWith","equals","other","strictEquals","isEquals","a","b","DEFAULT"],"mappings":";;;qFAWMA,c;;;;;;;;;;;;;AAJGC,MAAAA,I,OAAAA,I;;;;;;AAPT;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACMD,MAAAA,c,GAAN,MAAMA,cAAN,CAA4D;AAC1D;;AAEA;AACF;AACA;AACA;AACSE,QAAAA,MAAM,GAAc;AACzB,iBAAO,IAAID,IAAI,CAACE,IAAT,CAAc,KAAKC,OAAnB,EAA4B,KAAKC,MAAjC,EAAyC,KAAKC,GAA9C,EAAmD,KAAKC,IAAxD,CAAP;AACD,SATyD,CAW1D;;AAEA;AACF;AACA;AACA;AACA;;;AAYSC,QAAAA,WAAW,CAChBC,IAAwE,GAAG,EAD3D,EAEhB;AAAA;;AAAA,eAbcL,OAad;;AAXF;AAWE,eAVcC,MAUd;;AARF;AAQE,eAPcC,GAOd;;AALF;AAKE,eAJcC,IAId;AACA,eAAKH,OAAL,oBAAeK,IAAI,CAACL,OAApB,4BAA+B,CAA/B;AACA,eAAKC,MAAL,mBAAcI,IAAI,CAACJ,MAAnB,2BAA6B,CAA7B;AACA,eAAKC,GAAL,gBAAWG,IAAI,CAACH,GAAhB,wBAAuB,CAAvB;AACA,eAAKC,IAAL,iBAAYE,IAAI,CAACF,IAAjB,yBAAyB,CAAzB;AACD;;AAEMG,QAAAA,QAAQ,CACbD,IAAwE,GAAG,EAD9D,EAEG;AAAA;;AAChB,iBAAO,IAAIT,cAAJ,CAAmB;AACxBI,YAAAA,OAAO,oBAAEK,IAAI,CAACL,OAAP,6BAAkB,KAAKA,OADN;AAExBC,YAAAA,MAAM,mBAAEI,IAAI,CAACJ,MAAP,4BAAiB,KAAKA,MAFJ;AAGxBC,YAAAA,GAAG,gBAAEG,IAAI,CAACH,GAAP,yBAAc,KAAKA,GAHE;AAIxBC,YAAAA,IAAI,iBAAEE,IAAI,CAACF,IAAP,0BAAe,KAAKA;AAJA,WAAnB,CAAP;AAMD;;AAEMI,QAAAA,MAAM,CAACC,KAAD,EAAiC;AAC5C,iBAAO,SAASA,KAAT,GACH,IADG,GAEH,KAAKR,OAAL,IAAgBQ,KAAK,CAACR,OAAtB,IACE,KAAKC,MAAL,IAAeO,KAAK,CAACP,MADvB,IAEE,KAAKC,GAAL,IAAYM,KAAK,CAACN,GAFpB,IAGE,KAAKC,IAAL,IAAaK,KAAK,CAACL,IALzB;AAMD;;AAEMM,QAAAA,YAAY,CAACD,KAAD,EAAiC;AAClD,iBAAO,SAASA,KAAhB;AACD;;AAEqB,eAARE,QAAQ,CAACC,CAAD,EAAoBC,CAApB,EAAuC;AAC3D,iBAAOD,CAAC,CAACJ,MAAF,CAASK,CAAT,CAAP;AACD;;AAhEyD,O;;;AAoEnD,cAAMC,OAAO,6BAAG,IAAIjB,cAAJ,EAAhB;SADCA,c,KAAAA,c;;yBAIKA,c","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { math } from 'cc';\r\nimport type IStructLike from '../../IStructLike';\r\n\r\n/** Single mask tile. (struct) */\r\nclass CubismMaskTile implements IStructLike<CubismMaskTile> {\r\n  // #region Conversion\r\n\r\n  /**\r\n   * Converts a CubismMaskTile to a Vector4.\r\n   * @returns\r\n   */\r\n  public toVec4(): math.Vec4 {\r\n    return new math.Vec4(this.channel, this.column, this.row, this.size);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * Color channel of the tile.\r\n   *\r\n   * Valid values are 0f, 1f, 2, and 3f.\r\n   */\r\n  public readonly channel: number;\r\n\r\n  /** Column index of the tile in subdivided texture. */\r\n  public readonly column: number;\r\n\r\n  /** Row index of the tile in subdivided texture. */\r\n  public readonly row: number;\r\n\r\n  /** Size of the tile in texture coordinates. */\r\n  public readonly size: number;\r\n\r\n  public constructor(\r\n    args: { channel?: number; column?: number; row?: number; size?: number } = {}\r\n  ) {\r\n    this.channel = args.channel ?? 0;\r\n    this.column = args.column ?? 0;\r\n    this.row = args.row ?? 0;\r\n    this.size = args.size ?? 0;\r\n  }\r\n\r\n  public copyWith(\r\n    args: { channel?: number; column?: number; row?: number; size?: number } = {}\r\n  ): CubismMaskTile {\r\n    return new CubismMaskTile({\r\n      channel: args.channel ?? this.channel,\r\n      column: args.column ?? this.column,\r\n      row: args.row ?? this.row,\r\n      size: args.size ?? this.size,\r\n    });\r\n  }\r\n\r\n  public equals(other: CubismMaskTile): boolean {\r\n    return this === other\r\n      ? true\r\n      : this.channel == other.channel &&\r\n          this.column == other.column &&\r\n          this.row == other.row &&\r\n          this.size == other.size;\r\n  }\r\n\r\n  public strictEquals(other: CubismMaskTile): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  public static isEquals(a: CubismMaskTile, b: CubismMaskTile) {\r\n    return a.equals(b);\r\n  }\r\n}\r\n\r\nnamespace CubismMaskTile {\r\n  export const DEFAULT = new CubismMaskTile();\r\n}\r\n\r\nexport default CubismMaskTile;\r\n"]}