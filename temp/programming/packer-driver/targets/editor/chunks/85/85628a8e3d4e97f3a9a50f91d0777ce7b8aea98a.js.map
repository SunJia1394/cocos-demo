{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismDrawable.ts"],"names":["_decorator","Component","Node","math","CCInteger","Color","Utils","ComponentExtensionMethods","CubismMeshPrimitive","ccclass","property","CubismDrawable","type","serializable","visible","readonly","_unmanagedDrawables","createDrawables","model","root","drawables","buffer","Array","count","i","length","proxy","addComponent","addChild","reset","unmanagedDrawables","value","unmanagedIndex","_unmanagedIndex","id","console","error","ids","textureIndex","textureIndices","masks","findCubismModel","maskCounts","indices","j","vertexPositions","vertexCounts","positions","Vec3","vertexUvs","uvs","Vec2","Uint16Array","indexCounts","generateMeshPrimitive","vertexCount","positionsBuffer","uvsBuffer","colorsBuffer","primitive","from","setIndices","isDoubleSided","flags","constantFlags","hasIsDoubleSidedBit","isMasked","isInverted","hasIsInvertedMaskBit","blendAdditive","hasBlendAdditiveBit","multiplyBlend","hasBlendMultiplicativeBit","multiplyColor","WHITE","index","x","multiplyColors","y","z","w","screenColor","BLACK","screenColors","revive","node","name"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component, Node, math, CCInteger, Color } from 'cc';\r\nimport { Utils } from '../CubismCore';\r\nimport ComponentExtensionMethods from './ComponentExtensionMethods';\r\nimport type { Drawables, Model } from '../CubismCore';\r\nimport CubismMeshPrimitive from '../Rendering/CubismMeshPrimitive';\r\nconst { ccclass, property } = _decorator;\r\n\r\n// TODO: CubismDontMoveOnReimport\r\n/**\r\n * Single CubismModel drawable.\r\n *\r\n * **Sealed class.**\r\n */\r\n@ccclass('CubismDrawable')\r\nexport default class CubismDrawable extends Component {\r\n  // #region Factory Methods\r\n\r\n  /**\r\n   * Creates drawables for a {@link CubismModel}.\r\n   * @param model Handle to unmanaged model.\r\n   * @returns Drawables root.\r\n   */\r\n  public static createDrawables(model: Model): Node {\r\n    const root = new Node('Drawables');\r\n\r\n    // Create parts.\r\n    const drawables = model.drawables;\r\n    const buffer = new Array<CubismDrawable>(drawables.count);\r\n\r\n    for (let i = 0; i < buffer.length; ++i) {\r\n      const proxy = new Node();\r\n      buffer[i] = proxy.addComponent(CubismDrawable);\r\n      root.addChild(proxy);\r\n      buffer[i].reset(model, i);\r\n    }\r\n    return root;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  private _unmanagedDrawables: Drawables | null = null;\r\n  /** Unmanaged drawables from unmanaged model. */\r\n  private get unmanagedDrawables(): Drawables | null {\r\n    return this._unmanagedDrawables;\r\n  }\r\n  private set unmanagedDrawables(value: Drawables | null) {\r\n    this._unmanagedDrawables = value;\r\n  }\r\n\r\n  /** {@link unmanagedIndex} backing field. */\r\n  @property({ type: CCInteger, serializable: true, visible: true, readonly: true })\r\n  private _unmanagedIndex: number = -1;\r\n\r\n  /** Position in unmanaged arrays. */\r\n  public get unmanagedIndex(): number {\r\n    return this._unmanagedIndex;\r\n  }\r\n  private set unmanagedIndex(value: number) {\r\n    this._unmanagedIndex = value;\r\n  }\r\n\r\n  /** Copy of Id. */\r\n  public get id(): string {\r\n    if (this.unmanagedDrawables == null) {\r\n      console.error('CubismDrawable.id: this.unmanagedDrawables is null');\r\n      return '';\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.id: this.index uninitialize.');\r\n      return '';\r\n    }\r\n    return this.unmanagedDrawables.ids[this.unmanagedIndex];\r\n  }\r\n\r\n  /** Texture UnmanagedIndex. */\r\n  public get textureIndex(): number {\r\n    if (this.unmanagedDrawables == null) {\r\n      console.error('CubismDrawable.id: this.unmanagedDrawables is null');\r\n      return 0;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.id: this.index uninitialize.');\r\n      return 0;\r\n    }\r\n    return this.unmanagedDrawables.textureIndices[this.unmanagedIndex];\r\n  }\r\n\r\n  /** Copy of the masks. */\r\n  public get masks(): Array<CubismDrawable> {\r\n    if (this.unmanagedDrawables == null) {\r\n      console.error('CubismDrawable.masks: this.unmanagedDrawables is null');\r\n      return new Array<CubismDrawable>(0);\r\n    }\r\n    const model = ComponentExtensionMethods.findCubismModel(this, true);\r\n    if (model == null) {\r\n      console.error('CubismDrawable.masks: ComponentExtensionMethods.findCubismModel() failed.');\r\n      return new Array<CubismDrawable>(0);\r\n    }\r\n    const drawables = model.drawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.masks: model.drawables is null.');\r\n      return new Array<CubismDrawable>(0);\r\n    }\r\n\r\n    const count = this.unmanagedDrawables.maskCounts[this.unmanagedIndex];\r\n    const indices = this.unmanagedDrawables.masks[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    const buffer = new Array<CubismDrawable>(count);\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      for (let j = 0; j < drawables.length; j++) {\r\n        if (drawables[j].unmanagedIndex != indices[i]) {\r\n          continue;\r\n        }\r\n\r\n        buffer[i] = drawables[j];\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /** Copy of vertex positions. */\r\n  public get vertexPositions(): Array<math.Vec3> {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.vertexPositions: this.unmanagedDrawables is null.');\r\n      return new Array(0);\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.vertexUvs: this.index uninitialize.');\r\n      return new Array(0);\r\n    }\r\n\r\n    const count = drawables.vertexCounts[this.unmanagedIndex];\r\n    const positions = drawables.vertexPositions[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    const buffer = new Array<math.Vec3>(count);\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      buffer[i] = new math.Vec3(positions[i * 2 + 0], positions[i * 2 + 1]);\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /** Copy of vertex texture coordinates. */\r\n  public get vertexUvs(): Array<math.Vec2> {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.vertexUvs: this.unmanagedDrawables is null.');\r\n      return new Array(0);\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.vertexUvs: this.index uninitialize.');\r\n      return new Array(0);\r\n    }\r\n\r\n    const count = drawables.vertexCounts[this.unmanagedIndex];\r\n    const uvs = drawables.vertexUvs[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    var buffer = new Array<math.Vec2>(count);\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      buffer[i] = new math.Vec2(uvs[i * 2 + 0], uvs[i * 2 + 1]);\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  /** Copy of triangle indices. */\r\n  public get indices(): Uint16Array {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.indices: this.unmanagedDrawables is null.');\r\n      return new Uint16Array(0);\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.indices: this.index uninitialize.');\r\n      return new Uint16Array(0);\r\n    }\r\n\r\n    const count = drawables.indexCounts[this.unmanagedIndex];\r\n    const indices = drawables.indices[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    let buffer = new Uint16Array(count);\r\n\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      buffer[i] = indices[i];\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  public generateMeshPrimitive(): CubismMeshPrimitive | null {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.generateMeshPrimitive(): this.drawables is null.');\r\n      return null;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.generateMeshPrimitive(): this.index uninitialize.');\r\n      return null;\r\n    }\r\n\r\n    // Get addresses.\r\n    const vertexCount = drawables.vertexCounts[this.unmanagedIndex];\r\n    const positions = drawables.vertexPositions[this.unmanagedIndex];\r\n    const uvs = drawables.vertexUvs[this.unmanagedIndex];\r\n    const indices = drawables.indices[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    const positionsBuffer = new Array<number>(vertexCount * 3);\r\n    const uvsBuffer = new Array<number>(vertexCount * 2);\r\n    const colorsBuffer = new Array<number>(vertexCount * 4);\r\n\r\n    for (let i = 0, j = 0; i < positionsBuffer.length; ) {\r\n      positionsBuffer[i++] = positions[j++];\r\n      positionsBuffer[i++] = positions[j++];\r\n      positionsBuffer[i++] = 0;\r\n    }\r\n    for (let i = 0, j = 0; i < uvsBuffer.length; i++) {\r\n      uvsBuffer[i] = uvs[i];\r\n    }\r\n    for (let i = 0; i < colorsBuffer.length; i++) {\r\n      colorsBuffer[i] = 0;\r\n    }\r\n\r\n    const primitive = CubismMeshPrimitive.from(positionsBuffer, uvsBuffer, colorsBuffer);\r\n    primitive?.setIndices(indices);\r\n    return primitive;\r\n  }\r\n\r\n  /** True if double-sided. */\r\n  public get isDoubleSided(): boolean {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.isDoubleSided: this.unmanagedDrawables is null.');\r\n      return false;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.isDoubleSided: this.index uninitialize.');\r\n      return false;\r\n    }\r\n    const flags = drawables.constantFlags[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    return Utils.hasIsDoubleSidedBit(flags);\r\n  }\r\n\r\n  /** True if masking is requested. */\r\n  public get isMasked(): boolean {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.isMasked: this.unmanagedDrawables is null.');\r\n      return false;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.isMasked: this.index uninitialize.');\r\n      return false;\r\n    }\r\n    return drawables.maskCounts[this.unmanagedIndex] > 0;\r\n  }\r\n\r\n  /** True if inverted mask. */\r\n  public get isInverted() {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.isMasked: this.unmanagedDrawables is null.');\r\n      return false;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.isMasked: this.index uninitialize.');\r\n      return false;\r\n    }\r\n    const flags = drawables.constantFlags[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    return Utils.hasIsInvertedMaskBit(flags);\r\n  }\r\n\r\n  /** True if additive blending is requested. */\r\n  public get blendAdditive() {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.isMasked: this.unmanagedDrawables is null.');\r\n      return false;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.isMasked: this.index uninitialize.');\r\n      return false;\r\n    }\r\n    const flags = drawables.constantFlags[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    return Utils.hasBlendAdditiveBit(flags);\r\n  }\r\n\r\n  /** True if multiply blending is setd. */\r\n  public get multiplyBlend() {\r\n    const drawables = this.unmanagedDrawables;\r\n    if (drawables == null) {\r\n      console.error('CubismDrawable.isMasked: this.unmanagedDrawables is null.');\r\n      return false;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.isMasked: this.index uninitialize.');\r\n      return false;\r\n    }\r\n    const flags = drawables.constantFlags[this.unmanagedIndex];\r\n\r\n    // Pull data.\r\n    return Utils.hasBlendMultiplicativeBit(flags);\r\n  }\r\n\r\n  public get multiplyColor(): Color {\r\n    if (this.unmanagedDrawables == null) {\r\n      console.error('CubismDrawable.multiplyColor: this.unmanagedDrawables is null');\r\n      return Color.WHITE;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.multiplyColor: this.index uninitialize.');\r\n      return Color.WHITE;\r\n    }\r\n    const index = this.unmanagedIndex * 4;\r\n    const x = this.unmanagedDrawables.multiplyColors[index + 0] * 255;\r\n    const y = this.unmanagedDrawables.multiplyColors[index + 1] * 255;\r\n    const z = this.unmanagedDrawables.multiplyColors[index + 2] * 255;\r\n    const w = this.unmanagedDrawables.multiplyColors[index + 3] * 255; // Cubism Core API リファレンス <https://cubism.live2d.com/sdk-doc/reference/NativeCoreAPIReference_jp_r9.pdf> より Wの値は現在未使用\r\n    return new Color(x, y, z, w);\r\n  }\r\n\r\n  public get screenColor(): Color {\r\n    if (this.unmanagedDrawables == null) {\r\n      console.error('CubismDrawable.multiplyColor: this.unmanagedDrawables is null');\r\n      return Color.BLACK;\r\n    }\r\n    if (this.unmanagedIndex == -1) {\r\n      console.error('CubismDrawable.multiplyColor: this.index uninitialize.');\r\n      return Color.BLACK;\r\n    }\r\n    const index = this.unmanagedIndex * 4;\r\n    const x = this.unmanagedDrawables.screenColors[index + 0] * 255;\r\n    const y = this.unmanagedDrawables.screenColors[index + 1] * 255;\r\n    const z = this.unmanagedDrawables.screenColors[index + 2] * 255;\r\n    const w = this.unmanagedDrawables.screenColors[index + 3] * 255; // Cubism Core API リファレンス <https://cubism.live2d.com/sdk-doc/reference/NativeCoreAPIReference_jp_r9.pdf> より Wの値は現在未使用\r\n    return new Color(x, y, z, w);\r\n  }\r\n\r\n  /**\r\n   * Revives instance.\r\n   * @param model Handle to unmanaged model.\r\n   */\r\n  public revive(model: Model) {\r\n    this.unmanagedDrawables = model.drawables;\r\n  }\r\n\r\n  /**\r\n   * Restores instance to initial state.\r\n   * @param model Handle to unmanaged model.\r\n   * @param index Position in unmanaged arrays.\r\n   */\r\n  reset(model: Model, index: number) {\r\n    this.revive(model);\r\n    this._unmanagedIndex = index;\r\n    this.node.name = this.id;\r\n  }\r\n}\r\n"]}