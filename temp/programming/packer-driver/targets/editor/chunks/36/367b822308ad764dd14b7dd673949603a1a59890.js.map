{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsSubRig.ts"],"names":["SubRigPhysicsOutput","math","_decorator","ArrayExtensionMethods","CubismPhysics","CubismPhysicsInput","CubismPhysicsMath","CubismPhysicsNormalization","CubismPhysicsOutput","CubismPhysicsParticle","isImporter","MathExtensions","EDITOR","property","ccclass","Vec2","CubismPhysicsSubRig","type","serializable","rig","_rig","value","interpolate","weight","console","assert","controller","parameters","i","output","length","destination","findByIdFromParameters","destinationId","updateOutputParameterValue","_previousRigOutput","_currentRigOutput","parameter","parameterValue","translation","getScale","outputScale","minimumValue","valueBelowMinimum","maximumValue","valueExceededMaximum","maximumWeight","updateParticles","strand","totalTranslation","totalAngle","wind","thresholdValue","deltaTime","copyWith","position","totalRadian","degreesToRadian","currentGravity","radianToDirection","normalize","acceleration","force","add","multiplySingle","lastPosition","delay","direction","tmp","subtract","radian","directionToRadian","lastGravity","airResistance","x","Math","cos","y","sin","velocity","newDirection","radius","abs","divideSingle","mobility","ZERO","updateParticlesForStabilization","initialize","particles","gravity","initialPosition","clone","input","initializeGetter","evaluate","normalization","getNormalizedParameterValue","source","sourceId","index","indexOf","funcResult","parametersCache","angle","radAngle","movementThreshold","maximum","particleIndex","getValue","outputValue","stabilization","findIndex","_i","_a","result","constructor","args","Array","equals","other","strictEquals"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { math, _decorator } from 'cc';\r\nimport ArrayExtensionMethods from '../../Core/ArrayExtensionMethods';\r\nimport CubismPhysics from './CubismPhysics';\r\nimport CubismPhysicsInput from './CubismPhysicsInput';\r\nimport CubismPhysicsMath from './CubismPhysicsMath';\r\nimport CubismPhysicsNormalization from './CubismPhysicsNormalization';\r\nimport CubismPhysicsOutput from './CubismPhysicsOutput';\r\nimport CubismPhysicsParticle from './CubismPhysicsParticle';\r\nimport type CubismPhysicsRig from './CubismPhysicsRig';\r\nimport type CubismParameter from '../../Core/CubismParameter';\r\nimport type IStructLike from '../../IStructLike';\r\nimport { isImporter, MathExtensions } from '../../Utils';\r\nimport { EDITOR } from 'cc/env';\r\nconst { property, ccclass } = _decorator;\r\nconst { Vec2 } = MathExtensions;\r\n\r\n@ccclass('CubismPhysicsSubRig')\r\nexport default class CubismPhysicsSubRig {\r\n  @property({ type: [CubismPhysicsInput], serializable: true })\r\n  public input: Array<CubismPhysicsInput> = [];\r\n\r\n  @property({ type: [CubismPhysicsOutput], serializable: true })\r\n  public output: Array<CubismPhysicsOutput> = [];\r\n\r\n  @property({ type: [CubismPhysicsParticle], serializable: true })\r\n  public particles: Array<CubismPhysicsParticle> = [];\r\n\r\n  @property({ type: CubismPhysicsNormalization, serializable: true })\r\n  public normalization: CubismPhysicsNormalization | null = null;\r\n\r\n  @property({ serializable: false })\r\n  private _rig: CubismPhysicsRig | null = null;\r\n  public get rig() {\r\n    return this._rig;\r\n  }\r\n  public set rig(value: CubismPhysicsRig | null) {\r\n    this._rig = value;\r\n  }\r\n\r\n  @property({ serializable: false })\r\n  private _currentRigOutput: SubRigPhysicsOutput = new SubRigPhysicsOutput(); // Results of the latest pendulum calculation.\r\n\r\n  @property({ serializable: false })\r\n  private _previousRigOutput: SubRigPhysicsOutput = new SubRigPhysicsOutput(); // Result of previous pendulum calculation.\r\n\r\n  /**\r\n   * Applies the specified weights from the latest and one previous result of the pendulum operation.\r\n   * @param weight Weight of latest results.\r\n   */\r\n  public interpolate(weight: number): void {\r\n    //#region Assertion\r\n    const { rig } = this;\r\n    if (rig == null) {\r\n      console.assert(rig != null);\r\n      return;\r\n    }\r\n    const { controller } = rig;\r\n    if (controller == null) {\r\n      console.assert(controller != null);\r\n      return;\r\n    }\r\n    const { parameters } = controller;\r\n    if (parameters == null) {\r\n      console.assert(parameters != null);\r\n      return;\r\n    }\r\n    //#endregion\r\n\r\n    // Load input parameters.\r\n    for (let i = 0; i < this.output.length; i++) {\r\n      const output = this.output[i];\r\n      output.destination ??= ArrayExtensionMethods.findByIdFromParameters(\r\n        parameters,\r\n        output.destinationId ?? ''\r\n      );\r\n      if (output.destination == null) {\r\n        continue;\r\n      }\r\n      output.destination.value = this.updateOutputParameterValue(\r\n        output.destination,\r\n        output.destination.value,\r\n        this._previousRigOutput.output[i] * (1 - weight) +\r\n          this._currentRigOutput.output[i] * weight,\r\n        this.output[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates parameter from output value.\r\n   * @param parameter Target parameter.\r\n   * @param parameterValue Target parameter Value.\r\n   * @param translation Translation.\r\n   * @param output Output value.\r\n   * @returns Changed parameter value.\r\n   */\r\n  private updateOutputParameterValue(\r\n    parameter: CubismParameter,\r\n    parameterValue: number,\r\n    translation: number,\r\n    output: CubismPhysicsOutput\r\n  ): number {\r\n    //#region Assertion\r\n    if (output.getScale == null) {\r\n      console.assert(output.getScale != null);\r\n      return parameterValue;\r\n    }\r\n    //#endregion\r\n\r\n    const outputScale = output.getScale();\r\n\r\n    let value = translation * outputScale;\r\n\r\n    if (value < parameter.minimumValue) {\r\n      if (value < output.valueBelowMinimum) {\r\n        output.valueBelowMinimum = value;\r\n      }\r\n      value = parameter.minimumValue;\r\n    } else if (value > parameter.maximumValue) {\r\n      if (value > output.valueExceededMaximum) {\r\n        output.valueExceededMaximum = value;\r\n      }\r\n      value = parameter.maximumValue;\r\n    }\r\n\r\n    const weight = output.weight / CubismPhysics.maximumWeight;\r\n\r\n    if (weight >= 1.0) {\r\n      return value;\r\n    } else {\r\n      return parameterValue * (1.0 - weight) + value * weight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates particles in every frame.\r\n   * @param strand Particles.\r\n   * @param totalTranslation Total translation.\r\n   * @param totalAngle Total angle.\r\n   * @param wind Direction of wind.\r\n   * @param thresholdValue Value of threshold.\r\n   * @param deltaTime Time of delta.\r\n   */\r\n  private updateParticles(\r\n    strand: CubismPhysicsParticle[],\r\n    totalTranslation: math.Vec2,\r\n    totalAngle: number,\r\n    wind: math.Vec2,\r\n    thresholdValue: number,\r\n    deltaTime: number\r\n  ) {\r\n    strand[0] = strand[0].copyWith({ position: totalTranslation });\r\n\r\n    const totalRadian = CubismPhysicsMath.degreesToRadian(totalAngle);\r\n    const currentGravity = CubismPhysicsMath.radianToDirection(totalRadian);\r\n    currentGravity.normalize();\r\n\r\n    for (let i = 1; i < strand.length; i++) {\r\n      const { acceleration } = strand[i];\r\n      strand[i] = strand[i].copyWith({\r\n        force: Vec2.add(Vec2.multiplySingle(currentGravity, acceleration), wind),\r\n        lastPosition: strand[i].position,\r\n      });\r\n\r\n      // The Cubism Editor expects 30 FPS so we scale here by 30...\r\n      const delay = strand[i].delay * deltaTime * 30.0;\r\n\r\n      const direction = (() => {\r\n        const tmp = Vec2.subtract(strand[i].position, strand[i - 1].position);\r\n        const radian =\r\n          CubismPhysicsMath.directionToRadian(strand[i].lastGravity, currentGravity) /\r\n          CubismPhysics.airResistance;\r\n\r\n        const x = Math.cos(radian) * tmp.x - tmp.y * Math.sin(radian);\r\n        const y = Math.sin(radian) * x + tmp.y * Math.cos(radian);\r\n        return new math.Vec2(x, y);\r\n      })();\r\n\r\n      strand[i] = strand[i].copyWith({ position: Vec2.add(strand[i - 1].position, direction) });\r\n\r\n      const velocity = Vec2.multiplySingle(strand[i].velocity, delay);\r\n      const force = Vec2.multiplySingle(strand[i].force, delay * delay);\r\n\r\n      strand[i] = strand[i].copyWith({\r\n        position: Vec2.add(Vec2.add(strand[i].position, velocity), force),\r\n      });\r\n\r\n      const newDirection = Vec2.subtract(strand[i].position, strand[i - 1].position).normalize();\r\n\r\n      strand[i] = strand[i].copyWith({\r\n        position: Vec2.add(\r\n          strand[i - 1].position,\r\n          Vec2.multiplySingle(newDirection, strand[i].radius)\r\n        ),\r\n      });\r\n\r\n      if (Math.abs(strand[i].position.x) < thresholdValue) {\r\n        strand[i].position.x = 0.0;\r\n      }\r\n\r\n      if (delay != 0.0) {\r\n        strand[i] = strand[i].copyWith({\r\n          velocity: Vec2.multiplySingle(\r\n            Vec2.divideSingle(Vec2.subtract(strand[i].position, strand[i].lastPosition), delay),\r\n            strand[i].mobility\r\n          ),\r\n        });\r\n      }\r\n\r\n      strand[i] = strand[i].copyWith({ force: math.Vec2.ZERO, lastGravity: currentGravity });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates particles in stabilization function.\r\n   * @param strand Particles\r\n   * @param totalTranslation Total translation.\r\n   * @param totalAngle Total angle.\r\n   * @param wind Direction of wind.\r\n   * @param thresholdValue Value of threshold.\r\n   */\r\n  private updateParticlesForStabilization(\r\n    strand: CubismPhysicsParticle[],\r\n    totalTranslation: math.Vec2,\r\n    totalAngle: number, // float\r\n    wind: math.Vec2,\r\n    thresholdValue: number // float\r\n  ): void {\r\n    strand[0] = strand[0].copyWith({ position: totalTranslation });\r\n\r\n    const totalRadian = CubismPhysicsMath.degreesToRadian(totalAngle);\r\n    const currentGravity = CubismPhysicsMath.radianToDirection(totalRadian);\r\n    currentGravity.normalize();\r\n\r\n    for (let i = 1; i < strand.length; i++) {\r\n      strand[i] = strand[i].copyWith({\r\n        force: MathExtensions.Vec2.add(\r\n          MathExtensions.Vec2.multiplySingle(currentGravity, strand[i].acceleration),\r\n          wind\r\n        ),\r\n        lastPosition: strand[i].position,\r\n        velocity: math.Vec2.ZERO,\r\n      });\r\n\r\n      const force = strand[i].force;\r\n      force.normalize();\r\n\r\n      strand[i] = strand[i].copyWith({\r\n        position: MathExtensions.Vec2.add(\r\n          strand[i - 1].position,\r\n          MathExtensions.Vec2.multiplySingle(force, strand[i].radius)\r\n        ),\r\n      });\r\n\r\n      if (Math.abs(strand[i].position.x) < thresholdValue) {\r\n        strand[i] = strand[i].copyWith({ position: new math.Vec2(0.0, strand[i].position.y) });\r\n      }\r\n\r\n      strand[i] = strand[i].copyWith({ force: math.Vec2.ZERO, lastGravity: currentGravity });\r\n    }\r\n  }\r\n\r\n  /** Initializes this. */\r\n  public initialize(): void {\r\n    const strand = this.particles;\r\n\r\n    // Initialize the top of particle.\r\n    const gravity = this.rig?.gravity;\r\n    if (gravity == null) {\r\n      console.assert(gravity != null);\r\n      return;\r\n    }\r\n\r\n    strand[0] = strand[0].copyWith({\r\n      initialPosition: math.Vec2.ZERO.clone(),\r\n      lastPosition: math.Vec2.ZERO.clone(),\r\n      lastGravity: new math.Vec2(gravity.x, gravity.y * -1.0),\r\n    });\r\n\r\n    // Initialize particles.\r\n    for (let i = 1; i < strand.length; i++) {\r\n      const gravity = this.rig?.gravity;\r\n      if (gravity == null) {\r\n        console.assert(gravity != null);\r\n        return;\r\n      }\r\n\r\n      const radius = new math.Vec2(0, strand[i].radius);\r\n      const initialPosition = Vec2.add(strand[i - 1].initialPosition, radius);\r\n      const position = initialPosition.clone();\r\n      const lastPosition = initialPosition.clone();\r\n\r\n      strand[i] = strand[i].copyWith({\r\n        initialPosition: initialPosition,\r\n        position: position,\r\n        lastPosition: lastPosition,\r\n        lastGravity: new math.Vec2(gravity.x, gravity.y * -1.0),\r\n      });\r\n    }\r\n\r\n    // Initialize inputs.\r\n    for (let i = 0; i < this.input.length; i++) {\r\n      this.input[i].initializeGetter();\r\n    }\r\n\r\n    this._previousRigOutput = new SubRigPhysicsOutput();\r\n    this._currentRigOutput = new SubRigPhysicsOutput();\r\n\r\n    // Initialize outputs.\r\n    for (let i = 0; i < this.output.length; i++) {\r\n      this.output[i].initializeGetter();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate rig in every frame.\r\n   * @param deltaTime\r\n   */\r\n  public evaluate(deltaTime: number): void {\r\n    if (EDITOR && isImporter()) {\r\n      // Importer から呼び出されても処理を行いません。\r\n      return;\r\n    }\r\n\r\n    let totalAngle = 0.0;\r\n    let totalTranslation = math.Vec2.ZERO.clone();\r\n\r\n    const { rig, normalization, particles, _currentRigOutput, _previousRigOutput } = this;\r\n    if (rig == null || normalization == null) {\r\n      console.assert(rig != null);\r\n      console.assert(normalization != null);\r\n      return;\r\n    }\r\n    const { controller } = rig;\r\n    if (controller == null) {\r\n      console.assert(controller != null);\r\n      return;\r\n    }\r\n\r\n    const { parameters } = controller;\r\n    if (parameters == null) {\r\n      console.assert(parameters != null);\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.input.length; i++) {\r\n      const input = this.input[i];\r\n      const weight = input.weight / CubismPhysics.maximumWeight;\r\n\r\n      if (input.getNormalizedParameterValue == null) {\r\n        console.assert(input.getNormalizedParameterValue != null);\r\n        continue;\r\n      }\r\n\r\n      input.source ??= ArrayExtensionMethods.findByIdFromParameters(\r\n        parameters,\r\n        input.sourceId ?? ''\r\n      );\r\n\r\n      const parameter = input.source;\r\n      if (parameter == null) {\r\n        console.assert(parameter != null);\r\n        continue;\r\n      }\r\n      let index = parameters.indexOf(parameter);\r\n      const funcResult = input.getNormalizedParameterValue(\r\n        totalTranslation,\r\n        totalAngle,\r\n        parameter,\r\n        rig.parametersCache[index],\r\n        normalization,\r\n        weight\r\n      );\r\n      rig.parametersCache[index] = funcResult.parameterValue;\r\n      totalTranslation = funcResult.translation;\r\n      totalAngle = funcResult.angle;\r\n    }\r\n\r\n    const radAngle = CubismPhysicsMath.degreesToRadian(-totalAngle);\r\n\r\n    {\r\n      const x = totalTranslation.x * Math.cos(radAngle) - totalTranslation.y * Math.sin(radAngle);\r\n      const y = x * Math.sin(radAngle) + totalTranslation.y * Math.cos(radAngle);\r\n      totalTranslation = new math.Vec2(x, y);\r\n    }\r\n\r\n    this.updateParticles(\r\n      particles,\r\n      totalTranslation,\r\n      totalAngle,\r\n      rig.wind,\r\n      CubismPhysics.movementThreshold * normalization.position.maximum,\r\n      deltaTime\r\n    );\r\n\r\n    for (let i = 0; i < this.output.length; i++) {\r\n      const output = this.output[i];\r\n      const particleIndex = output.particleIndex;\r\n\r\n      if (particleIndex < 1 || particleIndex >= particles.length) {\r\n        break;\r\n      }\r\n\r\n      output.destination ??= ArrayExtensionMethods.findByIdFromParameters(\r\n        parameters,\r\n        output.destinationId ?? ''\r\n      );\r\n      const { destination } = output;\r\n      if (destination == null) {\r\n        console.assert(destination != null);\r\n        continue;\r\n      }\r\n\r\n      const index = parameters.indexOf(destination);\r\n\r\n      const translation = Vec2.subtract(\r\n        particles[particleIndex].position,\r\n        particles[particleIndex - 1].position\r\n      );\r\n\r\n      const parameter = destination;\r\n\r\n      if (output.getValue == null) {\r\n        console.assert(output.getValue != null);\r\n        return;\r\n      }\r\n\r\n      const outputValue = output.getValue(translation, particles, particleIndex, rig.gravity);\r\n\r\n      _currentRigOutput.output[i] = outputValue;\r\n      _previousRigOutput.output[i] = outputValue;\r\n\r\n      destination.value = this.updateOutputParameterValue(\r\n        parameter,\r\n        destination.value,\r\n        outputValue,\r\n        output\r\n      );\r\n\r\n      rig.parametersCache[index] = parameter.value;\r\n    }\r\n  }\r\n\r\n  /** Calculate the state in which the physics operation stabilizes at the current parameter values. */\r\n  public stabilization(): void {\r\n    //#region Assertion\r\n    const { rig, normalization, particles, _previousRigOutput, _currentRigOutput } = this;\r\n    if (rig == null || normalization == null) {\r\n      console.assert(rig != null);\r\n      console.assert(normalization != null);\r\n      return;\r\n    }\r\n    const { controller } = rig;\r\n    if (controller == null) {\r\n      console.assert(controller != null);\r\n      return;\r\n    }\r\n    const { parameters } = controller;\r\n    if (parameters == null) {\r\n      console.assert(parameters != null);\r\n      return;\r\n    }\r\n    //#endregion\r\n\r\n    let totalAngle = 0.0;\r\n    let totalTranslation = math.Vec2.ZERO;\r\n\r\n    for (let i = 0; i < this.input.length; i++) {\r\n      const input = this.input[i];\r\n\r\n      if (input.getNormalizedParameterValue == null) {\r\n        console.assert(input.getNormalizedParameterValue != null);\r\n        continue;\r\n      }\r\n\r\n      const weight = input.weight / CubismPhysics.maximumWeight;\r\n\r\n      input.source ??= ArrayExtensionMethods.findByIdFromParameters(\r\n        parameters,\r\n        input.sourceId ?? ''\r\n      );\r\n\r\n      const { source } = input;\r\n      if (source == null) {\r\n        console.assert(source != null);\r\n        continue;\r\n      }\r\n\r\n      const index = parameters.findIndex((value, _i, _a) => value === this.input[i].source);\r\n\r\n      const parameter = source;\r\n      const result = input.getNormalizedParameterValue(\r\n        totalTranslation,\r\n        totalAngle,\r\n        parameter,\r\n        source.value,\r\n        normalization,\r\n        weight\r\n      );\r\n      totalTranslation = result.translation;\r\n      totalAngle = result.angle;\r\n      source.value = result.parameterValue;\r\n\r\n      rig.parametersCache[index] = source.value;\r\n    }\r\n\r\n    const radAngle = CubismPhysicsMath.degreesToRadian(-totalAngle);\r\n\r\n    {\r\n      const x = totalTranslation.x * Math.cos(radAngle) - totalTranslation.y * Math.sin(radAngle);\r\n      const y = x * Math.sin(radAngle) + totalTranslation.y * Math.cos(radAngle);\r\n      totalTranslation = new math.Vec2(x, y);\r\n    }\r\n\r\n    this.updateParticlesForStabilization(\r\n      particles,\r\n      totalTranslation,\r\n      totalAngle,\r\n      rig.wind,\r\n      CubismPhysics.movementThreshold * normalization.position.maximum\r\n    );\r\n\r\n    for (let i = 0; i < this.output.length; i++) {\r\n      const output = this.output[i];\r\n      if (output.getValue == null) {\r\n        console.assert(output.getValue != null);\r\n        continue;\r\n      }\r\n\r\n      _previousRigOutput.output[i] = _currentRigOutput.output[i];\r\n\r\n      output.destination ??= ArrayExtensionMethods.findByIdFromParameters(\r\n        parameters,\r\n        output.destinationId ?? ''\r\n      );\r\n      if (output.destination == null) {\r\n        continue;\r\n      }\r\n\r\n      const { particleIndex } = output;\r\n      if (particleIndex < 1 || particleIndex >= this.particles.length) {\r\n        continue;\r\n      }\r\n\r\n      const index = parameters.indexOf(output.destination);\r\n\r\n      const translation = MathExtensions.Vec2.subtract(\r\n        particles[particleIndex].position,\r\n        particles[particleIndex - 1].position\r\n      );\r\n\r\n      const parameter = output.destination;\r\n      const outputValue = output.getValue(translation, particles, particleIndex, rig.gravity);\r\n\r\n      _currentRigOutput.output[i] = outputValue;\r\n      _previousRigOutput.output[i] = outputValue;\r\n      output.destination.value = this.updateOutputParameterValue(\r\n        parameter,\r\n        output.destination.value,\r\n        outputValue,\r\n        this.output[i]\r\n      );\r\n\r\n      rig.parametersCache[index] = output.destination.value;\r\n    }\r\n  }\r\n}\r\n\r\nclass SubRigPhysicsOutput implements IStructLike<SubRigPhysicsOutput> {\r\n  public readonly output: number[] = new Array(0);\r\n\r\n  public constructor(args: { output?: number[] } = {}) {\r\n    this.output = args.output ?? new Array<number>(0);\r\n  }\r\n\r\n  public copyWith(args: { output?: number[] } = {}): SubRigPhysicsOutput {\r\n    return new SubRigPhysicsOutput({ output: args.output ?? this.output });\r\n  }\r\n\r\n  public equals(other: SubRigPhysicsOutput): boolean {\r\n    return this === other || this.output == other.output;\r\n  }\r\n\r\n  strictEquals(other: SubRigPhysicsOutput): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n"]}