{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Json/JsonParseUtils.ts"],"names":["parse","value","JSON","isBoolean","isNumber","isString","isObject","asBoolean","undefined","asNumber","asString","asObject","asArray","Array","isArray","getBoolean","obj","key","Reflect","get","getNumber","getString","getObject","getArray","arrayedInstantiateFromJson","inData","func","outData","length","i","input","JsonParseUtils"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nnamespace JsonParseUtils {\r\n  export function parse(value: string) {\r\n    try {\r\n      return JSON.parse(value);\r\n    } catch {}\r\n    return null;\r\n  }\r\n  export function isBoolean(value: any): value is boolean {\r\n    return typeof value == 'boolean';\r\n  }\r\n  export function isNumber(value: any): value is number {\r\n    return typeof value == 'number';\r\n  }\r\n  export function isString(value: any): value is string {\r\n    return typeof value == 'string';\r\n  }\r\n  export function isObject(value: any): value is object {\r\n    return typeof value == 'object' && value != null;\r\n  }\r\n\r\n  export function asBoolean(value: any): boolean | undefined {\r\n    return isBoolean(value) ? value : undefined;\r\n  }\r\n  export function asNumber(value: any): number | undefined {\r\n    return isNumber(value) ? value : undefined;\r\n  }\r\n  export function asString(value: any): string | undefined {\r\n    return isString(value) ? value : undefined;\r\n  }\r\n  export function asObject(value: any): object | undefined {\r\n    return isObject(value) ? value : undefined;\r\n  }\r\n  export function asArray(value: any): any[] | undefined {\r\n    return Array.isArray(value) ? value : undefined;\r\n  }\r\n\r\n  export function getBoolean(obj: object, key: PropertyKey): boolean | undefined {\r\n    const value = Reflect.get(obj, key);\r\n    if (isBoolean(value)) {\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n  export function getNumber(obj: object, key: PropertyKey): number | undefined {\r\n    const value = Reflect.get(obj, key);\r\n    if (isNumber(value)) {\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n  export function getString(obj: object, key: PropertyKey): string | undefined {\r\n    const value = Reflect.get(obj, key);\r\n    if (isString(value)) {\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n  export function getObject(obj: object, key: PropertyKey): object | undefined {\r\n    const value = Reflect.get(obj, key);\r\n    if (isObject(value)) {\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n  export function getArray(obj: object, key: PropertyKey): any[] | undefined {\r\n    const value = Reflect.get(obj, key);\r\n    if (Array.isArray(value)) {\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n  export function arrayedInstantiateFromJson<T>(\r\n    inData: unknown,\r\n    func: (json: any) => T | undefined\r\n  ): T[] | undefined {\r\n    if (!Array.isArray(inData)) {\r\n      return undefined;\r\n    }\r\n    const outData = new Array<T>(inData.length);\r\n    for (let i = 0; i < inData.length; i++) {\r\n      const input = func(inData[i]);\r\n      if (input == null) {\r\n        return undefined;\r\n      }\r\n      outData[i] = input;\r\n    }\r\n    return outData;\r\n  }\r\n}\r\nexport default JsonParseUtils;\r\n"]}