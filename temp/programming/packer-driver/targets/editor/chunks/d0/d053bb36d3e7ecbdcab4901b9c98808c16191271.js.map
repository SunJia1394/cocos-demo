{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/CubismCore.ts"],"names":["Moc","Model","CanvasInfo","Parameters","Parts","Drawables","loadWasmBinary","wasmBinaryUuid","wasmBinary","EDITOR","bufferAsset","Promise","resolve","reject","assetManager","loadBundle","error","bundle","console","load","asset","undefined","Uint8Array","buffer","wasmFilePath","Editor","Message","request","info","Error","require","readFileSync","byteOffset","byteLength","loadCubismCoreModule","log","myModulePromiseCacheKey","Symbol","for","global","globalThis","modulePromise","index","Live2DCubismCoreModuleFactory","getCubismCoreVersionString","version","CubismCoreModule","_csmGetVersion","major","minor","patch","js","formatStr","slice","allocateMemory","size","ptr","Live2DCubismCore","_csm","malloc","HEAPU8","getVersion","getLatestMocVersion","_csmGetLatestMocVersion","getMocVersion","moc","_csmGetMocVersion","getSizeofModel","_csmGetSizeofModel","hasMocConsistency","memory","mocSize","_csmHasMocConsistency","reviveMocInPlace","_csmReviveMocInPlace","initializeModelInPlace","modelSize","_csmInitializeModelInPlace","getParameterCount","model","_csmGetParameterCount","getParameterIds","_csmGetParameterIds","getParameterMinimumValues","_csmGetParameterMinimumValues","getParameterMaximumValues","_csmGetParameterMaximumValues","getParameterDefaultValues","_csmGetParameterDefaultValues","getParameterValues","_csmGetParameterValues","getParameterKeyCounts","_csmGetParameterKeyCounts","getParameterKeyValues","_csmGetParameterKeyValues","getParameterTypes","_csmGetParameterTypes","getPartCount","_csmGetPartCount","getPartIds","_csmGetPartIds","getPartOpacities","_csmGetPartOpacities","getPartParentPartIndices","_csmGetPartParentPartIndices","getDrawableCount","_csmGetDrawableCount","getDrawableIds","_csmGetDrawableIds","getDrawableConstantFlags","_csmGetDrawableConstantFlags","getDrawableDynamicFlags","_csmGetDrawableDynamicFlags","getDrawableTextureIndices","_csmGetDrawableTextureIndices","getDrawableDrawOrders","_csmGetDrawableDrawOrders","getDrawableRenderOrders","_csmGetDrawableRenderOrders","getDrawableOpacities","_csmGetDrawableOpacities","getDrawableMaskCounts","_csmGetDrawableMaskCounts","getDrawableMasks","_csmGetDrawableMasks","getDrawableVertexCounts","_csmGetDrawableVertexCounts","getDrawableVertexPositions","_csmGetDrawableVertexPositions","getDrawableVertexUvs","_csmGetDrawableVertexUvs","getDrawableIndexCounts","_csmGetDrawableIndexCounts","getDrawableIndices","_csmGetDrawableIndices","getDrawableMultiplyColors","_csmGetDrawableMultiplyColors","getDrawableScreenColors","_csmGetDrawableScreenColors","getDrawableParentPartIndices","_csmGetDrawableParentPartIndices","mallocMoc","_csmMallocMoc","mallocModelAndInitialize","_csmMallocModelAndInitialize","_csmMalloc","setLogFunction","handler","_csmSetLogFunction","updateModel","_csmUpdateModel","readCanvasInfo","outSizeInPixels","outOriginInPixels","outPixelsPerUnit","_csmReadCanvasInfo","resetDrawableDynamicFlags","_csmResetDrawableDynamicFlags","free","_csmFree","AlignofMoc","AlignofModel","MocVersion_Unknown","MocVersion_30","MocVersion_33","MocVersion_40","MocVersion_42","MocVersion_50","ParameterType_Normal","ParameterType_BlendShape","csmGetVersion","csmGetLatestMocVersion","csmGetMocVersion","_ptr","Version","logFunction","csmSetLogFunction","pointer","addFunction","Logging","wrapLogFunction","csmGetLogFunction","messagePtr","messageStr","UTF8ToString","constructor","mocBytes","destination","set","hasConsistency","fromArrayBuffer","_release","parameters","_parameters","parts","_parts","drawables","_drawables","canvasinfo","_canvasinfo","mocPtr","fromMoc","update","release","CanvasWidth","CanvasHeight","CanvasOriginX","CanvasOriginY","PixelsPerUnit","canvasSizeDataSize","canvasOriginDataSize","canvasPPUDataSize","heap","Float32Array","BYTES_PER_ELEMENT","assert","canvasSizeData","canvasOriginData","canvasPPUData","count","ids","minimumValues","maximumValues","defaultValues","values","types","keyCounts","keyValues","Array","Uint32Array","HEAPU32","i","length","HEAPF32","Int32Array","HEAP32","modelPtr","opacities","parentIndices","_count","_ids","constantFlags","dynamicFlags","textureIndices","drawOrders","renderOrders","maskCounts","masks","vertexCounts","vertexPositions","vertexUvs","indexCounts","indices","multiplyColors","screenColors","parentPartIndices","_modelPtr","resetDynamicFlags","Uint16Array","HEAPU16","hasBlendAdditiveBit","bitfield","hasBlendMultiplicativeBit","hasIsDoubleSidedBit","hasIsInvertedMaskBit","hasIsVisibleBit","hasVisibilityDidChangeBit","hasOpacityDidChangeBit","hasDrawOrderDidChangeBit","hasRenderOrderDidChangeBit","hasVertexPositionsDidChangeBit","hasBlendColorDidChangeBit","Utils"],"mappings":";;;2HAuUaA,G,EAgEAC,K,EAiFAC,U,EAgEAC,U,EAkFAC,K,EAkCAC,S;;AAxnBb,iBAAeC,cAAf,CAA8BC,cAA9B,EAAsD;AACpD,QAAIC,UAAJ;;AACA,QAAI,CAACC,MAAL,EAAa;AACX,YAAMC,WAAW,GAAG,MAAM,IAAIC,OAAJ,CAAgC,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7EC,QAAAA,YAAY,CAACC,UAAb,CAAwB,6BAAxB,EAAuD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxE,cAAID,KAAJ,EAAW;AACTE,YAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,WAFD,MAEO;AACLC,YAAAA,MAAM,CAACE,IAAP,CAAyB,8BAAzB,EAAyD,CAACH,KAAD,EAAQI,KAAR,KAAkB;AACzE,kBAAIJ,KAAJ,EAAW;AACTE,gBAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACAH,gBAAAA,MAAM,CAAC,IAAD,CAAN;AACD,eAHD,MAGO;AACLD,gBAAAA,OAAO,CAACQ,KAAD,CAAP;AACD;AACF,aAPD;AAQD;AACF,SAbD;AAcD,OAfyB,CAA1B;AAgBAZ,MAAAA,UAAU,GAAGE,WAAW,IAAI,IAAf,GAAsBW,SAAtB,GAAkC,IAAIC,UAAJ,CAAeZ,WAAW,CAACa,MAAZ,EAAf,CAA/C;AACD,KAlBD,MAkBO;AACL,YAAMC,YAAY,GAAG,MAAMC,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuB,UAAvB,EAAmC,YAAnC,EAAiDpB,cAAjD,CAA3B;AACAW,MAAAA,OAAO,CAACU,IAAR,CAAc,iBAAgBJ,YAAa,EAA3C;;AACA,UAAI,CAACA,YAAL,EAAmB;AACjB,cAAM,IAAIK,KAAJ,CAAW,sCAAqCtB,cAAe,EAA/D,CAAN;AACD;;AACD,YAAMgB,MAAM,GAAGO,OAAO,CAAC,IAAD,CAAP,CAAcC,YAAd,CAA2BP,YAA3B,CAAf;;AACAhB,MAAAA,UAAU,GAAG,IAAIc,UAAJ,CAAeC,MAAM,CAACA,MAAtB,EAA8BA,MAAM,CAACS,UAArC,EAAiDT,MAAM,CAACU,UAAxD,CAAb;AACD;;AACD,WAAOzB,UAAP;AACD;;AAED,iBAAe0B,oBAAf,GAAsC;AAAA;;AAEpChB,IAAAA,OAAO,CAACiB,GAAR,CAAa,6BAAb;AAEA,UAAMC,uBAAuB,GAAGC,MAAM,CAACC,GAAP,CAAW,mCAAX,CAAhC;AACA,UAAMC,MAAM,GAAGC,UAAf;AAGA,UAAMC,aAAa,4BAAIF,MAAM,CAACH,uBAAD,CAAV,oCAAIG,MAAM,CAACH,uBAAD,CAAV,GAAwC,CAAC,YAAY;AACtE,YAAM7B,cAAc,GAAG,sCAAvB;AACA,YAAMC,UAAU,GAAG,MAAMF,cAAc,CAACC,cAAD,CAAvC;AACA,YAAMmC,KAAK,GAAG,MAAMC,6BAA6B,CAAC;AAAEnC,QAAAA;AAAF,OAAD,CAAjD;;AACA,UAAI,CAACkC,KAAL,EAAY;AACV,cAAM,IAAIb,KAAJ,CAAW,mDAAX,CAAN;AACD;;AACD,aAAOa,KAAP;AACD,KAR0D,GAA3D;AAUA,WAAO,MAAMD,aAAb;AACD,G,CAED;AACA;;;AAGO,WAASG,0BAAT,GAA8C;AACnD,UAAMC,OAAO,GAAGC,gBAAgB,CAACC,cAAjB,EAAhB;;AACA,UAAMC,KAAK,GAAG,CAACH,OAAO,GAAG,UAAX,KAA0B,EAAxC;AACA,UAAMI,KAAK,GAAG,CAACJ,OAAO,GAAG,UAAX,KAA0B,EAAxC;AACA,UAAMK,KAAK,GAAGL,OAAO,GAAG,UAAxB;AACA,WAAOM,EAAE,CAACC,SAAH,CACJ,qCADI,EAEL,CAAC,OAAOJ,KAAR,EAAeK,KAAf,CAAqB,CAAC,CAAtB,CAFK,EAGL,CAAC,OAAOJ,KAAR,EAAeI,KAAf,CAAqB,CAAC,CAAtB,CAHK,EAIL,CAAC,SAASH,KAAV,EAAiBG,KAAjB,CAAuB,CAAC,CAAxB,CAJK,CAAP;AAMD;;AA80BD,WAASC,cAAT,CAAwBC,IAAxB,EAAsC;AACpC,UAAMC,GAAG,GAAGC,gBAAgB,CAACC,IAAjB,CAAsBC,MAAtB,CAA6BJ,IAA7B,CAAZ;;AACA,QAAI,CAACC,GAAL,EAAU;AACR,aAAO,IAAP;AACD;;AACD,WAAO,IAAIlC,UAAJ,CAAewB,gBAAgB,CAACc,MAAjB,CAAwBrC,MAAvC,EAA+CiC,GAA/C,EAAoDD,IAApD,CAAP;AACD;;;gCA/1BeX,0B;;;;;;;;;;;;;;;;AAtEP9B,MAAAA,Y,OAAAA,Y;AAA2BqC,MAAAA,E,OAAAA,E;;AAC7BR,MAAAA,6B;;AACElC,MAAAA,M,UAAAA,M;;;;AATT;AACA;AACA;AACA;AACA;AACA;;;;;AAsEMqC,MAAAA,gB,GAAmB,MAAMZ,oBAAoB,E;AAenDhB,MAAAA,OAAO,CAACiB,GAAR,CAAYS,0BAA0B,EAAtC,E,CACA;;;;;;AAIW,mBAASiB,UAAT,GAA8B;AACnC,mBAAOf,gBAAgB,CAACC,cAAjB,EAAP;AACD;;;;AACM,mBAASe,mBAAT,GAAuC;AAC5C,mBAAOhB,gBAAgB,CAACiB,uBAAjB,EAAP;AACD;;;;AACM,mBAASC,aAAT,CAAuBC,GAAvB,EAA4C;AACjD,mBAAOnB,gBAAgB,CAACoB,iBAAjB,CAAmCD,GAAnC,CAAP;AACD;;;;AACM,mBAASE,cAAT,CAAwBF,GAAxB,EAA6C;AAClD,mBAAOnB,gBAAgB,CAACsB,kBAAjB,CAAoCH,GAApC,CAAP;AACD;;;;AACM,mBAASI,iBAAT,CAA2BC,MAA3B,EAAwCC,OAAxC,EAAiE;AACpE,mBAAOzB,gBAAgB,CAAC0B,qBAAjB,CAAuCF,MAAvC,EAA+CC,OAA/C,CAAP;AACH;;;AAAA;;AACM,mBAASE,gBAAT,CAA0BH,MAA1B,EAA6CC,OAA7C,EAA8D;AACnE,mBAAOzB,gBAAgB,CAAC4B,oBAAjB,CAAsCJ,MAAtC,EAA8CC,OAA9C,CAAP;AACD;;;;AACM,mBAASI,sBAAT,CAAgCV,GAAhC,EAA6CK,MAA7C,EAAgEM,SAAhE,EAAmF;AACxF,mBAAO9B,gBAAgB,CAAC+B,0BAAjB,CAA4CZ,GAA5C,EAAiDK,MAAjD,EAAyDM,SAAzD,CAAP;AACD;;;;AACM,mBAASE,iBAAT,CAA2BC,KAA3B,EAA4C;AACjD,mBAAOjC,gBAAgB,CAACkC,qBAAjB,CAAuCD,KAAvC,CAAP;AACD;;;;AACM,mBAASE,eAAT,CAAyBF,KAAzB,EAA0D;AAC/D,mBAAOjC,gBAAgB,CAACoC,mBAAjB,CAAqCH,KAArC,CAAP;AACD;;;;AACM,mBAASI,yBAAT,CAAmCJ,KAAnC,EAAmE;AACxE,mBAAOjC,gBAAgB,CAACsC,6BAAjB,CAA+CL,KAA/C,CAAP;AACD;;;;AACM,mBAASM,yBAAT,CAAmCN,KAAnC,EAAmE;AACxE,mBAAOjC,gBAAgB,CAACwC,6BAAjB,CAA+CP,KAA/C,CAAP;AACD;;;;AACM,mBAASQ,yBAAT,CAAmCR,KAAnC,EAAmE;AACxE,mBAAOjC,gBAAgB,CAAC0C,6BAAjB,CAA+CT,KAA/C,CAAP;AACD;;;;AACM,mBAASU,kBAAT,CAA4BV,KAA5B,EAA4D;AACjE,mBAAOjC,gBAAgB,CAAC4C,sBAAjB,CAAwCX,KAAxC,CAAP;AACD;;;;AACM,mBAASY,qBAAT,CAA+BZ,KAA/B,EAA6D;AAClE,mBAAOjC,gBAAgB,CAAC8C,yBAAjB,CAA2Cb,KAA3C,CAAP;AACD;;;;AACM,mBAASc,qBAAT,CAA+Bd,KAA/B,EAAuE;AAC5E,mBAAOjC,gBAAgB,CAACgD,yBAAjB,CAA2Cf,KAA3C,CAAP;AACD;;;;AACM,mBAASgB,iBAAT,CAA2BhB,KAA3B,EAA4C;AACjD,mBAAOjC,gBAAgB,CAACkD,qBAAjB,CAAuCjB,KAAvC,CAAP;AACD;;;;AACM,mBAASkB,YAAT,CAAsBlB,KAAtB,EAAuC;AAC5C,mBAAOjC,gBAAgB,CAACoD,gBAAjB,CAAkCnB,KAAlC,CAAP;AACD;;;;AACM,mBAASoB,UAAT,CAAoBpB,KAApB,EAAqD;AAC1D,mBAAOjC,gBAAgB,CAACsD,cAAjB,CAAgCrB,KAAhC,CAAP;AACD;;;;AACM,mBAASsB,gBAAT,CAA0BtB,KAA1B,EAA0D;AAC/D,mBAAOjC,gBAAgB,CAACwD,oBAAjB,CAAsCvB,KAAtC,CAAP;AACD;;;;AACM,mBAASwB,wBAAT,CAAkCxB,KAAlC,EAAgE;AACrE,mBAAOjC,gBAAgB,CAAC0D,4BAAjB,CAA8CzB,KAA9C,CAAP;AACD;;;;AACM,mBAAS0B,gBAAT,CAA0B1B,KAA1B,EAA2C;AAChD,mBAAOjC,gBAAgB,CAAC4D,oBAAjB,CAAsC3B,KAAtC,CAAP;AACD;;;;AACM,mBAAS4B,cAAT,CAAwB5B,KAAxB,EAAyD;AAC9D,mBAAOjC,gBAAgB,CAAC8D,kBAAjB,CAAoC7B,KAApC,CAAP;AACD;;;;AACM,mBAAS8B,wBAAT,CAAkC9B,KAAlC,EAAiE;AACtE,mBAAOjC,gBAAgB,CAACgE,4BAAjB,CAA8C/B,KAA9C,CAAP;AACD;;;;AACM,mBAASgC,uBAAT,CAAiChC,KAAjC,EAAgE;AACrE,mBAAOjC,gBAAgB,CAACkE,2BAAjB,CAA6CjC,KAA7C,CAAP;AACD;;;;AACM,mBAASkC,yBAAT,CAAmClC,KAAnC,EAAiE;AACtE,mBAAOjC,gBAAgB,CAACoE,6BAAjB,CAA+CnC,KAA/C,CAAP;AACD;;;;AACM,mBAASoC,qBAAT,CAA+BpC,KAA/B,EAA6D;AAClE,mBAAOjC,gBAAgB,CAACsE,yBAAjB,CAA2CrC,KAA3C,CAAP;AACD;;;;AACM,mBAASsC,uBAAT,CAAiCtC,KAAjC,EAA+D;AACpE,mBAAOjC,gBAAgB,CAACwE,2BAAjB,CAA6CvC,KAA7C,CAAP;AACD;;;;AACM,mBAASwC,oBAAT,CAA8BxC,KAA9B,EAA8D;AACnE,mBAAOjC,gBAAgB,CAAC0E,wBAAjB,CAA0CzC,KAA1C,CAAP;AACD;;;;AACM,mBAAS0C,qBAAT,CAA+B1C,KAA/B,EAA6D;AAClE,mBAAOjC,gBAAgB,CAAC4E,yBAAjB,CAA2C3C,KAA3C,CAAP;AACD;;;;AACM,mBAAS4C,gBAAT,CAA0B5C,KAA1B,EAA2C;AAChD,mBAAOjC,gBAAgB,CAAC8E,oBAAjB,CAAsC7C,KAAtC,CAAP;AACD;;;;AACM,mBAAS8C,uBAAT,CAAiC9C,KAAjC,EAA+D;AACpE,mBAAOjC,gBAAgB,CAACgF,2BAAjB,CAA6C/C,KAA7C,CAAP;AACD;;;;AACM,mBAASgD,0BAAT,CAAoChD,KAApC,EAAqD;AAC1D,mBAAOjC,gBAAgB,CAACkF,8BAAjB,CAAgDjD,KAAhD,CAAP;AACD;;;;AACM,mBAASkD,oBAAT,CAA8BlD,KAA9B,EAA+C;AACpD,mBAAOjC,gBAAgB,CAACoF,wBAAjB,CAA0CnD,KAA1C,CAAP;AACD;;;;AACM,mBAASoD,sBAAT,CAAgCpD,KAAhC,EAA8D;AACnE,mBAAOjC,gBAAgB,CAACsF,0BAAjB,CAA4CrD,KAA5C,CAAP;AACD;;;;AACM,mBAASsD,kBAAT,CAA4BtD,KAA5B,EAA6C;AAClD,mBAAOjC,gBAAgB,CAACwF,sBAAjB,CAAwCvD,KAAxC,CAAP;AACD;;;;AACM,mBAASwD,yBAAT,CAAmCxD,KAAnC,EAAoD;AACzD,mBAAOjC,gBAAgB,CAAC0F,6BAAjB,CAA+CzD,KAA/C,CAAP;AACD;;;;AACM,mBAAS0D,uBAAT,CAAiC1D,KAAjC,EAAkD;AACvD,mBAAOjC,gBAAgB,CAAC4F,2BAAjB,CAA6C3D,KAA7C,CAAP;AACD;;;;AACM,mBAAS4D,4BAAT,CAAsC5D,KAAtC,EAAuD;AAC5D,mBAAOjC,gBAAgB,CAAC8F,gCAAjB,CAAkD7D,KAAlD,CAAP;AACD;;;;AACM,mBAAS8D,SAAT,CAAmBtE,OAAnB,EAAoC;AACzC,mBAAOzB,gBAAgB,CAACgG,aAAjB,CAA+BvE,OAA/B,CAAP;AACD;;;;AACM,mBAASwE,wBAAT,CAAkC9E,GAAlC,EAAiD;AACtD,mBAAOnB,gBAAgB,CAACkG,4BAAjB,CAA8C/E,GAA9C,CAAP;AACD;;;;AACM,mBAASN,MAAT,CAAgBJ,IAAhB,EAA8B;AACnC,mBAAOT,gBAAgB,CAACmG,UAAjB,CAA4B1F,IAA5B,CAAP;AACD;;;;AACM,mBAAS2F,cAAT,CAAwBC,OAAxB,EAAsC;AAC3CrG,YAAAA,gBAAgB,CAACsG,kBAAjB,CAAoCD,OAApC;AACD;;;;AACM,mBAASE,WAAT,CAAqBtE,KAArB,EAAsC;AAC3CjC,YAAAA,gBAAgB,CAACwG,eAAjB,CAAiCvE,KAAjC;AACD;;;;AACM,mBAASwE,cAAT,CACLxE,KADK,EAELyE,eAFK,EAGLC,iBAHK,EAILC,gBAJK,EAKL;AACA5G,YAAAA,gBAAgB,CAAC6G,kBAAjB,CAAoC5E,KAApC,EAA2CyE,eAA3C,EAA4DC,iBAA5D,EAA+EC,gBAA/E;AACD;;;;AACM,mBAASE,yBAAT,CAAmC7E,KAAnC,EAAoD;AACzDjC,YAAAA,gBAAgB,CAAC+G,6BAAjB,CAA+C9E,KAA/C;AACD;;;;AACM,mBAAS+E,IAAT,CAAcxF,MAAd,EAAiC;AACtCxB,YAAAA,gBAAgB,CAACiH,QAAjB,CAA0BzF,MAA1B;AACD;;;WA/IcZ,I,KAAAA,I,qBAAAA,I,uBAAAA,I;;AAmJV,cAAMsG,UAAU,kCAAG,EAAnB;AAEA,cAAMC,YAAY,oCAAG,EAArB;AAEA,cAAMC,kBAAkB,0CAAG,CAA3B;AAEA,cAAMC,aAAa,qCAAG,CAAtB;AAEA,cAAMC,aAAa,qCAAG,CAAtB;AAEA,cAAMC,aAAa,qCAAG,CAAtB;AAEA,cAAMC,aAAa,qCAAG,CAAtB;AAEA,cAAMC,aAAa,qCAAG,CAAtB;AAEA,cAAMC,oBAAoB,4CAAG,CAA7B;AAEA,cAAMC,wBAAwB,gDAAG,CAAjC;;;;AAQE,mBAASC,aAAT,GAAyB;AAC9B,mBAAOjH,gBAAgB,CAACC,IAAjB,CAAsBG,UAAtB,EAAP;AACD;;;;AAOM,mBAAS8G,sBAAT,GAAkC;AACvC,mBAAOlH,gBAAgB,CAACC,IAAjB,CAAsBI,mBAAtB,EAAP;AACD;;;;AASM,mBAAS8G,gBAAT,CAA0B3G,GAA1B,EAAoC;AACzC,mBAAOR,gBAAgB,CAACC,IAAjB,CAAsBM,aAAtB,CAAoCC,GAAG,CAAC4G,IAAxC,CAAP;AACD;;;WA5BcC,O,KAAAA,O,qBAAAA,O,uBAAAA,O;;;;;AAgCf,cAAIC,WAA+C,GAAG,IAAtD;AAEA;AACJ;AACA;AACA;AACA;;AACW,mBAASC,iBAAT,CAA2B7B,OAA3B,EAAwE;AAC7E;AACA4B,YAAAA,WAAW,GAAG5B,OAAd,CAF6E,CAG7E;;AACA,kBAAM8B,OAAO,GAAGnI,gBAAgB,CAACoI,WAAjB,CAA6BC,OAAO,CAACC,eAArC,EAAsD,IAAtD,CAAhB,CAJ6E,CAK7E;;AACA1H,YAAAA,IAAI,CAACwF,cAAL,CAAoB+B,OAApB;AACD;;;;AAOM,mBAASI,iBAAT,GAAiE;AACtE,mBAAON,WAAP;AACD;;;;AAEM,mBAASK,eAAT,CAAyBE,UAAzB,EAA0C;AAC/C;AACA,gBAAIC,UAAU,GAAGzI,gBAAgB,CAAC0I,YAAjB,CAA8BF,UAA9B,CAAjB,CAF+C,CAG/C;;AACAP,YAAAA,WAAW,QAAX,YAAAA,WAAW,CAAGQ,UAAH,CAAX;AACD;;;WA/BcJ,O,KAAAA,O,qBAAAA,O,uBAAAA,O;SAvMF1H,gB,gCAAAA,gB;;qBA0OJzD,G,GAAN,MAAMA,GAAN,CAAU;AAED,YAAHwD,GAAG,GAAW;AACvB,iBAAO,KAAKqH,IAAZ;AACD;;AACOY,QAAAA,WAAW,CAACjI,GAAD,EAAc;AAAA,eAJzBqH,IAIyB,GAJV,CAIU;AAC/B,eAAKA,IAAL,GAAYrH,GAAZ;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AACiC,eAAjBa,iBAAiB,CAAEqH,QAAF,EAAwC;AACnE;AACA,cAAIpH,MAAM,GAAGb,gBAAgB,CAACC,IAAjB,CAAsBmF,SAAtB,CAAgC6C,QAAQ,CAACzJ,UAAzC,CAAb;;AACA,cAAI,CAACqC,MAAL,EAAa;AACT,mBAAO,IAAP;AACH,WALkE,CAMnE;;;AACA,cAAIqH,WAAW,GAAG,IAAIrK,UAAJ,CAAewB,gBAAgB,CAACc,MAAjB,CAAwBrC,MAAvC,EAA+C+C,MAA/C,EAAuDoH,QAAQ,CAACzJ,UAAhE,CAAlB;AACA0J,UAAAA,WAAW,CAACC,GAAZ,CAAgB,IAAItK,UAAJ,CAAeoK,QAAf,CAAhB;;AACA,cAAIG,cAAc,GAAGpI,gBAAgB,CAACC,IAAjB,CAAsBW,iBAAtB,CAAwCC,MAAxC,EAAgDoH,QAAQ,CAACzJ,UAAzD,CAArB;;AACAwB,UAAAA,gBAAgB,CAACC,IAAjB,CAAsBoG,IAAtB,CAA2BxF,MAA3B;;AACA,iBAAOuH,cAAP;AACH;AACD;AACF;AACA;AACA;AACA;;;AAC+B,eAAfC,eAAe,CAACJ,QAAD,EAAoC;AAC/D;AACA,gBAAMpH,MAAM,GAAGb,gBAAgB,CAACC,IAAjB,CAAsBmF,SAAtB,CAAgC6C,QAAQ,CAACzJ,UAAzC,CAAf;;AACA,cAAI,CAACqC,MAAL,EAAa;AACX,mBAAO,IAAP;AACD,WAL8D,CAM/D;;;AACA,gBAAMqH,WAAW,GAAG,IAAIrK,UAAJ,CAAewB,gBAAgB,CAACc,MAAjB,CAAwBrC,MAAvC,EAA+C+C,MAA/C,EAAuDoH,QAAQ,CAACzJ,UAAhE,CAApB;AACA0J,UAAAA,WAAW,CAACC,GAAZ,CAAgB,IAAItK,UAAJ,CAAeoK,QAAf,CAAhB,EAR+D,CAU/D;;AACA,gBAAMlI,GAAG,GAAGC,gBAAgB,CAACC,IAAjB,CAAsBe,gBAAtB,CAAuCH,MAAvC,EAA+CoH,QAAQ,CAACzJ,UAAxD,CAAZ;;AACA,cAAI,CAACuB,GAAL,EAAU;AACRtC,YAAAA,OAAO,CAACiB,GAAR,CAAYuJ,QAAZ;;AACAjI,YAAAA,gBAAgB,CAACC,IAAjB,CAAsBoG,IAAtB,CAA2BxF,MAA3B;;AACA,mBAAO,IAAP;AACD;;AACD,iBAAO,IAAItE,GAAJ,CAAQwD,GAAR,CAAP;AACD;AACD;;;AACOuI,QAAAA,QAAQ,GAAG;AAChBtI,UAAAA,gBAAgB,CAACC,IAAjB,CAAsBoG,IAAtB,CAA2B,KAAKe,IAAhC;;AACA,eAAKA,IAAL,GAAY,CAAZ;AACD;;AAxDc,O;AA2DjB;AACA;AACA;AACA;AACA;;;uBACa5K,K,GAAN,MAAMA,KAAN,CAAY;AAEjB;AACqB,YAAV+L,UAAU,GAAG;AACtB,iBAAO,KAAKC,WAAZ;AACD;;AAGD;AACgB,YAALC,KAAK,GAAG;AACjB,iBAAO,KAAKC,MAAZ;AACD;;AAGD;AACoB,YAATC,SAAS,GAAG;AACrB,iBAAO,KAAKC,UAAZ;AACD;;AAGD;AACqB,YAAVC,UAAU,GAAG;AACtB,iBAAO,KAAKC,WAAZ;AACD;;AAGa,YAAH/I,GAAG,GAAW;AACvB,iBAAO,KAAKqH,IAAZ;AACD;;AAEOY,QAAAA,WAAW,CACjBe,MADiB,EAEjBR,UAFiB,EAGjBE,KAHiB,EAIjBE,SAJiB,EAKjBE,UALiB,EAMjB;AAAA,eAnCML,WAmCN;AAAA,eA7BME,MA6BN;AAAA,eAvBME,UAuBN;AAAA,eAjBME,WAiBN;AAAA,eAXM1B,IAWN,GAXqB,CAWrB;AACA,eAAKA,IAAL,GAAY2B,MAAZ;AACA,eAAKP,WAAL,GAAmBD,UAAnB;AACA,eAAKG,MAAL,GAAcD,KAAd;AACA,eAAKG,UAAL,GAAkBD,SAAlB;AACA,eAAKG,WAAL,GAAmBD,UAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACuB,eAAPG,OAAO,CAACxI,GAAD,EAAyB;AAC5C,gBAAMT,GAAG,GAAGC,gBAAgB,CAACC,IAAjB,CAAsBqF,wBAAtB,CAA+C9E,GAAG,CAACT,GAAnD,CAAZ;;AACA,cAAI,CAACA,GAAL,EAAU;AACR,mBAAO,IAAP;AACD;;AACD,gBAAMwI,UAAU,GAAG,IAAI7L,UAAJ,CAAeqD,GAAf,CAAnB;AACA,gBAAM0I,KAAK,GAAG,IAAI9L,KAAJ,CAAUoD,GAAV,CAAd;AACA,gBAAM4I,SAAS,GAAG,IAAI/L,SAAJ,CAAcmD,GAAd,CAAlB;AACA,gBAAM8I,UAAU,GAAG,IAAIpM,UAAJ,CAAesD,GAAf,CAAnB;AAEA,gBAAMuB,KAAK,GAAG,IAAI9E,KAAJ,CAAUuD,GAAV,EAAewI,UAAf,EAA2BE,KAA3B,EAAkCE,SAAlC,EAA6CE,UAA7C,CAAd;AACA,iBAAOvH,KAAP;AACD;AAED;;;AACO2H,QAAAA,MAAM,GAAG;AACdjJ,UAAAA,gBAAgB,CAACC,IAAjB,CAAsB2F,WAAtB,CAAkC,KAAKwB,IAAvC;AACD;AAED;;;AACO8B,QAAAA,OAAO,GAAG;AACflJ,UAAAA,gBAAgB,CAACC,IAAjB,CAAsBoG,IAAtB,CAA2B,KAAKe,IAAhC;;AACA,eAAKA,IAAL,GAAY,CAAZ;AACD;;AAzEgB,O;AA4EnB;AACA;AACA;AACA;AACA;;;4BACa3K,U,GAAN,MAAMA,UAAN,CAAiB;AAYfuL,QAAAA,WAAW,CAACjI,GAAD,EAAgB;AAXlC;AAWkC,eAVlCoJ,WAUkC,GAVZ,CAUY;;AATlC;AASkC,eARlCC,YAQkC,GARX,CAQW;;AAPlC;AAOkC,eANlCC,aAMkC,GANV,CAMU;;AALlC;AAKkC,eAJlCC,aAIkC,GAJV,CAIU;;AAHlC;AAGkC,eAFlCC,aAEkC,GAFV,CAEU;;AAChC,cAAI,CAACxJ,GAAL,EAAU;AACR;AACD,WAH+B,CAIhC;;;AACA,gBAAMyJ,kBAAkB,GAAG,CAA3B;AACA,gBAAMC,oBAAoB,GAAG,CAA7B;AACA,gBAAMC,iBAAiB,GAAG,CAA1B;AACA,gBAAMC,IAAI,GAAG9J,cAAc,CACzB+J,YAAY,CAACC,iBAAb,IACGL,kBAAkB,GAAGC,oBAArB,GAA4CC,iBAD/C,CADyB,CAA3B;;AAKA,cAAI,CAACC,IAAL,EAAW;AACTlM,YAAAA,OAAO,CAACqM,MAAR,CAAe,CAACH,IAAhB;AACA;AACD;;AAED,gBAAMI,cAAc,GAAG,IAAIH,YAAJ,CAAiBD,IAAI,CAAC7L,MAAtB,EAA8B6L,IAAI,CAACpL,UAAnC,EAA+CiL,kBAA/C,CAAvB;AACA,gBAAMQ,gBAAgB,GAAG,IAAIJ,YAAJ,CACvBD,IAAI,CAAC7L,MADkB,EAEvB6L,IAAI,CAACpL,UAAL,GAAkBwL,cAAc,CAACvL,UAFV,EAGvBiL,oBAHuB,CAAzB;AAKA,gBAAMQ,aAAa,GAAG,IAAIL,YAAJ,CACpBD,IAAI,CAAC7L,MADe,EAEpBkM,gBAAgB,CAACzL,UAAjB,GAA8ByL,gBAAgB,CAACxL,UAF3B,EAGpBkL,iBAHoB,CAAtB,CAxBgC,CA8BhC;;AACA1J,UAAAA,gBAAgB,CAACC,IAAjB,CAAsB6F,cAAtB,CACE/F,GADF,EAEEgK,cAAc,CAACxL,UAFjB,EAGEyL,gBAAgB,CAACzL,UAHnB,EAIE0L,aAAa,CAAC1L,UAJhB;;AAMA,eAAK4K,WAAL,GAAmBY,cAAc,CAAC,CAAD,CAAjC;AACA,eAAKX,YAAL,GAAoBW,cAAc,CAAC,CAAD,CAAlC;AACA,eAAKV,aAAL,GAAqBW,gBAAgB,CAAC,CAAD,CAArC;AACA,eAAKV,aAAL,GAAqBU,gBAAgB,CAAC,CAAD,CAArC;AACA,eAAKT,aAAL,GAAqBU,aAAa,CAAC,CAAD,CAAlC,CAzCgC,CA0ChC;;AACAjK,UAAAA,gBAAgB,CAACC,IAAjB,CAAsBoG,IAAtB,CAA2BsD,IAAI,CAACpL,UAAhC;AACD;;AAxDqB,O;AA2DxB;AACA;AACA;AACA;AACA;;;4BACa7B,U,GAAN,MAAMA,UAAN,CAAiB;AAoBfsL,QAAAA,WAAW,CAACjI,GAAD,EAAgB;AAnBlC;AAmBkC,eAlBlBmK,KAkBkB;;AAjBlC;AAiBkC,eAhBlBC,GAgBkB;;AAflC;AAekC,eAdlBC,aAckB;;AAblC;AAakC,eAZlBC,aAYkB;;AAXlC;AAWkC,eAVlBC,aAUkB;;AATlC;AASkC,eAR3BC,MAQ2B;;AAPlC;AAOkC,eANlBC,KAMkB;;AALlC;AAKkC,eAJlBC,SAIkB;;AAHlC;AAGkC,eAFlBC,SAEkB;;AAChC,gBAAMR,KAAK,GAAGlK,gBAAgB,CAACC,IAAjB,CAAsBoB,iBAAtB,CAAwCtB,GAAxC,CAAd;;AACA,eAAKmK,KAAL,GAAaA,KAAb;AACA,eAAKC,GAAL,GAAW,IAAIQ,KAAJ,CAAUT,KAAV,CAAX;AACA,gBAAMC,GAAG,GAAG,IAAIS,WAAJ,CACVvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADf,EAEVkC,gBAAgB,CAACC,IAAjB,CAAsBuB,eAAtB,CAAsCzB,GAAtC,CAFU,EAGVmK,KAHU,CAAZ;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAAG,CAACY,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,iBAAKX,GAAL,CAASW,CAAT,IAAczL,gBAAgB,CAAC0I,YAAjB,CAA8BoC,GAAG,CAACW,CAAD,CAAjC,CAAd;AACD;;AACD,eAAKV,aAAL,GAAqB,IAAIR,YAAJ,CACnBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADN,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsByB,yBAAtB,CAAgD3B,GAAhD,CAFmB,EAGnBmK,KAHmB,CAArB;AAKA,eAAKG,aAAL,GAAqB,IAAIT,YAAJ,CACnBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADN,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsB2B,yBAAtB,CAAgD7B,GAAhD,CAFmB,EAGnBmK,KAHmB,CAArB;AAKA,eAAKI,aAAL,GAAqB,IAAIV,YAAJ,CACnBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADN,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsB6B,yBAAtB,CAAgD/B,GAAhD,CAFmB,EAGnBmK,KAHmB,CAArB;AAKA,eAAKK,MAAL,GAAc,IAAIX,YAAJ,CACZvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADb,EAEZkC,gBAAgB,CAACC,IAAjB,CAAsB+B,kBAAtB,CAAyCjC,GAAzC,CAFY,EAGZmK,KAHY,CAAd;AAKA,eAAKM,KAAL,GAAa,IAAIS,UAAJ,CACX5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADb,EAEXkC,gBAAgB,CAACC,IAAjB,CAAsBqC,iBAAtB,CAAwCvC,GAAxC,CAFW,EAGXmK,KAHW,CAAb;AAMA,gBAAMO,SAAS,GAAG,IAAIQ,UAAJ,CAChB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADR,EAEhBkC,gBAAgB,CAACC,IAAjB,CAAsBiC,qBAAtB,CAA4CnC,GAA5C,CAFgB,EAGhBmK,KAHgB,CAAlB;AAKA,eAAKO,SAAL,GAAiBA,SAAjB;AAEA,eAAKC,SAAL,GAAiB,IAAIC,KAAJ,CAAUT,KAAV,CAAjB;AACA,gBAAMQ,SAAS,GAAG,IAAIE,WAAJ,CAChBvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADT,EAEhBkC,gBAAgB,CAACC,IAAjB,CAAsBmC,qBAAtB,CAA4CrC,GAA5C,CAFgB,EAGhBmK,KAHgB,CAAlB;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,iBAAKJ,SAAL,CAAeI,CAAf,IAAoB,IAAIlB,YAAJ,CAAiBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MAA1C,EAAkD4M,SAAS,CAACI,CAAD,CAA3D,EAAgEL,SAAS,CAACK,CAAD,CAAzE,CAApB;AACD;AACF;;AA1EqB,O;AA6ExB;AACA;AACA;AACA;AACA;;;uBACanO,K,GAAN,MAAMA,KAAN,CAAY;AASjBqL,QAAAA,WAAW,CAACmD,QAAD,EAAgB;AAR3B;AAQ2B,eAP3BjB,KAO2B;;AAN3B;AAM2B,eAL3BC,GAK2B;;AAJ3B;AAI2B,eAH3BiB,SAG2B;;AAF3B;AAE2B,eAD3BC,aAC2B;;AACzB,gBAAMC,MAAM,GAAGtL,gBAAgB,CAACC,IAAjB,CAAsBuC,YAAtB,CAAmC2I,QAAnC,CAAf;;AACA,eAAKjB,KAAL,GAAaoB,MAAb;AACA,eAAKnB,GAAL,GAAW,IAAIQ,KAAJ,CAAUW,MAAV,CAAX;;AACA,gBAAMC,IAAI,GAAG,IAAIX,WAAJ,CACXvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADd,EAEXkC,gBAAgB,CAACC,IAAjB,CAAsByC,UAAtB,CAAiCyI,QAAjC,CAFW,EAGXG,MAHW,CAAb;;AAKA,eAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,IAAI,CAACR,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,iBAAKX,GAAL,CAASW,CAAT,IAAczL,gBAAgB,CAAC0I,YAAjB,CAA8BwD,IAAI,CAACT,CAAD,CAAlC,CAAd;AACD;;AACD,eAAKM,SAAL,GAAiB,IAAIxB,YAAJ,CACfvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADV,EAEfkC,gBAAgB,CAACC,IAAjB,CAAsB2C,gBAAtB,CAAuCuI,QAAvC,CAFe,EAGfG,MAHe,CAAjB;AAKA,eAAKD,aAAL,GAAqB,IAAIJ,UAAJ,CACnB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADL,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsB6C,wBAAtB,CAA+CqI,QAA/C,CAFmB,EAGnBG,MAHmB,CAArB;AAKD;;AA/BgB,O;;2BAkCN1O,S,GAAN,MAAMA,SAAN,CAAgB;AAyCdoL,QAAAA,WAAW,CAACmD,QAAD,EAAgB;AAxClC;AAwCkC,eAvClBjB,KAuCkB;;AAtClC;AAsCkC,eArClBC,GAqCkB;;AApClC;AAoCkC,eAnClBqB,aAmCkB;;AAlClC;AAkCkC,eAjClBC,YAiCkB;;AAhClC;AAgCkC,eA/BlBC,cA+BkB;;AA9BlC;AA8BkC,eA7BlBC,UA6BkB;;AA5BlC;AA4BkC,eA3BlBC,YA2BkB;;AA1BlC;AA0BkC,eAzBlBR,SAyBkB;;AAxBlC;AAwBkC,eAvBlBS,UAuBkB;;AAtBlC;AAsBkC,eArBlBC,KAqBkB;;AApBlC;AAoBkC,eAnBlBC,YAmBkB;;AAlBlC;AAkBkC,eAjBlBC,eAiBkB;;AAhBlC;AAgBkC,eAflBC,SAekB;;AAdlC;AAckC,eAblBC,WAakB;;AAZlC;AAYkC,eAXlBC,OAWkB;;AAVlC;AAUkC,eATlBC,cASkB;;AARlC;AAQkC,eAPlBC,YAOkB;;AANlC;AAMkC,eALlBC,iBAKkB;;AAHlC;AAGkC,eAF1BC,SAE0B;;AA0HlC;AA1HkC,eA2H3BC,iBA3H2B,GA2HP,MAAM;AAC/BxM,YAAAA,gBAAgB,CAACC,IAAjB,CAAsBkG,yBAAtB,CAAgD,KAAKoG,SAArD;AACD,WA7HiC;;AAChC,eAAKA,SAAL,GAAiBpB,QAAjB;;AACA,gBAAMjB,KAAK,GAAGlK,gBAAgB,CAACC,IAAjB,CAAsB+C,gBAAtB,CAAuCmI,QAAvC,CAAd;;AACA,eAAKjB,KAAL,GAAaA,KAAb;AACA,eAAKC,GAAL,GAAW,IAAIQ,KAAJ,CAAUT,KAAV,CAAX;AACA,gBAAMC,GAAG,GAAG,IAAIS,WAAJ,CACVvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADf,EAEVkC,gBAAgB,CAACC,IAAjB,CAAsBiD,cAAtB,CAAqCiI,QAArC,CAFU,EAGVjB,KAHU,CAAZ;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAAG,CAACY,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,iBAAKX,GAAL,CAASW,CAAT,IAAczL,gBAAgB,CAAC0I,YAAjB,CAA8BoC,GAAG,CAACW,CAAD,CAAjC,CAAd;AACD;;AACD,eAAKU,aAAL,GAAqB,IAAI3N,UAAJ,CACnBwB,gBAAgB,CAACc,MAAjB,CAAwBrC,MADL,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsBmD,wBAAtB,CAA+C+H,QAA/C,CAFmB,EAGnBjB,KAHmB,CAArB;AAKA,eAAKuB,YAAL,GAAoB,IAAI5N,UAAJ,CAClBwB,gBAAgB,CAACc,MAAjB,CAAwBrC,MADN,EAElBkC,gBAAgB,CAACC,IAAjB,CAAsBqD,uBAAtB,CAA8C6H,QAA9C,CAFkB,EAGlBjB,KAHkB,CAApB;AAKA,eAAKwB,cAAL,GAAsB,IAAIT,UAAJ,CACpB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADJ,EAEpBkC,gBAAgB,CAACC,IAAjB,CAAsBuD,yBAAtB,CAAgD2H,QAAhD,CAFoB,EAGpBjB,KAHoB,CAAtB;AAKA,eAAKyB,UAAL,GAAkB,IAAIV,UAAJ,CAChB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADR,EAEhBkC,gBAAgB,CAACC,IAAjB,CAAsByD,qBAAtB,CAA4CyH,QAA5C,CAFgB,EAGhBjB,KAHgB,CAAlB;AAKA,eAAK0B,YAAL,GAAoB,IAAIX,UAAJ,CAClB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADN,EAElBkC,gBAAgB,CAACC,IAAjB,CAAsB2D,uBAAtB,CAA8CuH,QAA9C,CAFkB,EAGlBjB,KAHkB,CAApB;AAKA,eAAKkB,SAAL,GAAiB,IAAIxB,YAAJ,CACfvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADV,EAEfkC,gBAAgB,CAACC,IAAjB,CAAsB6D,oBAAtB,CAA2CqH,QAA3C,CAFe,EAGfjB,KAHe,CAAjB;AAKA,gBAAM2B,UAAU,GAAG,IAAIZ,UAAJ,CACjB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADP,EAEjBkC,gBAAgB,CAACC,IAAjB,CAAsB+D,qBAAtB,CAA4CmH,QAA5C,CAFiB,EAGjBjB,KAHiB,CAAnB;AAKA,eAAK2B,UAAL,GAAkBA,UAAlB;AACA,gBAAME,YAAY,GAAG,IAAId,UAAJ,CACnB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADL,EAEnBkC,gBAAgB,CAACC,IAAjB,CAAsBmE,uBAAtB,CAA8C+G,QAA9C,CAFmB,EAGnBjB,KAHmB,CAArB;AAKA,eAAK6B,YAAL,GAAoBA,YAApB;AACA,gBAAMG,WAAW,GAAG,IAAIjB,UAAJ,CAClB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADN,EAElBkC,gBAAgB,CAACC,IAAjB,CAAsByE,sBAAtB,CAA6CyG,QAA7C,CAFkB,EAGlBjB,KAHkB,CAApB;AAKA,eAAKgC,WAAL,GAAmBA,WAAnB;AAEA,eAAKJ,KAAL,GAAa,IAAInB,KAAJ,CAAUT,KAAV,CAAb;AACA,cAAI4B,KAAK,GAAG,IAAIlB,WAAJ,CACVvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADf,EAEVkC,gBAAgB,CAACC,IAAjB,CAAsBiE,gBAAtB,CAAuCiH,QAAvC,CAFU,EAGVjB,KAHU,CAAZ;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,KAAK,CAACf,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,iBAAKgB,KAAL,CAAWhB,CAAX,IAAgB,IAAIG,UAAJ,CAAe5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MAAvC,EAA+CgO,KAAK,CAAChB,CAAD,CAApD,EAAyDe,UAAU,CAACf,CAAD,CAAnE,CAAhB;AACD;;AACD,eAAKkB,eAAL,GAAuB,IAAIrB,KAAJ,CAAUT,KAAV,CAAvB;AACA,cAAI8B,eAAe,GAAG,IAAIpB,WAAJ,CACpBvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADL,EAEpBkC,gBAAgB,CAACC,IAAjB,CAAsBqE,0BAAtB,CAAiD6G,QAAjD,CAFoB,EAGpBjB,KAHoB,CAAtB;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,eAAe,CAACjB,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,iBAAKkB,eAAL,CAAqBlB,CAArB,IAA0B,IAAIlB,YAAJ,CACxBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADD,EAExBkO,eAAe,CAAClB,CAAD,CAFS,EAGxBiB,YAAY,CAACjB,CAAD,CAAZ,GAAkB,CAHM,CAA1B;AAKD;;AACD,eAAKmB,SAAL,GAAiB,IAAItB,KAAJ,CAAUT,KAAV,CAAjB;AACA,cAAI+B,SAAS,GAAG,IAAIrB,WAAJ,CACdvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADX,EAEdkC,gBAAgB,CAACC,IAAjB,CAAsBuE,oBAAtB,CAA2C2G,QAA3C,CAFc,EAGdjB,KAHc,CAAhB;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,SAAS,CAAClB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,iBAAKmB,SAAL,CAAenB,CAAf,IAAoB,IAAIlB,YAAJ,CAClBvK,gBAAgB,CAAC2L,OAAjB,CAAyBlN,MADP,EAElBmO,SAAS,CAACnB,CAAD,CAFS,EAGlBiB,YAAY,CAACjB,CAAD,CAAZ,GAAkB,CAHA,CAApB;AAKD;;AACD,eAAKqB,OAAL,GAAe,IAAIxB,KAAJ,CAAUT,KAAV,CAAf;AACA,cAAIiC,OAAO,GAAG,IAAIvB,WAAJ,CACZvL,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADb,EAEZkC,gBAAgB,CAACC,IAAjB,CAAsB2E,kBAAtB,CAAyCuG,QAAzC,CAFY,EAGZjB,KAHY,CAAd;;AAKA,eAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,OAAO,CAACpB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,iBAAKqB,OAAL,CAAarB,CAAb,IAAkB,IAAI2B,WAAJ,CAAgBpN,gBAAgB,CAACqN,OAAjB,CAAyB5O,MAAzC,EAAiDqO,OAAO,CAACrB,CAAD,CAAxD,EAA6DoB,WAAW,CAACpB,CAAD,CAAxE,CAAlB;AACD;;AACD,eAAKsB,cAAL,GAAsB,IAAIxC,YAAJ,CACpBvK,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADL,EAEpBkC,gBAAgB,CAACC,IAAjB,CAAsB6E,yBAAtB,CAAgDqG,QAAhD,CAFoB,EAGpBjB,KAAK,GAAG,CAHY,CAAtB;AAKA,eAAKmC,YAAL,GAAoB,IAAIzC,YAAJ,CAClBvK,gBAAgB,CAACwL,OAAjB,CAAyB/M,MADP,EAElBkC,gBAAgB,CAACC,IAAjB,CAAsB+E,uBAAtB,CAA8CmG,QAA9C,CAFkB,EAGlBjB,KAAK,GAAG,CAHU,CAApB;AAKA,eAAKoC,iBAAL,GAAyB,IAAIrB,UAAJ,CACvB5L,gBAAgB,CAAC6L,MAAjB,CAAwBpN,MADD,EAEvBkC,gBAAgB,CAACC,IAAjB,CAAsBiF,4BAAtB,CAAmDiG,QAAnD,CAFuB,EAGvBjB,KAHuB,CAAzB;AAKD;;AAlKoB,O;;;AAiLd,iBAASyC,mBAAT,CAA6BC,QAA7B,EAA+C;AACpD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASC,yBAAT,CAAmCD,QAAnC,EAAqD;AAC1D,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASE,mBAAT,CAA6BF,QAA7B,EAA+C;AACpD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASG,oBAAT,CAA8BH,QAA9B,EAAgD;AACrD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASI,eAAT,CAAyBJ,QAAzB,EAA2C;AAChD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASK,yBAAT,CAAmCL,QAAnC,EAAqD;AAC1D,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASM,sBAAT,CAAgCN,QAAhC,EAAkD;AACvD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASO,wBAAT,CAAkCP,QAAlC,EAAoD;AACzD,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASQ,0BAAT,CAAoCR,QAApC,EAAsD;AAC3D,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASS,8BAAT,CAAwCT,QAAxC,EAA0D;AAC/D,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;;AAQM,iBAASU,yBAAT,CAAmCV,QAAnC,EAAqD;AAC1D,iBAAO,CAACA,QAAQ,GAAI,KAAK,CAAlB,KAAyB,KAAK,CAArC;AACD;;;SA9GcW,K,qBAAAA,K","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Proprietary Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html.\r\n */\r\n\r\nimport { assetManager, BufferAsset, js } from 'cc';\r\nimport Live2DCubismCoreModuleFactory from './Live2DCubismCore.js';\r\nimport { EDITOR } from 'cc/env';\r\n\r\ntype ByteArrayPtr = number;\r\ntype IntArrayPtr = number;\r\ntype FloatArrayPtr = number;\r\ntype StringArrayPtr = number;\r\ntype FloatArrayPtrArrsyPtr = number;\r\ntype MocPtr = number;\r\ntype ModelPtr = number;\r\ntype MemoryPtr = number;\r\n\r\nasync function loadWasmBinary(wasmBinaryUuid: string) {\r\n  let wasmBinary: Uint8Array | undefined;\r\n  if (!EDITOR) {\r\n    const bufferAsset = await new Promise<BufferAsset | null>((resolve, reject) => {\r\n      assetManager.loadBundle('Live2DCubismBuiltinResource', (error, bundle) => {\r\n        if (error) {\r\n          console.error(error);\r\n        } else {\r\n          bundle.load<BufferAsset>('WebAssembly/Live2DCubismCore', (error, asset) => {\r\n            if (error) {\r\n              console.error(error);\r\n              reject(null);\r\n            } else {\r\n              resolve(asset);\r\n            }\r\n          })\r\n        }\r\n      });\r\n    });\r\n    wasmBinary = bufferAsset == null ? undefined : new Uint8Array(bufferAsset.buffer());\r\n  } else {\r\n    const wasmFilePath = await Editor.Message.request('asset-db', 'query-path', wasmBinaryUuid);\r\n    console.info(`wasmFilePath: ${wasmFilePath}`);\r\n    if (!wasmFilePath) {\r\n      throw new Error(`'Failed to load WebAssembly Binary ${wasmBinaryUuid}`);\r\n    }\r\n    const buffer = require('fs').readFileSync(wasmFilePath);\r\n    wasmBinary = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n  }\r\n  return wasmBinary;\r\n}\r\n\r\nasync function loadCubismCoreModule() {\r\n\r\n  console.log(`Loading Live2D Cubism Core.`);\r\n\r\n  const myModulePromiseCacheKey = Symbol.for('CubismCoreEmscriptenModulePromise');\r\n  const global = globalThis as unknown as {\r\n    [myModulePromiseCacheKey]: ReturnType<typeof Live2DCubismCoreModuleFactory>;\r\n  };\r\n  const modulePromise = (global[myModulePromiseCacheKey] ??= (async () => {\r\n    const wasmBinaryUuid = '2ae9481d-aa06-4cce-ae8e-bcecaf63d82b';\r\n    const wasmBinary = await loadWasmBinary(wasmBinaryUuid);\r\n    const index = await Live2DCubismCoreModuleFactory({ wasmBinary });\r\n    if (!index) {\r\n      throw new Error(`'Failed to get Live2D Cubism Core module factory.`);\r\n    }\r\n    return index;\r\n  })());\r\n\r\n  return await modulePromise;\r\n}\r\n\r\n// CAUTION HERE\r\n// We're using the experimental feature: top level await.\r\nconst CubismCoreModule = await loadCubismCoreModule();\r\n\r\nexport function getCubismCoreVersionString(): string {\r\n  const version = CubismCoreModule._csmGetVersion();\r\n  const major = (version & 0xff000000) >> 24;\r\n  const minor = (version & 0x00ff0000) >> 16;\r\n  const patch = version & 0x0000ffff;\r\n  return js.formatStr(\r\n    `Loaded Live2D Cubism Core version: `,\r\n    ('00' + major).slice(-2),\r\n    ('00' + minor).slice(-2),\r\n    ('0000' + patch).slice(-4)\r\n  );\r\n}\r\n\r\nconsole.log(getCubismCoreVersionString());\r\n// CAUTION END\r\n\r\nexport namespace Live2DCubismCore {\r\n  export namespace _csm {\r\n    export function getVersion(): number {\r\n      return CubismCoreModule._csmGetVersion();\r\n    }\r\n    export function getLatestMocVersion(): number {\r\n      return CubismCoreModule._csmGetLatestMocVersion();\r\n    }\r\n    export function getMocVersion(moc: MocPtr): number {\r\n      return CubismCoreModule._csmGetMocVersion(moc);\r\n    }\r\n    export function getSizeofModel(moc: MocPtr): number {\r\n      return CubismCoreModule._csmGetSizeofModel(moc);\r\n    }\r\n    export function hasMocConsistency(memory: any, mocSize: number): number {\r\n        return CubismCoreModule._csmHasMocConsistency(memory, mocSize);\r\n    };\r\n    export function reviveMocInPlace(memory: MemoryPtr, mocSize: number) {\r\n      return CubismCoreModule._csmReviveMocInPlace(memory, mocSize);\r\n    }\r\n    export function initializeModelInPlace(moc: MocPtr, memory: MemoryPtr, modelSize: number) {\r\n      return CubismCoreModule._csmInitializeModelInPlace(moc, memory, modelSize);\r\n    }\r\n    export function getParameterCount(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetParameterCount(model);\r\n    }\r\n    export function getParameterIds(model: ModelPtr): StringArrayPtr {\r\n      return CubismCoreModule._csmGetParameterIds(model);\r\n    }\r\n    export function getParameterMinimumValues(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetParameterMinimumValues(model);\r\n    }\r\n    export function getParameterMaximumValues(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetParameterMaximumValues(model);\r\n    }\r\n    export function getParameterDefaultValues(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetParameterDefaultValues(model);\r\n    }\r\n    export function getParameterValues(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetParameterValues(model);\r\n    }\r\n    export function getParameterKeyCounts(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetParameterKeyCounts(model);\r\n    }\r\n    export function getParameterKeyValues(model: ModelPtr): FloatArrayPtrArrsyPtr {\r\n      return CubismCoreModule._csmGetParameterKeyValues(model);\r\n    }\r\n    export function getParameterTypes(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetParameterTypes(model);\r\n    }\r\n    export function getPartCount(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetPartCount(model);\r\n    }\r\n    export function getPartIds(model: ModelPtr): StringArrayPtr {\r\n      return CubismCoreModule._csmGetPartIds(model);\r\n    }\r\n    export function getPartOpacities(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetPartOpacities(model);\r\n    }\r\n    export function getPartParentPartIndices(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetPartParentPartIndices(model);\r\n    }\r\n    export function getDrawableCount(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableCount(model);\r\n    }\r\n    export function getDrawableIds(model: ModelPtr): StringArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableIds(model);\r\n    }\r\n    export function getDrawableConstantFlags(model: ModelPtr): ByteArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableConstantFlags(model);\r\n    }\r\n    export function getDrawableDynamicFlags(model: ModelPtr): ByteArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableDynamicFlags(model);\r\n    }\r\n    export function getDrawableTextureIndices(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableTextureIndices(model);\r\n    }\r\n    export function getDrawableDrawOrders(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableDrawOrders(model);\r\n    }\r\n    export function getDrawableRenderOrders(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableRenderOrders(model);\r\n    }\r\n    export function getDrawableOpacities(model: ModelPtr): FloatArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableOpacities(model);\r\n    }\r\n    export function getDrawableMaskCounts(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableMaskCounts(model);\r\n    }\r\n    export function getDrawableMasks(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableMasks(model);\r\n    }\r\n    export function getDrawableVertexCounts(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableVertexCounts(model);\r\n    }\r\n    export function getDrawableVertexPositions(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableVertexPositions(model);\r\n    }\r\n    export function getDrawableVertexUvs(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableVertexUvs(model);\r\n    }\r\n    export function getDrawableIndexCounts(model: ModelPtr): IntArrayPtr {\r\n      return CubismCoreModule._csmGetDrawableIndexCounts(model);\r\n    }\r\n    export function getDrawableIndices(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableIndices(model);\r\n    }\r\n    export function getDrawableMultiplyColors(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableMultiplyColors(model);\r\n    }\r\n    export function getDrawableScreenColors(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableScreenColors(model);\r\n    }\r\n    export function getDrawableParentPartIndices(model: ModelPtr) {\r\n      return CubismCoreModule._csmGetDrawableParentPartIndices(model);\r\n    }\r\n    export function mallocMoc(mocSize: number) {\r\n      return CubismCoreModule._csmMallocMoc(mocSize);\r\n    }\r\n    export function mallocModelAndInitialize(moc: ModelPtr) {\r\n      return CubismCoreModule._csmMallocModelAndInitialize(moc);\r\n    }\r\n    export function malloc(size: number) {\r\n      return CubismCoreModule._csmMalloc(size);\r\n    }\r\n    export function setLogFunction(handler: any) {\r\n      CubismCoreModule._csmSetLogFunction(handler);\r\n    }\r\n    export function updateModel(model: ModelPtr) {\r\n      CubismCoreModule._csmUpdateModel(model);\r\n    }\r\n    export function readCanvasInfo(\r\n      model: ModelPtr,\r\n      outSizeInPixels: number,\r\n      outOriginInPixels: number,\r\n      outPixelsPerUnit: number\r\n    ) {\r\n      CubismCoreModule._csmReadCanvasInfo(model, outSizeInPixels, outOriginInPixels, outPixelsPerUnit);\r\n    }\r\n    export function resetDrawableDynamicFlags(model: ModelPtr) {\r\n      CubismCoreModule._csmResetDrawableDynamicFlags(model);\r\n    }\r\n    export function free(memory: MemoryPtr) {\r\n      CubismCoreModule._csmFree(memory);\r\n    }\r\n  }\r\n\r\n  /** Necessary alignment for mocs (in bytes). */\r\n  export const AlignofMoc = 64;\r\n  /** Necessary alignment for models (in bytes). */\r\n  export const AlignofModel = 16;\r\n  /** .moc3 file version Unknown */\r\n  export const MocVersion_Unknown = 0;\r\n  /** .moc3 file version 3.0.00 - 3.2.07 */\r\n  export const MocVersion_30 = 1;\r\n  /** .moc3 file version 3.3.00 - 3.3.03 */\r\n  export const MocVersion_33 = 2;\r\n  /** .moc3 file version 4.0.00 - 4.1.05 */\r\n  export const MocVersion_40 = 3;\r\n  /** .moc3 file version 4.2.00 - 4.2.04 */\r\n  export const MocVersion_42 = 4;\r\n  /** .moc3 file version 5.0.00 - */\r\n  export const MocVersion_50 = 5;\r\n  /** Normal Parameter. */\r\n  export const ParameterType_Normal = 0;\r\n  /** Parameter for blend shape. */\r\n  export const ParameterType_BlendShape = 1;\r\n\r\n  export namespace Version {\r\n    /**\r\n     * Queries Core version.\r\n     *\r\n     * @return Core version.\r\n     */\r\n    export function csmGetVersion() {\r\n      return Live2DCubismCore._csm.getVersion();\r\n    }\r\n\r\n    /**\r\n     * Gets Moc file supported latest version.\r\n     *\r\n     * @return Moc file latest format version.\r\n     */\r\n    export function csmGetLatestMocVersion() {\r\n      return Live2DCubismCore._csm.getLatestMocVersion();\r\n    }\r\n\r\n    /**\r\n     * Gets Moc file format version.\r\n     *\r\n     * @param moc Moc\r\n     *\r\n     * @return csmMocVersion\r\n     */\r\n    export function csmGetMocVersion(moc: any) {\r\n      return Live2DCubismCore._csm.getMocVersion(moc._ptr);\r\n    }\r\n  }\r\n\r\n  export namespace Logging {\r\n    let logFunction: ((message: string) => void) | null = null;\r\n\r\n    /**\r\n     * Sets log handler.\r\n     *\r\n     * @param handler  Handler to use.\r\n     */\r\n    export function csmSetLogFunction(handler: ((message: string) => void) | null) {\r\n      // Cache log handler.\r\n      logFunction = handler;\r\n      // Wrap function to pointer.\r\n      const pointer = CubismCoreModule.addFunction(Logging.wrapLogFunction, 'vi');\r\n      // Sets log handler.\r\n      _csm.setLogFunction(pointer);\r\n    }\r\n\r\n    /**\r\n     * Queries log handler.\r\n     *\r\n     * @return Log handler.\r\n     */\r\n    export function csmGetLogFunction(): ((message: string) => void) | null {\r\n      return logFunction;\r\n    }\r\n\r\n    export function wrapLogFunction(messagePtr: any) {\r\n      // Pointer to string.\r\n      let messageStr = CubismCoreModule.UTF8ToString(messagePtr);\r\n      // Run log function.\r\n      logFunction?.(messageStr);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Moc {\r\n  private _ptr: number = 0;\r\n  public get ptr(): number {\r\n    return this._ptr;\r\n  }\r\n  private constructor(ptr: number) {\r\n    this._ptr = ptr;\r\n  }\r\n  /**\r\n   * Checks consistency of a moc.\r\n   *\r\n   * @param mocBytes Moc bytes.\r\n   *\r\n   * @returns '1' if Moc is valid; '0' otherwise.\r\n   */\r\n  public static hasMocConsistency (mocBytes: ArrayBuffer): number | null {\r\n      // Allocate memory.\r\n      var memory = Live2DCubismCore._csm.mallocMoc(mocBytes.byteLength);\r\n      if (!memory) {\r\n          return null;\r\n      }\r\n      // Initialize memory.\r\n      var destination = new Uint8Array(CubismCoreModule.HEAPU8.buffer, memory, mocBytes.byteLength);\r\n      destination.set(new Uint8Array(mocBytes));\r\n      var hasConsistency = Live2DCubismCore._csm.hasMocConsistency(memory, mocBytes.byteLength);\r\n      Live2DCubismCore._csm.free(memory);\r\n      return hasConsistency;\r\n  }\r\n  /**\r\n   * Creates {@link Moc} from {@link ArrayBuffer}.\r\n   * @param buffer Array buffer\r\n   * @return [{@link Moc}] on success; null otherwise.\r\n   */\r\n  public static fromArrayBuffer(mocBytes: ArrayBuffer): Moc | null {\r\n    // Allocate memory.\r\n    const memory = Live2DCubismCore._csm.mallocMoc(mocBytes.byteLength);\r\n    if (!memory) {\r\n      return null;\r\n    }\r\n    // Initialize memory.\r\n    const destination = new Uint8Array(CubismCoreModule.HEAPU8.buffer, memory, mocBytes.byteLength);\r\n    destination.set(new Uint8Array(mocBytes));\r\n\r\n    // Revive moc.\r\n    const ptr = Live2DCubismCore._csm.reviveMocInPlace(memory, mocBytes.byteLength);\r\n    if (!ptr) {\r\n      console.log(mocBytes);\r\n      Live2DCubismCore._csm.free(memory);\r\n      return null;\r\n    }\r\n    return new Moc(ptr);\r\n  }\r\n  /** Releases instance. */\r\n  public _release() {\r\n    Live2DCubismCore._csm.free(this._ptr);\r\n    this._ptr = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes instance.\r\n *\r\n * @param moc Moc\r\n */\r\nexport class Model {\r\n  private _parameters: Parameters;\r\n  /** Parameters */\r\n  public get parameters() {\r\n    return this._parameters;\r\n  }\r\n\r\n  private _parts: Parts;\r\n  /** Parts */\r\n  public get parts() {\r\n    return this._parts;\r\n  }\r\n\r\n  private _drawables: Drawables;\r\n  /** Drawables. */\r\n  public get drawables() {\r\n    return this._drawables;\r\n  }\r\n\r\n  private _canvasinfo: CanvasInfo;\r\n  /** Canvas information. */\r\n  public get canvasinfo() {\r\n    return this._canvasinfo;\r\n  }\r\n\r\n  private _ptr: number = 0;\r\n  public get ptr(): number {\r\n    return this._ptr;\r\n  }\r\n\r\n  private constructor(\r\n    mocPtr: number,\r\n    parameters: Parameters,\r\n    parts: Parts,\r\n    drawables: Drawables,\r\n    canvasinfo: CanvasInfo\r\n  ) {\r\n    this._ptr = mocPtr;\r\n    this._parameters = parameters;\r\n    this._parts = parts;\r\n    this._drawables = drawables;\r\n    this._canvasinfo = canvasinfo;\r\n  }\r\n\r\n  /**\r\n   * Creates [{@link Model}] from [{@link Moc}].\r\n   *\r\n   * @param moc Moc\r\n   * @return [{@link Model}] on success; null otherwise.\r\n   */\r\n  public static fromMoc(moc: Moc): Model | null {\r\n    const ptr = Live2DCubismCore._csm.mallocModelAndInitialize(moc.ptr);\r\n    if (!ptr) {\r\n      return null;\r\n    }\r\n    const parameters = new Parameters(ptr);\r\n    const parts = new Parts(ptr);\r\n    const drawables = new Drawables(ptr);\r\n    const canvasinfo = new CanvasInfo(ptr);\r\n\r\n    const model = new Model(ptr, parameters, parts, drawables, canvasinfo);\r\n    return model;\r\n  }\r\n\r\n  /** Updates instance. */\r\n  public update() {\r\n    Live2DCubismCore._csm.updateModel(this._ptr);\r\n  }\r\n\r\n  /** Releases instance. */\r\n  public release() {\r\n    Live2DCubismCore._csm.free(this._ptr);\r\n    this._ptr = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes instance.\r\n *\r\n * @param modelPtr Native model pointer.\r\n */\r\nexport class CanvasInfo {\r\n  /** Width of native model canvas. */\r\n  CanvasWidth: number = 0;\r\n  /** Height of native model canvas. */\r\n  CanvasHeight: number = 0;\r\n  /** Coordinate origin of X axis. */\r\n  CanvasOriginX: number = 0;\r\n  /** Coordinate origin of Y axis. */\r\n  CanvasOriginY: number = 0;\r\n  /** Pixels per unit of native model. */\r\n  PixelsPerUnit: number = 0;\r\n\r\n  public constructor(ptr: ModelPtr) {\r\n    if (!ptr) {\r\n      return;\r\n    }\r\n    // Preserve the pointer ant heap for get data throw args.\r\n    const canvasSizeDataSize = 2;\r\n    const canvasOriginDataSize = 2;\r\n    const canvasPPUDataSize = 1;\r\n    const heap = allocateMemory(\r\n      Float32Array.BYTES_PER_ELEMENT *\r\n        (canvasSizeDataSize + canvasOriginDataSize + canvasPPUDataSize)\r\n    );\r\n\r\n    if (!heap) {\r\n      console.assert(!heap);\r\n      return;\r\n    }\r\n\r\n    const canvasSizeData = new Float32Array(heap.buffer, heap.byteOffset, canvasSizeDataSize);\r\n    const canvasOriginData = new Float32Array(\r\n      heap.buffer,\r\n      heap.byteOffset + canvasSizeData.byteLength,\r\n      canvasOriginDataSize\r\n    );\r\n    const canvasPPUData = new Float32Array(\r\n      heap.buffer,\r\n      canvasOriginData.byteOffset + canvasOriginData.byteLength,\r\n      canvasPPUDataSize\r\n    );\r\n\r\n    // Call function and get result\r\n    Live2DCubismCore._csm.readCanvasInfo(\r\n      ptr,\r\n      canvasSizeData.byteOffset,\r\n      canvasOriginData.byteOffset,\r\n      canvasPPUData.byteOffset\r\n    );\r\n    this.CanvasWidth = canvasSizeData[0];\r\n    this.CanvasHeight = canvasSizeData[1];\r\n    this.CanvasOriginX = canvasOriginData[0];\r\n    this.CanvasOriginY = canvasOriginData[1];\r\n    this.PixelsPerUnit = canvasPPUData[0];\r\n    // Free heap memory\r\n    Live2DCubismCore._csm.free(heap.byteOffset);\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes instance.\r\n *\r\n * @param modelPtr Native model.\r\n */\r\nexport class Parameters {\r\n  /** Parameter count. */\r\n  public readonly count: number;\r\n  /** Parameter IDs. */\r\n  public readonly ids: Array<string>;\r\n  /** Minimum parameter values. */\r\n  public readonly minimumValues: Float32Array;\r\n  /** Maximum parameter values. */\r\n  public readonly maximumValues: Float32Array;\r\n  /** Default parameter values. */\r\n  public readonly defaultValues: Float32Array;\r\n  /** Parameter values. */\r\n  public values: Float32Array;\r\n  /** Parameter types. */\r\n  public readonly types: Int32Array;\r\n  /** Number of key values of each parameter. */\r\n  public readonly keyCounts: Int32Array;\r\n  /** Key values of each parameter. */\r\n  public readonly keyValues: Array<Float32Array>;\r\n\r\n  public constructor(ptr: ModelPtr) {\r\n    const count = Live2DCubismCore._csm.getParameterCount(ptr);\r\n    this.count = count;\r\n    this.ids = new Array(count);\r\n    const ids = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getParameterIds(ptr),\r\n      count\r\n    );\r\n    for (let i = 0; i < ids.length; i++) {\r\n      this.ids[i] = CubismCoreModule.UTF8ToString(ids[i]);\r\n    }\r\n    this.minimumValues = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getParameterMinimumValues(ptr),\r\n      count\r\n    );\r\n    this.maximumValues = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getParameterMaximumValues(ptr),\r\n      count\r\n    );\r\n    this.defaultValues = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getParameterDefaultValues(ptr),\r\n      count\r\n    );\r\n    this.values = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getParameterValues(ptr),\r\n      count\r\n    );\r\n    this.types = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getParameterTypes(ptr),\r\n      count\r\n    );\r\n\r\n    const keyCounts = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getParameterKeyCounts(ptr),\r\n      count\r\n    );\r\n    this.keyCounts = keyCounts;\r\n\r\n    this.keyValues = new Array(count);\r\n    const keyValues = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getParameterKeyValues(ptr),\r\n      count\r\n    );\r\n    for (let i = 0; i < keyValues.length; i++) {\r\n      this.keyValues[i] = new Float32Array(CubismCoreModule.HEAPF32.buffer, keyValues[i], keyCounts[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes instance.\r\n *\r\n * @param modelPtr Native model.\r\n */\r\nexport class Parts {\r\n  /** Part count. */\r\n  count: number;\r\n  /** Part IDs. */\r\n  ids: Array<string>;\r\n  /** Opacity values. */\r\n  opacities: Float32Array;\r\n  /** Part's parent part indices. */\r\n  parentIndices: Int32Array;\r\n  constructor(modelPtr: any) {\r\n    const _count = Live2DCubismCore._csm.getPartCount(modelPtr);\r\n    this.count = _count;\r\n    this.ids = new Array(_count);\r\n    const _ids = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getPartIds(modelPtr),\r\n      _count\r\n    );\r\n    for (let i = 0; i < _ids.length; i++) {\r\n      this.ids[i] = CubismCoreModule.UTF8ToString(_ids[i]);\r\n    }\r\n    this.opacities = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getPartOpacities(modelPtr),\r\n      _count\r\n    );\r\n    this.parentIndices = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getPartParentPartIndices(modelPtr),\r\n      _count\r\n    );\r\n  }\r\n}\r\n\r\nexport class Drawables {\r\n  /** Drawable count. */\r\n  public readonly count: number;\r\n  /** Drawable IDs. */\r\n  public readonly ids: Array<string>;\r\n  /** Constant drawable flags. */\r\n  public readonly constantFlags: Uint8Array;\r\n  /** Dynamic drawable flags. */\r\n  public readonly dynamicFlags: Uint8Array;\r\n  /** Drawable texture indices. */\r\n  public readonly textureIndices: Int32Array;\r\n  /** Drawable draw orders. */\r\n  public readonly drawOrders: Int32Array;\r\n  /** Drawable render orders. */\r\n  public readonly renderOrders: Int32Array;\r\n  /** Drawable opacities. */\r\n  public readonly opacities: Float32Array;\r\n  /** Mask count for each drawable. */\r\n  public readonly maskCounts: Int32Array;\r\n  /** Masks for each drawable. */\r\n  public readonly masks: Array<Int32Array>;\r\n  /** Number of vertices of each drawable. */\r\n  public readonly vertexCounts: Int32Array;\r\n  /** 2D vertex position data of each drawable. */\r\n  public readonly vertexPositions: Array<Float32Array>;\r\n  /** 2D texture coordinate data of each drawables. */\r\n  public readonly vertexUvs: Array<Float32Array>;\r\n  /** Number of triangle indices for each drawable. */\r\n  public readonly indexCounts: Int32Array;\r\n  /** Triangle index data for each drawable. */\r\n  public readonly indices: Array<Uint16Array>;\r\n  /** Multiply Colors */\r\n  public readonly multiplyColors: Float32Array;\r\n  /** Screen Colors */\r\n  public readonly screenColors: Float32Array;\r\n  /** Indices of drawables parent part. */\r\n  public readonly parentPartIndices: Int32Array;\r\n\r\n  /** Native model. */\r\n  private _modelPtr;\r\n\r\n  public constructor(modelPtr: any) {\r\n    this._modelPtr = modelPtr;\r\n    const count = Live2DCubismCore._csm.getDrawableCount(modelPtr);\r\n    this.count = count;\r\n    this.ids = new Array(count);\r\n    const ids = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableIds(modelPtr),\r\n      count\r\n    );\r\n    for (let i = 0; i < ids.length; i++) {\r\n      this.ids[i] = CubismCoreModule.UTF8ToString(ids[i]);\r\n    }\r\n    this.constantFlags = new Uint8Array(\r\n      CubismCoreModule.HEAPU8.buffer,\r\n      Live2DCubismCore._csm.getDrawableConstantFlags(modelPtr),\r\n      count\r\n    );\r\n    this.dynamicFlags = new Uint8Array(\r\n      CubismCoreModule.HEAPU8.buffer,\r\n      Live2DCubismCore._csm.getDrawableDynamicFlags(modelPtr),\r\n      count\r\n    );\r\n    this.textureIndices = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableTextureIndices(modelPtr),\r\n      count\r\n    );\r\n    this.drawOrders = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableDrawOrders(modelPtr),\r\n      count\r\n    );\r\n    this.renderOrders = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableRenderOrders(modelPtr),\r\n      count\r\n    );\r\n    this.opacities = new Float32Array(\r\n      CubismCoreModule.HEAPF32.buffer,\r\n      Live2DCubismCore._csm.getDrawableOpacities(modelPtr),\r\n      count\r\n    );\r\n    const maskCounts = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableMaskCounts(modelPtr),\r\n      count\r\n    );\r\n    this.maskCounts = maskCounts;\r\n    const vertexCounts = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableVertexCounts(modelPtr),\r\n      count\r\n    );\r\n    this.vertexCounts = vertexCounts;\r\n    const indexCounts = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableIndexCounts(modelPtr),\r\n      count\r\n    );\r\n    this.indexCounts = indexCounts;\r\n\r\n    this.masks = new Array(count);\r\n    let masks = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableMasks(modelPtr),\r\n      count\r\n    );\r\n    for (let i = 0; i < masks.length; i++) {\r\n      this.masks[i] = new Int32Array(CubismCoreModule.HEAP32.buffer, masks[i], maskCounts[i]);\r\n    }\r\n    this.vertexPositions = new Array(count);\r\n    let vertexPositions = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableVertexPositions(modelPtr),\r\n      count\r\n    );\r\n    for (let i = 0; i < vertexPositions.length; i++) {\r\n      this.vertexPositions[i] = new Float32Array(\r\n        CubismCoreModule.HEAPF32.buffer,\r\n        vertexPositions[i],\r\n        vertexCounts[i] * 2\r\n      );\r\n    }\r\n    this.vertexUvs = new Array(count);\r\n    let vertexUvs = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableVertexUvs(modelPtr),\r\n      count\r\n    );\r\n    for (let i = 0; i < vertexUvs.length; i++) {\r\n      this.vertexUvs[i] = new Float32Array(\r\n        CubismCoreModule.HEAPF32.buffer,\r\n        vertexUvs[i],\r\n        vertexCounts[i] * 2\r\n      );\r\n    }\r\n    this.indices = new Array(count);\r\n    let indices = new Uint32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableIndices(modelPtr),\r\n      count\r\n    );\r\n    for (let i = 0; i < indices.length; i++) {\r\n      this.indices[i] = new Uint16Array(CubismCoreModule.HEAPU16.buffer, indices[i], indexCounts[i]);\r\n    }\r\n    this.multiplyColors = new Float32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableMultiplyColors(modelPtr),\r\n      count * 4\r\n    );\r\n    this.screenColors = new Float32Array(\r\n      CubismCoreModule.HEAPU32.buffer,\r\n      Live2DCubismCore._csm.getDrawableScreenColors(modelPtr),\r\n      count * 4\r\n    );\r\n    this.parentPartIndices = new Int32Array(\r\n      CubismCoreModule.HEAP32.buffer,\r\n      Live2DCubismCore._csm.getDrawableParentPartIndices(modelPtr),\r\n      count\r\n    );\r\n  }\r\n  /** Resets all dynamic drawable flags.. */\r\n  public resetDynamicFlags = () => {\r\n    Live2DCubismCore._csm.resetDrawableDynamicFlags(this._modelPtr);\r\n  };\r\n}\r\n\r\nexport namespace Utils {\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasBlendAdditiveBit(bitfield: number) {\r\n    return (bitfield & (1 << 0)) == 1 << 0;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasBlendMultiplicativeBit(bitfield: number) {\r\n    return (bitfield & (1 << 1)) == 1 << 1;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasIsDoubleSidedBit(bitfield: number) {\r\n    return (bitfield & (1 << 2)) == 1 << 2;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasIsInvertedMaskBit(bitfield: number) {\r\n    return (bitfield & (1 << 3)) == 1 << 3;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasIsVisibleBit(bitfield: number) {\r\n    return (bitfield & (1 << 0)) == 1 << 0;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasVisibilityDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 1)) == 1 << 1;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasOpacityDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 2)) == 1 << 2;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasDrawOrderDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 3)) == 1 << 3;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasRenderOrderDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 4)) == 1 << 4;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasVertexPositionsDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 5)) == 1 << 5;\r\n  }\r\n  /**\r\n   * Checks whether flag is set in bitfield.\r\n   *\r\n   * @param bitfield Bitfield to query against.\r\n   *\r\n   * @return [[true]] if bit set; [[false]] otherwise\r\n   */\r\n  export function hasBlendColorDidChangeBit(bitfield: number) {\r\n    return (bitfield & (1 << 6)) == 1 << 6;\r\n  }\r\n}\r\n\r\nfunction allocateMemory(size: number) {\r\n  const ptr = Live2DCubismCore._csm.malloc(size);\r\n  if (!ptr) {\r\n    return null;\r\n  }\r\n  return new Uint8Array(CubismCoreModule.HEAPU8.buffer, ptr, size);\r\n}\r\n"]}