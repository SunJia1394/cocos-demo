{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/Physics/CubismPhysicsRig.ts"],"names":["CCFloat","_decorator","ComponentExtensionMethods","CubismPhysics","CubismPhysicsSubRig","property","ccclass","CubismPhysicsRig","type","serializable","_controller","parametersCache","_parametersCache","value","controller","initialize","i","subRigs","length","stabilization","console","assert","parameters","Array","fill","start","_parametersInputCache","subRig","model","findCubismModel","forceUpdateNow","evaluate","deltaTime","_currentRemainTime","maxDeltaTime","physicsDeltaTime","fps","inputWeight","alpha","interpolate","gravity","clone","wind"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CCFloat, math, _decorator } from 'cc';\r\nimport ComponentExtensionMethods from '../../Core/ComponentExtensionMethods';\r\nimport CubismPhysics from './CubismPhysics';\r\nimport CubismPhysicsController from './CubismPhysicsController';\r\nimport CubismPhysicsSubRig from './CubismPhysicsSubRig';\r\nconst { property, ccclass } = _decorator;\r\n\r\n/** Physics rig. */\r\n@ccclass('CubismPhysicsRig')\r\nexport default class CubismPhysicsRig {\r\n  /** Children of rig. */\r\n  @property({ type: [CubismPhysicsSubRig], serializable: true })\r\n  subRigs: Array<CubismPhysicsSubRig | null> = new Array(0);\r\n\r\n  @property({ serializable: true })\r\n  gravity: math.Vec2 = CubismPhysics.gravity.clone();\r\n\r\n  @property({ serializable: true })\r\n  wind: math.Vec2 = CubismPhysics.wind.clone();\r\n\r\n  @property({ type: CCFloat, serializable: true })\r\n  public fps: number = 0.0;\r\n\r\n  @property({ serializable: false })\r\n  private _currentRemainTime: number = 0; // Time not processed by physics.\r\n\r\n  @property({ serializable: false })\r\n  private _parametersCache: number[] = new Array(0); // Cache parameters used by Evaluate.\r\n\r\n  public get parametersCache(): number[] {\r\n    return this._parametersCache;\r\n  }\r\n  public set parametersCache(value: number[]) {\r\n    this._parametersCache = value;\r\n  }\r\n\r\n  @property({ serializable: false })\r\n  private _parametersInputCache: number[] = new Array(0); // Cache input when UpdateParticles runs.\r\n\r\n  private _controller: CubismPhysicsController | null = null;\r\n  /** Reference of controller to refer from children rig. */\r\n  public get controller() {\r\n    return this._controller;\r\n  }\r\n  /** Reference of controller to refer from children rig. */\r\n  public set controller(value: CubismPhysicsController | null) {\r\n    this._controller = value;\r\n  }\r\n\r\n  /** Initializes rigs. */\r\n  public initialize() {\r\n    for (let i = 0; i < this.subRigs.length; i++) {\r\n      this.subRigs[i]?.initialize();\r\n    }\r\n  }\r\n\r\n  /** Calculations are performed until the physics are stable. */\r\n  public stabilization(): void {\r\n    //#region Assertion\r\n    const { controller } = this;\r\n    if (controller == null) {\r\n      console.assert(controller != null);\r\n      return;\r\n    }\r\n    const { parameters } = controller;\r\n    if (parameters == null) {\r\n      console.assert(parameters != null);\r\n      return;\r\n    }\r\n    //#endregion\r\n\r\n    // Initialize.\r\n    if (this._parametersCache == null) {\r\n      this._parametersCache = new Array(parameters.length).fill(0);\r\n    }\r\n\r\n    if (this._parametersCache.length < parameters.length) {\r\n      const start = this._parametersCache.length;\r\n      this._parametersCache.length = parameters.length;\r\n      this._parametersCache.fill(0, start);\r\n    }\r\n\r\n    if (this._parametersInputCache == null) {\r\n      this._parametersInputCache = new Array(parameters.length).fill(0);\r\n    }\r\n\r\n    if (this._parametersInputCache.length < parameters.length) {\r\n      const start = this._parametersInputCache.length;\r\n      this._parametersInputCache.length = parameters.length;\r\n      this._parametersInputCache.fill(0, start);\r\n    }\r\n\r\n    // Obtain and cache the current parameter posture.\r\n    for (let i = 0; i < parameters.length; i++) {\r\n      this._parametersCache[i] = parameters[i].value;\r\n      this._parametersInputCache[i] = this._parametersCache[i];\r\n    }\r\n\r\n    // Evaluate.\r\n    for (let i = 0; i < this.subRigs.length; i++) {\r\n      const subRig = this.subRigs[i];\r\n      if (subRig == null) {\r\n        console.assert(subRig != null);\r\n        continue;\r\n      }\r\n      subRig.stabilization();\r\n    }\r\n\r\n    const model = ComponentExtensionMethods.findCubismModel(controller);\r\n    if (model == null) {\r\n      console.assert(model != null);\r\n      return;\r\n    }\r\n    model.forceUpdateNow();\r\n  }\r\n\r\n  /** Evaluate rigs.\r\n   *\r\n   * Pendulum interpolation weights\r\n   *\r\n   * The result of the pendulum calculation is saved and the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\r\n   *\r\n   * The figure shows the interpolation between [1] and [2].\r\n   *\r\n   * The weight of the interpolation are determined by the current time seen between the latest pendulum calculation timing and the next timing.\r\n   *\r\n   * Figure shows the weight of position (3) as seen between [2] and [4].\r\n   *\r\n   * As an interpretation, the pendulum calculation and weights are misaligned.\r\n   *\r\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\r\n   *\r\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\r\n   *\r\n   * ```\r\n   * ------------ time -------------->\r\n   *    　　　　　　　　|+++++|------| <- weight\r\n   * ==[1]====#=====[2]---(3)----(4)\r\n   *          ^ output contents\r\n   * ```\r\n   *\r\n   * 1. _previousRigOutput\r\n   * 2. _currentRigOutput\r\n   * 3. _currentRemainTime (now rendering)\r\n   * 4. next particles timing\r\n   *\r\n   * @param deltaTime\r\n   */\r\n  public evaluate(deltaTime: number) {\r\n    if (0.0 >= deltaTime) {\r\n      return;\r\n    }\r\n    this._currentRemainTime += deltaTime;\r\n    if (this._currentRemainTime > CubismPhysics.maxDeltaTime) {\r\n      this._currentRemainTime = 0.0;\r\n    }\r\n\r\n    let physicsDeltaTime = 0.0;\r\n\r\n    if (this.fps > 0.0) {\r\n      physicsDeltaTime = 1.0 / this.fps;\r\n    } else {\r\n      physicsDeltaTime = deltaTime;\r\n    }\r\n\r\n    const controller = this.controller;\r\n    if (controller == null) {\r\n      console.assert(controller != null);\r\n      return;\r\n    }\r\n    const { parameters } = controller;\r\n    if (parameters == null) {\r\n      console.assert(parameters != null);\r\n      return;\r\n    }\r\n\r\n    if (this._parametersCache == null) {\r\n      this._parametersCache = new Array(parameters.length).fill(0);\r\n    }\r\n\r\n    if (this._parametersCache.length < parameters.length) {\r\n      const start = this._parametersCache.length;\r\n      this._parametersCache.length = parameters.length;\r\n      this._parametersCache.fill(0, start);\r\n    }\r\n\r\n    if (this._parametersInputCache == null) {\r\n      this._parametersInputCache = new Array(parameters.length).fill(0);\r\n    }\r\n\r\n    if (this._parametersInputCache.length < parameters.length) {\r\n      const start = this._parametersInputCache.length;\r\n      this._parametersInputCache.length = parameters.length;\r\n      this._parametersInputCache.fill(0, start);\r\n\r\n      for (var i = 0; i < this._parametersInputCache.length; i++) {\r\n        this._parametersInputCache[i] = this._parametersCache[i];\r\n      }\r\n    }\r\n\r\n    while (this._currentRemainTime >= physicsDeltaTime) {\r\n      let inputWeight = physicsDeltaTime / this._currentRemainTime;\r\n\r\n      // Calculate the input at the timing to UpdateParticles by linear interpolation with the _parameterInputCache and parameterValue.\r\n      // _parameterCache needs to be separated from _parameterInputCache because of its role in propagating values between groups.\r\n      for (let i = 0; i < parameters.length; i++) {\r\n        this._parametersCache[i] =\r\n          this._parametersInputCache[i] * (1.0 - inputWeight) + parameters[i].value * inputWeight;\r\n        this._parametersInputCache[i] = this._parametersCache[i];\r\n      }\r\n\r\n      for (let i = 0; i < this.subRigs.length; i++) {\r\n        const subRig = this.subRigs[i];\r\n        if (subRig == null) {\r\n          console.assert(subRig != null);\r\n          continue;\r\n        }\r\n        subRig.evaluate(physicsDeltaTime);\r\n      }\r\n\r\n      this._currentRemainTime -= physicsDeltaTime;\r\n    }\r\n\r\n    let alpha = this._currentRemainTime / physicsDeltaTime;\r\n    for (let i = 0; i < this.subRigs.length; i++) {\r\n      const subRig = this.subRigs[i];\r\n      if (subRig == null) {\r\n        console.assert(subRig != null);\r\n        continue;\r\n      }\r\n      subRig.interpolate(alpha);\r\n    }\r\n  }\r\n}\r\n"]}