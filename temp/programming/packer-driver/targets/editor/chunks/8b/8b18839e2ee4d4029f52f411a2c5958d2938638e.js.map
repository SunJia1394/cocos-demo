{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Rendering/Masking/CubismMaskRendererExtensionMethods.ts"],"names":["Bounds","CubismBounds","Vector3","CubismVector3","getBounds","self","x","minX","y","minY","z","minZ","meshBounds","min","maxX","maxY","maxZ","max","i","length","size","subtract","fromVector","multiplySingle","add","CubismMaskRendererExtensionMethods"],"mappings":";;;;;;;;;AAOyBA,MAAAA,M,gBAAhBC,Y;;AACiBC,MAAAA,O,iBAAjBC,a;;;;AART;AACA;AACA;AACA;AACA;AACA;;;;AAaS,iBAASC,SAAT,CAAmBC,IAAnB,EAA4D;AACjE,cAAI;AAAEC,YAAAA,CAAC,EAAEC,IAAL;AAAWC,YAAAA,CAAC,EAAEC,IAAd;AAAoBC,YAAAA,CAAC,EAAEC;AAAvB,cAAgCN,IAAI,CAAC,CAAD,CAAJ,CAAQO,UAAR,CAAmBC,GAAnB,EAApC;AACA,cAAI;AAAEP,YAAAA,CAAC,EAAEQ,IAAL;AAAWN,YAAAA,CAAC,EAAEO,IAAd;AAAoBL,YAAAA,CAAC,EAAEM;AAAvB,cAAgCX,IAAI,CAAC,CAAD,CAAJ,CAAQO,UAAR,CAAmBK,GAAnB,EAApC;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACc,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC;AACE,oBAAM;AAAEZ,gBAAAA,CAAF;AAAKE,gBAAAA;AAAL,kBAAWH,IAAI,CAACa,CAAD,CAAJ,CAAQN,UAAR,CAAmBC,GAAnB,EAAjB;;AACA,kBAAIP,CAAC,GAAGC,IAAR,EAAc;AACZA,gBAAAA,IAAI,GAAGD,CAAP;AACD;;AACD,kBAAIE,CAAC,GAAGC,IAAR,EAAc;AACZA,gBAAAA,IAAI,GAAGD,CAAP;AACD;AACF;AACD;AACE,oBAAM;AAAEF,gBAAAA,CAAF;AAAKE,gBAAAA;AAAL,kBAAWH,IAAI,CAACa,CAAD,CAAJ,CAAQN,UAAR,CAAmBK,GAAnB,EAAjB;;AACA,kBAAIX,CAAC,GAAGQ,IAAR,EAAc;AACZA,gBAAAA,IAAI,GAAGR,CAAP;AACD;;AACD,kBAAIE,CAAC,GAAGO,IAAR,EAAc;AACZA,gBAAAA,IAAI,GAAGP,CAAP;AACD;AACF;AACF;;AAED,gBAAMK,GAAG,GAAG,IAAIX,OAAJ,CAAYK,IAAZ,EAAkBE,IAAlB,EAAwBE,IAAxB,CAAZ;AACA,gBAAMS,IAAI,GAAG,IAAIlB,OAAJ,CAAYY,IAAZ,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BK,QAA9B,CAAuCR,GAAvC,CAAb;AACA,iBAAOb,MAAM,CAACsB,UAAP,CAAkBF,IAAI,CAACG,cAAL,CAAoB,GAApB,EAAyBC,GAAzB,CAA6BX,GAA7B,CAAlB,EAAqDO,IAArD,CAAP;AACD;;;SAlCOK,kC,KAAAA,kC;;yBAoCKA,kC","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismBounds as Bounds } from '../../Core/CubismGeometry';\r\nimport { CubismVector3 as Vector3 } from '../../Core/CubismVector';\r\nimport CubismMaskRenderer from './CubismMaskRenderer';\r\n\r\n/** Extensions for CubismMaskRenderer. */\r\nnamespace CubismMaskRendererExtensionMethods {\r\n  /**\r\n   * Combines bounds of multiple CubismMaskRenderers.\r\n   * @param self Renderers.\r\n   * @returns Combined bounds.\r\n   */\r\n  export function getBounds(self: Array<CubismMaskRenderer>): Bounds {\r\n    let { x: minX, y: minY, z: minZ } = self[0].meshBounds.min();\r\n    let { x: maxX, y: maxY, z: maxZ } = self[0].meshBounds.max();\r\n\r\n    for (let i = 1; i < self.length; i++) {\r\n      {\r\n        const { x, y } = self[i].meshBounds.min();\r\n        if (x < minX) {\r\n          minX = x;\r\n        }\r\n        if (y < minY) {\r\n          minY = y;\r\n        }\r\n      }\r\n      {\r\n        const { x, y } = self[i].meshBounds.max();\r\n        if (x > maxX) {\r\n          maxX = x;\r\n        }\r\n        if (y > maxY) {\r\n          maxY = y;\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = new Vector3(minX, minY, minZ);\r\n    const size = new Vector3(maxX, maxY, maxZ).subtract(min);\r\n    return Bounds.fromVector(size.multiplySingle(0.5).add(min), size);\r\n  }\r\n}\r\nexport default CubismMaskRendererExtensionMethods;\r\n"]}