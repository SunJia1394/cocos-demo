{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/CubismAutoEyeBlinkInput.ts"],"names":["CCFloat","Component","random","_decorator","CubismEyeBlinkController","ccclass","property","CubismAutoEyeBlinkInput","type","serializable","range","_controller","_t","_currentPhase","Phase","Idling","_lastValue","controller","value","t","currentPhase","lastValue","reset","resetInEditor","start","getComponent","lateUpdate","dt","Math","PI","ClosingEyes","timescale","abs","sin","OpeningEyes","maximumDeviation","mean","eyeOpening"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CCFloat, Component, random, _decorator } from 'cc';\r\nimport CubismEyeBlinkController from './CubismEyeBlinkController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/** Automatic mouth movement. */\r\n@ccclass('CubismAutoEyeBlinkInput')\r\nexport default class CubismAutoEyeBlinkInput extends Component {\r\n  /** Mean time between eye blinks in seconds. */\r\n  @property({ type: CCFloat, serializable: true, range: [1.0, 10.0, 0.001] })\r\n  public mean: number = 2.5;\r\n\r\n  /** Maximum deviation from {@link mean} in seconds. */\r\n  @property({ type: CCFloat, serializable: true, range: [0.5, 5.0, 0.001] })\r\n  public maximumDeviation: number = 2.0;\r\n\r\n  /** Timescale. */\r\n  @property({ type: CCFloat, serializable: true, range: [1.0, 20.0, 0.001] })\r\n  public timescale: number = 10.0;\r\n\r\n  /** Target controller. */\r\n  private _controller: CubismEyeBlinkController | null = null;\r\n  private get controller(): CubismEyeBlinkController | null {\r\n    return this._controller;\r\n  }\r\n  private set controller(value: CubismEyeBlinkController | null) {\r\n    this._controller = value;\r\n  }\r\n\r\n  /** Time until next eye blink. */\r\n  private _t: number = 0;\r\n  private get t(): number {\r\n    return this._t;\r\n  }\r\n  private set t(value: number) {\r\n    this._t = value;\r\n  }\r\n\r\n  /** Control over whether output should be evaluated. */\r\n  private _currentPhase: Phase = Phase.Idling;\r\n  private get currentPhase(): Phase {\r\n    return this._currentPhase;\r\n  }\r\n  private set currentPhase(value: Phase) {\r\n    this._currentPhase = value;\r\n  }\r\n\r\n  /** Used for switching from {@link Phase.ClosingEyes} to {@link Phase.OpeningEyes} and back to {@link Phase.Idling. */\r\n  private _lastValue: number = 0;\r\n  private get lastValue(): number {\r\n    return this._lastValue;\r\n  }\r\n  private set lastValue(value: number) {\r\n    this._lastValue = value;\r\n  }\r\n\r\n  /** Resets the input. */\r\n  public reset(): void {\r\n    this.t = 0;\r\n  }\r\n  public resetInEditor(): void {\r\n    this.reset();\r\n  }\r\n\r\n  //#region Cocos Creator Event Handling\r\n\r\n  /** Called by Cocos Creator. Initializes input. */\r\n  protected start(): void {\r\n    this.controller = this.getComponent(CubismEyeBlinkController);\r\n  }\r\n\r\n  /**\r\n   * Called by Cocos Creator. Updates controller.\r\n   *\r\n   * Make sure this method is called after any animations are evaluated.\r\n   */\r\n  protected lateUpdate(dt: number): void {\r\n    // Fail silently.\r\n    if (this.controller == null) {\r\n      return;\r\n    }\r\n\r\n    // Wait for time until blink.\r\n    if (this.currentPhase == Phase.Idling) {\r\n      this.t -= dt;\r\n\r\n      if (this.t < 0) {\r\n        this.t = Math.PI * -0.5;\r\n        this.lastValue = 1;\r\n        this.currentPhase = Phase.ClosingEyes;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Evaluate eye blinking.\r\n    this.t += dt * this.timescale;\r\n    let value = Math.abs(Math.sin(this.t));\r\n\r\n    if (this.currentPhase == Phase.ClosingEyes && value > this.lastValue) {\r\n      this.currentPhase = Phase.OpeningEyes;\r\n    } else if (this.currentPhase == Phase.OpeningEyes && value < this.lastValue) {\r\n      value = 1;\r\n      this.currentPhase = Phase.Idling;\r\n      const range = this.maximumDeviation * 2;\r\n      this.t = this.mean + random() * range - this.maximumDeviation;\r\n    }\r\n\r\n    this.controller.eyeOpening = value;\r\n    this.lastValue = value;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\n/** Internal states. */\r\nenum Phase {\r\n  /** Idle state. */\r\n  Idling,\r\n\r\n  /** State when closing eyes. */\r\n  ClosingEyes,\r\n\r\n  /** State when opening eyes. */\r\n  OpeningEyes,\r\n}\r\n"]}