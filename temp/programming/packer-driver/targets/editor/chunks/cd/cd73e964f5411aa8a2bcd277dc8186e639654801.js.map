{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Framework/LookAt/CubismLookController.ts"],"names":["Asset","CCFloat","CCObject","Component","Enum","math","Node","_decorator","CoreComponentExtensionMethods","CubismParameter","MathExtensions","ComponentExtensionMethods","CubismParameterBlendMode","CubismParameterExtensionMethods","CubismUpdateController","CubismUpdateExecutionOrder","ICubismUpdatable","ObjectExtensionMethods","CubismLookParameter","ICubismLookTarget","ccclass","property","CubismLookController","type","serializable","visible","SYMBOL","_targetInterface","_sources","Array","_destinations","_lastPosition","Vec3","ZERO","clone","_goalPosition","velocityBuffer","bindedOnLateUpdate","onLateUpdate","bind","target","_target","value","toNullUnlessImplementsInterface","isImplements","targetComponent","targetNode","isNode","targetAsset","targetInterface","getInterface","sources","destinations","lastPosition","goalPosition","hasUpdateController","_hasUpdateController","refresh","model","findCubismModel","parameters","getComponentsMany","length","i","getComponent","executionOrder","CUBISM_LOOK_CONTROLLER","needsUpdateOnEditing","enabled","isActive","center","position","inverseTransformPoint","node","getPosition","subtract","temp","smoothDamp","damping","blendToValue","blendMode","tickAndEvaluate","start","lateUpdate","Additive"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Asset, CCFloat, CCObject, Component, Enum, math, Node, _decorator } from 'cc';\r\nimport CoreComponentExtensionMethods from '../../Core/ComponentExtensionMethods';\r\nimport CubismParameter from '../../Core/CubismParameter';\r\nimport { MathExtensions } from '../../Utils';\r\nimport ComponentExtensionMethods from '../ComponentExtensionMethods';\r\nimport CubismParameterBlendMode from '../CubismParameterBlendMode';\r\nimport CubismParameterExtensionMethods from '../CubismParameterExtensionMethods';\r\nimport CubismUpdateController from '../CubismUpdateController';\r\nimport CubismUpdateExecutionOrder from '../CubismUpdateExecutionOrder';\r\nimport ICubismUpdatable from '../ICubismUpdatable';\r\nimport ObjectExtensionMethods from '../ObjectExtensionMethods';\r\nimport CubismLookParameter from './CubismLookParameter';\r\nimport ICubismLookTarget from './ICubismLookTarget';\r\nconst { ccclass, property } = _decorator;\r\n/**\r\n * Controls {@link CubismLookParameter}s.\r\n *\r\n * **Sealed class**\r\n */\r\n@ccclass('CubismLookController')\r\nexport class CubismLookController extends Component implements ICubismUpdatable {\r\n  /** Blend mode. */\r\n  @property({ type: Enum(CubismParameterBlendMode), serializable: true, visible: true })\r\n  public blendMode: CubismParameterBlendMode = CubismParameterBlendMode.Additive;\r\n\r\n  /** {@link target} backing field. */\r\n  @property({ type: CCObject, serializable: true, visible: false })\r\n  private _target: ((Component | Asset) & ICubismLookTarget) | Node | null = null;\r\n\r\n  /** Target. */\r\n  @property({ type: CCObject, visible: true })\r\n  public get target(): ((Component | Asset) & ICubismLookTarget) | Node | null {\r\n    return this._target;\r\n  }\r\n  public set target(value: ((Component | Asset) & ICubismLookTarget) | Node | null) {\r\n    this._target = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismLookTarget.isImplements\r\n    ) as ((Component | Asset) & ICubismLookTarget) | Node | null;\r\n  }\r\n\r\n  @property({ type: Component, visible: true })\r\n  private get targetComponent(): (Component & ICubismLookTarget) | null {\r\n    return this._target instanceof Component ? this._target : null;\r\n  }\r\n  private set targetComponent(value: (Component & ICubismLookTarget) | null) {\r\n    this._target = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismLookTarget.isImplements\r\n    ) as (Component & ICubismLookTarget) | null;\r\n  }\r\n\r\n  @property({ type: Node, visible: true })\r\n  private get targetNode(): Node | null {\r\n    return Node.isNode(this._target) ? this._target : null;\r\n  }\r\n  private set targetNode(value: Node | null) {\r\n    this._target = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismLookTarget.isImplements\r\n    ) as Node | null;\r\n  }\r\n\r\n  @property({ type: Asset, visible: true })\r\n  private get targetAsset(): (Asset & ICubismLookTarget) | null {\r\n    return this._target instanceof Asset ? this._target : null;\r\n  }\r\n  private set targetAsset(value: (Asset & ICubismLookTarget) | null) {\r\n    this._target = ObjectExtensionMethods.toNullUnlessImplementsInterface(\r\n      value,\r\n      ICubismLookTarget.isImplements\r\n    ) as (Asset & ICubismLookTarget) | null;\r\n  }\r\n\r\n  /** TargetInterface backing field. */\r\n  private _targetInterface: ICubismLookTarget | null = null;\r\n\r\n  /** Interface of target. */\r\n  private get targetInterface(): ICubismLookTarget | null {\r\n    if (this._targetInterface == null) {\r\n      this._targetInterface =\r\n        this.target == null\r\n          ? null\r\n          : (ObjectExtensionMethods.getInterface(\r\n              this.target,\r\n              ICubismLookTarget.isImplements\r\n            ) as ICubismLookTarget | null);\r\n    }\r\n    return this._targetInterface;\r\n  }\r\n\r\n  /** Local center position. */\r\n  @property({ type: Node, serializable: true, visible: true })\r\n  public center: Node | null = null;\r\n\r\n  /** Damping to apply. */\r\n  @property({ type: CCFloat, serializable: true, visible: true })\r\n  public damping: number = 0.15;\r\n\r\n  private _sources: CubismLookParameter[] = new Array(0);\r\n  /** Source parameters. */\r\n  public get sources(): CubismLookParameter[] {\r\n    return this._sources;\r\n  }\r\n  public set sources(value: CubismLookParameter[]) {\r\n    this._sources = value;\r\n  }\r\n\r\n  private _destinations: (CubismParameter | null)[] = new Array(0);\r\n  /** The actual parameters to apply the source values to. */\r\n  public get destinations(): (CubismParameter | null)[] {\r\n    return this._destinations;\r\n  }\r\n  public set destinations(value: (CubismParameter | null)[]) {\r\n    this._destinations = value;\r\n  }\r\n\r\n  private _lastPosition: math.Vec3 = math.Vec3.ZERO.clone();\r\n  /** Position at last frame. */\r\n  public get lastPosition(): math.Vec3 {\r\n    return this._lastPosition;\r\n  }\r\n  public set lastPosition(value: math.Vec3) {\r\n    this._lastPosition = value;\r\n  }\r\n\r\n  /** Goal position. */\r\n  private _goalPosition: math.Vec3 = math.Vec3.ZERO.clone();\r\n  public get goalPosition(): math.Vec3 {\r\n    return this._goalPosition;\r\n  }\r\n  public set goalPosition(value: math.Vec3) {\r\n    this._goalPosition = value;\r\n  }\r\n\r\n  /** Buffer for Mathf.SmoothDamp(float, float, ref float, float) velocity. */\r\n  private velocityBuffer: math.Vec3 = math.Vec3.ZERO.clone();\r\n\r\n  @property({ serializable: true, visible: false })\r\n  private _hasUpdateController: boolean = false;\r\n  /** Model has update controller component. */\r\n  public get hasUpdateController(): boolean {\r\n    return this._hasUpdateController;\r\n  }\r\n  public set hasUpdateController(value: boolean) {\r\n    this._hasUpdateController = value;\r\n  }\r\n\r\n  /** Refreshes the controller. Call this method after adding and/or removing {@link CubismLookParameter}s. */\r\n  public refresh(): void {\r\n    const model = CoreComponentExtensionMethods.findCubismModel(this);\r\n    if (model == null) {\r\n      return;\r\n    }\r\n    if (model.parameters == null) {\r\n      return;\r\n    }\r\n\r\n    // Catch sources and destinations.\r\n\r\n    this.sources = ComponentExtensionMethods.getComponentsMany(\r\n      model.parameters,\r\n      CubismLookParameter\r\n    );\r\n    this.destinations = new Array<CubismParameter>(this.sources.length);\r\n\r\n    for (let i = 0; i < this.sources.length; i++) {\r\n      this.destinations[i] = this.sources[i].getComponent(CubismParameter);\r\n    }\r\n\r\n    // Get cubism update controller.\r\n    this.hasUpdateController = this.getComponent(CubismUpdateController) != null;\r\n  }\r\n\r\n  /** Called by cubism update controller. Order to invoke OnLateUpdate. */\r\n  public get executionOrder(): number {\r\n    return CubismUpdateExecutionOrder.CUBISM_LOOK_CONTROLLER;\r\n  }\r\n\r\n  /** Called by cubism update controller. Needs to invoke OnLateUpdate on Editing. */\r\n  public get needsUpdateOnEditing(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /** Called by cubism update controller. Updates controller. */\r\n  public onLateUpdate(): void {\r\n    // Return if it is not valid or there's nothing to update.\r\n    if (!this.enabled || this.destinations == null) {\r\n      return;\r\n    }\r\n\r\n    // Return early if no target is available or if target is inactive.\r\n    const target = this.targetInterface;\r\n\r\n    if (target == null || !target.isActive()) {\r\n      return;\r\n    }\r\n    if (this.center == null) {\r\n      return;\r\n    }\r\n\r\n    // Update position.\r\n    let position = this.lastPosition;\r\n\r\n    const inverseTransformPoint = this.node.inverseTransformPoint(\r\n      new math.Vec3(),\r\n      target.getPosition()\r\n    );\r\n    this.goalPosition = math.Vec3.subtract(\r\n      new math.Vec3(),\r\n      inverseTransformPoint,\r\n      this.center.position\r\n    );\r\n    if (position != this.goalPosition) {\r\n      const temp = MathExtensions.Vec3.smoothDamp(\r\n        position,\r\n        this.goalPosition,\r\n        this.velocityBuffer,\r\n        this.damping\r\n      );\r\n      position = temp[0];\r\n      this.velocityBuffer = temp[1];\r\n    }\r\n\r\n    // Update sources and destinations.\r\n    for (let i = 0; i < this.destinations.length; i++) {\r\n      CubismParameterExtensionMethods.blendToValue(\r\n        this.destinations[i],\r\n        this.blendMode,\r\n        this.sources[i].tickAndEvaluate(position)\r\n      );\r\n    }\r\n\r\n    // Store position.\r\n    this.lastPosition = position;\r\n  }\r\n\r\n  //#region Cocos Creator Events Handling\r\n\r\n  /** Called by Cocos Creator. Makes sure cache is initialized. */\r\n  protected start(): void {\r\n    // Default center if necessary.\r\n    if (this.center == null) {\r\n      this.center = this.node;\r\n    }\r\n\r\n    // Initialize cache.\r\n    this.refresh();\r\n  }\r\n\r\n  /** Called by Cocos Creator. Updates controller. */\r\n  protected lateUpdate(): void {\r\n    if (!this.hasUpdateController) {\r\n      this.onLateUpdate();\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  public readonly bindedOnLateUpdate: ICubismUpdatable.CallbackFunction =\r\n    this.onLateUpdate.bind(this);\r\n  public readonly [ICubismUpdatable.SYMBOL]: typeof ICubismUpdatable.SYMBOL =\r\n    ICubismUpdatable.SYMBOL;\r\n}\r\n"]}