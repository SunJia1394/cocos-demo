{"version":3,"sources":["file:///Users/sunjia/project/cocos-test/cocos-demo/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismPart.ts"],"names":["_decorator","Component","Node","CCFloat","ccclass","property","CubismPart","serializable","visible","type","readonly","unmanagedParts","_model","createParts","model","_root","_parts","parts","_buffer","Array","count","i","length","_proxy","addComponent","addChild","reset","unmanagedIndex","_unmanagedIndex","value","id","ids","opacityInEditor","opacity","forceUpdateNow","revive","index","node","name","opacities"],"mappings":"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","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { _decorator, Component, Node, CCFloat } from 'cc';\r\nimport type { Model, Parts } from '../CubismCore';\r\nimport type CubismModel from './CubismModel';\r\nconst { ccclass, property } = _decorator;\r\n\r\n// TODO: CubismDontMoveOnReimport\r\n/**\r\n * Single CubismModel part.\r\n *\r\n * **Sealed class.**\r\n */\r\n@ccclass('CubismPart')\r\nexport default class CubismPart extends Component {\r\n  //#region Factory Methods\r\n\r\n  /**\r\n   * Creates parts for a {@link CubismModel}.\r\n   * @param model Handle to unmanaged model.\r\n   * @returns Parts root.\r\n   */\r\n  public static createParts(model: Model): Node {\r\n    const _root = new Node('Parts');\r\n\r\n    // Create parts.\r\n    const _parts = model.parts;\r\n    const _buffer = new Array<CubismPart>(_parts!.count);\r\n\r\n    for (let i = 0; i < _buffer.length; ++i) {\r\n      const _proxy = new Node();\r\n      _buffer[i] = _proxy.addComponent(CubismPart);\r\n      _root.addChild(_proxy);\r\n      _buffer[i].reset(model, i);\r\n    }\r\n    return _root;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /** Unmanaged parts from unmanaged model. */\r\n  private unmanagedParts: Parts | null = null;\r\n\r\n  /** {@link unmanagedIndex} backing field. */\r\n  @property({ serializable: true, visible: false })\r\n  private _unmanagedIndex: number = -1;\r\n\r\n  /** Position in unmanaged arrays. */\r\n  public get unmanagedIndex(): number {\r\n    return this._unmanagedIndex;\r\n  }\r\n  private set unmanagedIndex(value: number) {\r\n    this._unmanagedIndex = value;\r\n  }\r\n\r\n  /** Copy of Id. */\r\n  public get id(): string {\r\n    return this.unmanagedParts?.ids[this.unmanagedIndex] ?? '';\r\n  }\r\n\r\n  /** Current opacity. */\r\n  @property({ type: CCFloat, serializable: true, visible: false })\r\n  public opacity: number = 0;\r\n\r\n  /** Editor Only, For operation from inspector. */\r\n  private _model: CubismModel | null = null;\r\n\r\n  /** Editor Only, For operation from inspector. */\r\n  @property({ type: CCFloat, visible: true, readonly: false })\r\n  private set opacityInEditor(value: number) {\r\n    if (this.opacity !== value) {\r\n      this.opacity = value;\r\n      this._model?.forceUpdateNow();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revives instance.\r\n   * @param model TaskableModel to unmanaged unmanagedModel.\r\n   */\r\n  public revive(model: Model): void {\r\n    this.unmanagedParts = model.parts ?? null;\r\n  }\r\n\r\n  /**\r\n   * Restores instance to initial state.\r\n   * @param model TaskableModel to unmanaged unmanagedModel.\r\n   * @param index Position in unmanaged arrays.\r\n   */\r\n  public reset(model: Model, index: number) {\r\n    this.revive(model);\r\n    this._unmanagedIndex = index;\r\n    this.node.name = this.id;\r\n    this.opacity = this.unmanagedParts!.opacities[index];\r\n  }\r\n}\r\n"]}