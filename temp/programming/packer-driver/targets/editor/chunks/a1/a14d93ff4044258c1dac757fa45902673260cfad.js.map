{"version":3,"sources":["file:///Users/sunjia/project/cocos/NewProject_1/extensions/live2d_cubismsdk_cocoscreator/static/assets/Core/CubismCanvasInformation.ts"],"names":["CubismCanvasInformation","constructor","unmanagedModel","_unmanagedCanvasInformation","reset","instantiate","unmanagedCanvasInformation","value","canvasWidth","CanvasWidth","canvasHeight","CanvasHeight","canvasOriginX","CanvasOriginX","canvasOriginY","CanvasOriginY","pixelsPerUnit","PixelsPerUnit","revive","canvasinfo"],"mappings":";;;iBAeqBA,uB;;;;;;;;;;AAfrB;AACA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;yBACqBA,uB,GAAN,MAAMA,uBAAN,CAA8B;AACnCC,QAAAA,WAAW,CAACC,cAAD,EAAwB;AAAA,eAYnCC,2BAZmC,GAYc,IAZd;AACzC,eAAKC,KAAL,CAAWF,cAAX;AACD;AAED;AACF;AACA;AACA;;;AAC2B,eAAXG,WAAW,CAACH,cAAD,EAAiD;AACxE,iBAAO,IAAIF,uBAAJ,CAA4BE,cAA5B,CAAP;AACD;;AAGD;AACsC,YAA1BI,0BAA0B,GAAsB;AAC1D,iBAAO,KAAKH,2BAAZ;AACD;;AACqC,YAA1BG,0BAA0B,CAACC,KAAD,EAA2B;AAC/D,eAAKJ,2BAAL,GAAmCI,KAAnC;AACD;AAED;;;AACsB,YAAXC,WAAW,GAAW;AAAA;;AAC/B,oEAAO,KAAKF,0BAAZ,qBAAO,uBAAiCG,WAAxC,oCAAuD,CAAvD;AACD;AAED;;;AACuB,YAAZC,YAAY,GAAW;AAAA;;AAChC,qEAAO,KAAKJ,0BAAZ,qBAAO,uBAAiCK,YAAxC,qCAAwD,CAAxD;AACD;AAED;;;AACwB,YAAbC,aAAa,GAAW;AAAA;;AACjC,qEAAO,KAAKN,0BAAZ,qBAAO,uBAAiCO,aAAxC,qCAAyD,CAAzD;AACD;AAED;;;AACwB,YAAbC,aAAa,GAAW;AAAA;;AACjC,qEAAO,KAAKR,0BAAZ,qBAAO,uBAAiCS,aAAxC,qCAAyD,CAAzD;AACD;AAED;;;AACwB,YAAbC,aAAa,GAAW;AAAA;;AACjC,sEAAO,KAAKV,0BAAZ,qBAAO,wBAAiCW,aAAxC,qCAAyD,CAAzD;AACD;AAED;AACF;AACA;AACA;;;AACSC,QAAAA,MAAM,CAAChB,cAAD,EAA8B;AACzC,eAAKI,0BAAL,GAAkCJ,cAAc,CAACiB,UAAjD;AACD;AAED;AACF;AACA;AACA;;;AACUf,QAAAA,KAAK,CAACF,cAAD,EAA8B;AACzC,eAAKgB,MAAL,CAAYhB,cAAZ;AACD;;AA7D0C,O","sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CanvasInfo, Model } from '../CubismCore';\r\nimport type CubismModel from './CubismModel';\r\n\r\n/**\r\n * Single {@link CubismModel} canvas information.\r\n *\r\n * **Sealed class**\r\n */\r\nexport default class CubismCanvasInformation {\r\n  private constructor(unmanagedModel: Model) {\r\n    this.reset(unmanagedModel);\r\n  }\r\n\r\n  /**\r\n   * Initializes instance.\r\n   * @param unmanagedModel Handle to unmanaged model.\r\n   */\r\n  public static instantiate(unmanagedModel: Model): CubismCanvasInformation {\r\n    return new CubismCanvasInformation(unmanagedModel);\r\n  }\r\n\r\n  private _unmanagedCanvasInformation: CanvasInfo | null = null;\r\n  /** Unmanaged canvas information from unmanaged model. */\r\n  private get unmanagedCanvasInformation(): CanvasInfo | null {\r\n    return this._unmanagedCanvasInformation;\r\n  }\r\n  private set unmanagedCanvasInformation(value: CanvasInfo | null) {\r\n    this._unmanagedCanvasInformation = value;\r\n  }\r\n\r\n  /** Width of native model canvas. */\r\n  public get canvasWidth(): number {\r\n    return this.unmanagedCanvasInformation?.CanvasWidth ?? 0;\r\n  }\r\n\r\n  /** Height of native model canvas. */\r\n  public get canvasHeight(): number {\r\n    return this.unmanagedCanvasInformation?.CanvasHeight ?? 0;\r\n  }\r\n\r\n  /** Coordinate origin of X axis. */\r\n  public get canvasOriginX(): number {\r\n    return this.unmanagedCanvasInformation?.CanvasOriginX ?? 0;\r\n  }\r\n\r\n  /** Coordinate origin of Y axis. */\r\n  public get canvasOriginY(): number {\r\n    return this.unmanagedCanvasInformation?.CanvasOriginY ?? 0;\r\n  }\r\n\r\n  /** Pixels per unit of native model. */\r\n  public get pixelsPerUnit(): number {\r\n    return this.unmanagedCanvasInformation?.PixelsPerUnit ?? 0;\r\n  }\r\n\r\n  /**\r\n   * Revives the instance.\r\n   * @param unmanagedModel Handle to unmanaged model.\r\n   */\r\n  public revive(unmanagedModel: Model): void {\r\n    this.unmanagedCanvasInformation = unmanagedModel.canvasinfo;\r\n  }\r\n\r\n  /**\r\n   * Restores instance to initial state.\r\n   * @param unmanagedModel Handle to unmanaged model.\r\n   */\r\n  private reset(unmanagedModel: Model): void {\r\n    this.revive(unmanagedModel);\r\n  }\r\n}\r\n"]}